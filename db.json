{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b11d7218814f60db5fe504ed4a0a279fb9f82f9a","modified":1484407441000},{"_id":"source/CNAME","hash":"594ff83e4e140ad8e67607149cb90ec6f0044c55","modified":1484381957000},{"_id":"source/404.html","hash":"a22b17e1ab1ef559e3515ec284d213110898a0fc","modified":1467533068000},{"_id":"source/favicon.ico","hash":"83fdee3f26deee5ba10c8459231c9b4c0c8eac21","modified":1484407987000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1462448087000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1462448087000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1462448087000},{"_id":"themes/next/.DS_Store","hash":"61d4653525ee800306d888d998f91174144e6d64","modified":1484409135000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1462448087000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1462448087000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1462448087000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1462448087000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1462448087000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1462448087000},{"_id":"themes/next/_config.yml","hash":"64fd1e3492e5215e43ccf0e22f472ec18b4e830e","modified":1528471996083},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1462448087000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1462448087000},{"_id":"source/about/index.md","hash":"540c7ab43e5abbd8f1983f9b5234bb239a0283ab","modified":1467530463000},{"_id":"source/_posts/hadoop-yarn中ResourceManager的服务模块.md","hash":"2a4da0b0851bf44f4207666459fd2b076bc888b0","modified":1468069642000},{"_id":"source/_posts/Spark-on-yarn的内存分配问题.md","hash":"3b5b72f27732290574b011ef0852e11b468f794a","modified":1485141333000},{"_id":"source/_posts/kafka-0-10-0启动过程分析.md","hash":"1f4189d02749cb877420df471139988774fbffb3","modified":1468069527000},{"_id":"source/_posts/Storm的消息可靠处理机制.md","hash":"c9746e223f4197fce60c53be7222ed6fa90e7c2c","modified":1485141342000},{"_id":"source/_posts/mac系统下hadoop-2-7源码编译、导入eclipse及打包.md","hash":"6f907ca293c97b7809914c9979898a7b66f266d9","modified":1468069656000},{"_id":"source/_posts/redis服务端连接断开问题诊断.md","hash":"46ed7c463104b9fb6483af983b9cbfa92f567b6b","modified":1468053591000},{"_id":"source/_posts/shell中的IFS分隔符.md","hash":"6aca062c48576f8e78c4f46a53374cd30ce7d2c4","modified":1467647548000},{"_id":"source/_posts/storm源码编译及本地调试方法.md","hash":"81f9adb49dd710a241582dbf36f587157b022aac","modified":1483361942000},{"_id":"source/_posts/使用httpclient引起的tcp连接数超高问题.md","hash":"c42432da03f7602a7c23769010692bbe9933e087","modified":1467647299000},{"_id":"source/_posts/storm集群supervisor节点异常退出问题排查.md","hash":"f6bbbfccb7de4c6934bc2764670f5509a928ea71","modified":1485141347000},{"_id":"source/_posts/交换空间使用率过高问题分析.md","hash":"1d511979b65985886269f1e4d20bc4f39d232b6c","modified":1485141382000},{"_id":"source/_posts/使用shell切割文件.md","hash":"30d3d50240a2dc46c17c7176b160d6ecfb66bc4a","modified":1467647487000},{"_id":"source/_posts/使用hexo-gitpage搭建博客.md","hash":"8ac2115d787292776feb8aeed8bc2aa14f471ac0","modified":1467552691000},{"_id":"source/_posts/基于zookeeper的分布式独占锁实现.md","hash":"57249f11a12ce07e77e46f18d5d659ca7398bf18","modified":1467647940000},{"_id":"source/archives/index.md","hash":"2146241599f29891905dfe3985f3d08321d95273","modified":1467531401000},{"_id":"source/_posts/使用zookeeper协调多服务器的任务处理.md","hash":"c5b0d36b028fd902050db226941d0c6403a8b9a3","modified":1468054025000},{"_id":"source/_posts/将Hadoop-RPC框架应用于多节点任务调度.md","hash":"4443d82946fb4a3dcf0dd5ca8df6f4387b8f3417","modified":1468069499000},{"_id":"source/_posts/前后端的CharacterEncoding不一致导致提交的表单数据丢失问题.md","hash":"d137f3a695f612deed15058672d710eff8b10d02","modified":1467648670000},{"_id":"source/categories/index.md","hash":"39d014bbaf154b1d117cd5d647c187a4ad331739","modified":1467531203000},{"_id":"source/books/index.md","hash":"b4923c9455f4ab5c314c6c9d38b2049753678a18","modified":1484411037000},{"_id":"source/images/avatar.jpg","hash":"3b7c556ef5bd852482c88dd146b7925fe8ad8c60","modified":1467532477000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1467559008000},{"_id":"source/tags/index.md","hash":"00d0b5f21a575b7f056afe20af1c33f55bcad640","modified":1467531210000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1467558383000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1462448087000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1462448087000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1462448087000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1462448087000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1462448087000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1462448087000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1462448087000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1462448087000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1462448087000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1462448087000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1462448087000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"0d1a740238e3f8932dde83c5c0743e76a65adae3","modified":1484410637000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1462448087000},{"_id":"themes/next/layout/_layout.swig","hash":"d13b66408e3c4d29aecdff6a4a24b0da2c66e777","modified":1484580270000},{"_id":"themes/next/layout/.DS_Store","hash":"3846e5ec0495b1629bd13b6539ee80f6793487d7","modified":1484409002000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1462448087000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1462448087000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1462448087000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1462448087000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1462448087000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1462448087000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1462448087000},{"_id":"themes/next/source/favicon.ico","hash":"83fdee3f26deee5ba10c8459231c9b4c0c8eac21","modified":1484407987000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1462448087000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1462448087000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1462448087000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1468116381000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1462448087000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1462448087000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"bd5c57ad4133f82fcdafbd19f359341102e2daec","modified":1484583539000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1462448087000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1462448087000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9a4dfcfd9bf4c36248f4cf8a15f53a8ca44a61a3","modified":1484840073000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1462448087000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1462448087000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1462448087000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1462448087000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"8eba6cf9d455e94edd3b77edd8da6f7381635afc","modified":1484840010000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1462448087000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1462448087000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1462448087000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1462448087000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1462448087000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1462448087000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1462448087000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1462448087000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1462448087000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1462448087000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1462448087000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1462448087000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1462448087000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1462448087000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1462448087000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1462448087000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1462448087000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1462448087000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462448087000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1462448087000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1462448087000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1462448087000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1462448087000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1462448087000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1462448087000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1462448087000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1462448087000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1462448087000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1462448087000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1462448087000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1462448087000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1462448087000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1462448087000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1462448087000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1462448087000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1462448087000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1462448087000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"6fba86ab326bf0536ddbd4de3cf71a013efde213","modified":1467541324000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1462448087000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1462448087000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1462448087000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1462448087000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1462448087000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1462448087000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1462448087000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1462448087000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1462448087000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1462448087000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1462448087000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1462448087000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1462448087000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1462448087000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1462448087000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1462448087000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1484580066000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1462448087000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1462448087000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1462448087000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1462448087000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1462448087000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1462448087000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1462448087000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"d501006a7854a522ae584b031e83d5aa757bef1f","modified":1467541255000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1462448087000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1462448087000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1462448087000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1462448087000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1462448087000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1462448087000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"acb447ab1879cbf8af48a9e84c26c4f850099c0d","modified":1484582983000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1462448087000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1462448087000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1462448087000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1462448087000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1462448087000},{"_id":"public/baidusitemap.xml","hash":"dc014788b1d52d8c8b830210b57973e2a3541250","modified":1528471555898},{"_id":"public/search.xml","hash":"7d34b14e3e52f7e6d791b6e0542e54904af539ae","modified":1528471555934},{"_id":"public/atom.xml","hash":"53e99025f3f6c8c8b42ce76c1c773415a79224e7","modified":1528471555934},{"_id":"public/sitemap.xml","hash":"17e61421c0e67b2e8660a9e81cbee31a655f8b67","modified":1528471555934},{"_id":"public/404.html","hash":"20008bec4c6ca2b13b487720351c1e78d7e8c2d9","modified":1528472014153},{"_id":"public/about/index.html","hash":"83d401f775b7f74b6b7953f04c0dd57ef920c93d","modified":1528472014153},{"_id":"public/archives/index.html","hash":"0aa1f6658667a1ba0fa715909ab155afa66afd7c","modified":1528472014153},{"_id":"public/categories/index.html","hash":"05983dfb464d57ba0d987db3ff1ef905e00fdff9","modified":1528472014153},{"_id":"public/books/index.html","hash":"e0888a9c8d145895adba015492ead942b8def1df","modified":1528472014153},{"_id":"public/tags/index.html","hash":"bfd26b1e1ab98d86188ecf05990b0c22585223b2","modified":1528472014153},{"_id":"public/2016/07/13/storm源码编译及本地调试方法/index.html","hash":"c2a3f0672f27f6bd47513dd9512d00dc8567e0d8","modified":1528472014154},{"_id":"public/2016/07/08/kafka-0-10-0启动过程分析/index.html","hash":"63410110bc2e3be36a4cd8964382cbbb2cf3d0d6","modified":1528472014154},{"_id":"public/2015/11/05/Storm的消息可靠处理机制/index.html","hash":"7220a92ecd8be97a98b24e131fe73d54e02dfe98","modified":1528472014154},{"_id":"public/2015/08/11/Spark-on-yarn的内存分配问题/index.html","hash":"419c6a28ae61e28cf0322bff5c27733054e5fb96","modified":1528472014154},{"_id":"public/2015/07/03/storm集群supervisor节点异常退出问题排查/index.html","hash":"030e99ddf90748db3d55380e6fc535498eb3f90a","modified":1528472014154},{"_id":"public/2015/06/22/交换空间使用率过高问题分析/index.html","hash":"d52502943e13977e00c77b450cb192705ed39f05","modified":1528472014154},{"_id":"public/2015/06/06/hadoop-yarn中ResourceManager的服务模块/index.html","hash":"e850b872bd841d3f16e2994b6cc265a51b00d5b9","modified":1528472014154},{"_id":"public/2015/05/18/mac系统下hadoop-2-7源码编译、导入eclipse及打包/index.html","hash":"f3e0f4e847f43969786722979d119acc36111f60","modified":1528472014154},{"_id":"public/2014/09/02/使用hexo-gitpage搭建博客/index.html","hash":"fb39b4d6d892be79696cd14d7e65478adf026937","modified":1528472014154},{"_id":"public/2014/06/01/redis服务端连接断开问题诊断/index.html","hash":"b4ecc4dbf9d5ca3d0c6114da9ef3ae043f609967","modified":1528472014154},{"_id":"public/2014/05/13/基于zookeeper的分布式独占锁实现/index.html","hash":"b469d2e9856b45bdee5a7cd98279f6461efd2ac2","modified":1528472014154},{"_id":"public/2014/03/28/使用httpclient引起的tcp连接数超高问题/index.html","hash":"ebecab450645e7b91ce330482dd27a52c7094db7","modified":1528472014154},{"_id":"public/2014/03/20/前后端的CharacterEncoding不一致导致提交的表单数据丢失问题/index.html","hash":"868a26812179b373cea3997f07fec18a72639653","modified":1528472014154},{"_id":"public/2013/01/29/shell中的IFS分隔符/index.html","hash":"c7e4d83198a3ceaefabf4464458c1c6ad8bc2162","modified":1528472014154},{"_id":"public/2013/03/07/使用shell切割文件/index.html","hash":"fd96e229d454a9c31fe68e55494e4e2525628683","modified":1528472014154},{"_id":"public/2013/01/21/将Hadoop-RPC框架应用于多节点任务调度/index.html","hash":"352f802165ef426acd13f204f71a80ecc922d33f","modified":1528472014154},{"_id":"public/2012/11/13/使用zookeeper协调多服务器的任务处理/index.html","hash":"62041fd8e082e78ec34984165635222d8c6c6421","modified":1528472014154},{"_id":"public/archives/page/2/index.html","hash":"03ae2f9b5db310c15e4242fc804263c15f9ff792","modified":1528472014154},{"_id":"public/archives/2012/index.html","hash":"e84381f5c585b2d48ed7ddbd693128f78ccccf80","modified":1528472014155},{"_id":"public/archives/2012/11/index.html","hash":"db3c91d613aa36da89d5376be69816c2e99b32a1","modified":1528472014155},{"_id":"public/archives/2013/index.html","hash":"ed8e37a5deda13da4009fc21c49473ee3488925c","modified":1528472014155},{"_id":"public/archives/2013/01/index.html","hash":"d604273a9dec1923ed89150a06c770b31e043fa5","modified":1528472014155},{"_id":"public/archives/2013/03/index.html","hash":"d3b85bdc302d88c16e3454d735b0eea5952629c3","modified":1528472014155},{"_id":"public/archives/2014/index.html","hash":"210342667988ddf048e5d91ea3bae944629af35f","modified":1528472014155},{"_id":"public/archives/2014/03/index.html","hash":"c46017731c2c6e2fbbb798793332e3ed565da18b","modified":1528472014155},{"_id":"public/archives/2014/05/index.html","hash":"1c06f447986fa694c939a5528645dcd959e88226","modified":1528472014155},{"_id":"public/archives/2014/06/index.html","hash":"4525929bc2592d9925c6a13cfd68b7baea267d04","modified":1528472014156},{"_id":"public/archives/2014/09/index.html","hash":"511b6baed8c3ed7af36c679afa1a5d7d4a9cfbf5","modified":1528472014156},{"_id":"public/archives/2015/index.html","hash":"7ca31a1797784c67aa4998b789077091b55ee671","modified":1528472014156},{"_id":"public/archives/2015/05/index.html","hash":"3367f353ef7f4328641124131ce49c580b5b0d79","modified":1528472014156},{"_id":"public/archives/2015/06/index.html","hash":"667b5a8a61d2b9b7368eaa7bc75e6c31bcf256de","modified":1528472014156},{"_id":"public/archives/2015/07/index.html","hash":"0b640785fa8a76493bcc0ba5a9eb532c25aa9168","modified":1528472014156},{"_id":"public/archives/2015/08/index.html","hash":"63f6429adc2c649d8017f13818b1a70203d900c8","modified":1528472014156},{"_id":"public/archives/2015/11/index.html","hash":"fb1e67a061df086e5cc50584f006e29c158a9988","modified":1528472014156},{"_id":"public/archives/2016/index.html","hash":"e989372f583e8d78a7012feb243ba10f44c81d0a","modified":1528472014156},{"_id":"public/archives/2016/07/index.html","hash":"6ba6926c17bcd6bd76dc2ac28bac681db8c37180","modified":1528472014156},{"_id":"public/categories/Spark/index.html","hash":"fe0392ccc97258bc5b1ad2833702dc8130cc7de1","modified":1528472014156},{"_id":"public/categories/Hadoop/index.html","hash":"2352b48c05c3ac65a4170027cdaf056066bce2e4","modified":1528472014156},{"_id":"public/categories/Kafka/index.html","hash":"cae7a161e85516bbdd18a5c9b037c769811242d3","modified":1528472014156},{"_id":"public/categories/Storm/index.html","hash":"d436b6e1ed6126daa2a66cb96f194ee92c13f7a2","modified":1528472014156},{"_id":"public/categories/Redis/index.html","hash":"0b54f4ee5f339c5c7da3e9a4b7196ba17338432d","modified":1528472014157},{"_id":"public/categories/Shell/index.html","hash":"6cc3cc1e693a9959adc6f7594a7c95d7e060ce9d","modified":1528472014157},{"_id":"public/categories/问题分析/index.html","hash":"f9054a2db6316feeb041b5d84d56003378f02064","modified":1528472014157},{"_id":"public/categories/工具/index.html","hash":"42c642f361933cdfbf6f8d3cbe2f96061ee6e7b9","modified":1528472014157},{"_id":"public/categories/分布式应用/index.html","hash":"3f3280a3eec3d6182a130966b7d95a269350eeb5","modified":1528472014157},{"_id":"public/index.html","hash":"34c41c5cf43284735363e647d3da97760c0f46e3","modified":1528472014157},{"_id":"public/page/2/index.html","hash":"9412a217c39d8441c3126afbb0487e88194eae28","modified":1528472014157},{"_id":"public/tags/hadoop/index.html","hash":"690d4963debc77aab90f671cd9f0cbae50b56f4f","modified":1528472014157},{"_id":"public/tags/yarn/index.html","hash":"501499eb1bafd6d32f469ec6e8ec395e6d51a786","modified":1528472014158},{"_id":"public/tags/spark/index.html","hash":"b20079d62fe1d92491a883131bf4bac47ae1c37a","modified":1528472014158},{"_id":"public/tags/内存分配/index.html","hash":"aa2abd61923a6bda342ec2d93007495240533544","modified":1528472014158},{"_id":"public/tags/kafka/index.html","hash":"4d7e989d71fa584ceb277e6f9e3aab2c6757e34d","modified":1528472014158},{"_id":"public/tags/源码分析/index.html","hash":"21b4cea3d87bd682b4eb4e21b1f7b7908bc1bb1b","modified":1528472014158},{"_id":"public/tags/storm/index.html","hash":"d1efa5aa59c0fc19991c2f4d86d4235bb617d217","modified":1528472014158},{"_id":"public/tags/实时计算/index.html","hash":"21fbb9719814425b6fba8a66576eac068e3d245a","modified":1528472014160},{"_id":"public/tags/eclipse/index.html","hash":"9f4626759973786dcab9b2fb7f7f25a4e33150bb","modified":1528472014163},{"_id":"public/tags/redis/index.html","hash":"b0c5d676dc5039c11c275317c45455dd496d9ddb","modified":1528472014163},{"_id":"public/tags/连接断开/index.html","hash":"709be4bee2e03d9303ac2f05b802755bac5feff9","modified":1528472014163},{"_id":"public/tags/shell/index.html","hash":"d2ad7263143a865b390467cdef209a0daf985ead","modified":1528472014163},{"_id":"public/tags/源码编译/index.html","hash":"39fc25b5adcc5d8a7090d14aad75391770fc9c93","modified":1528472014163},{"_id":"public/tags/本地调试/index.html","hash":"3e113cf9963bf073285a5100213e7535c3c0388a","modified":1528472014163},{"_id":"public/tags/httpclient/index.html","hash":"65fd38552625fcac92116d176b9246827043e1c7","modified":1528472014163},{"_id":"public/tags/tcp连接数/index.html","hash":"a59ac73f4b5796079b15d60eb9c658b118c38df3","modified":1528472014163},{"_id":"public/tags/supervisor/index.html","hash":"71c2c935145dda4f8604916c6375d61f1688ae2d","modified":1528472014163},{"_id":"public/tags/异常排查/index.html","hash":"0d4fb1c2b6b68667851c8eeef1f74ba2a66198dd","modified":1528472014163},{"_id":"public/tags/swap分区/index.html","hash":"27541cae225dfdfe7218b945b3d627257e8acdcf","modified":1528472014163},{"_id":"public/tags/问题分析/index.html","hash":"c278e6436b4daa6846823767b4feba515153f3e8","modified":1528472014163},{"_id":"public/tags/jvm调优/index.html","hash":"dbdd9ac5d5fddce9cbd56b4e2f3f9c6118bd5077","modified":1528472014164},{"_id":"public/tags/linux/index.html","hash":"17ef9032ed9b07cfe9e70cc380e54bbeb865e807","modified":1528472014164},{"_id":"public/tags/hexo/index.html","hash":"2903749d500336be9b404d231556c313a8f01e0f","modified":1528472014164},{"_id":"public/tags/gitpage/index.html","hash":"0ced5e4ef95bcb9eaf531f1c54e0beaee2142d22","modified":1528472014164},{"_id":"public/tags/zookeeper/index.html","hash":"213a314f81eae14de2469696ed02472b40fe50c4","modified":1528472014164},{"_id":"public/tags/分布式应用/index.html","hash":"c91c241b6b108bcc44577a9d8b2d2418d3495f00","modified":1528472014164},{"_id":"public/tags/分布式协调/index.html","hash":"69e6b259c07dca1c96a8792c973e0e459c098a26","modified":1528472014164},{"_id":"public/tags/横向扩展/index.html","hash":"730ef3702452f372715b89dae07c8fcbcee8e977","modified":1528472014164},{"_id":"public/tags/RPC/index.html","hash":"99fe92b063580633fc932b3b5997f300a0d99c4e","modified":1528472014164},{"_id":"public/tags/任务调度/index.html","hash":"24ad1fa530b8b48b88ba05527bf53a5a07ed4351","modified":1528472014164},{"_id":"public/tags/web开发/index.html","hash":"363494845f12849c47b8f02096595d138bd16ab8","modified":1528472014164},{"_id":"public/tags/java/index.html","hash":"672aee78b7e40a9dc37033d2b464c5672f311834","modified":1528472014164},{"_id":"public/CNAME","hash":"594ff83e4e140ad8e67607149cb90ec6f0044c55","modified":1528471555973},{"_id":"public/favicon.ico","hash":"83fdee3f26deee5ba10c8459231c9b4c0c8eac21","modified":1528471555973},{"_id":"public/images/avatar.jpg","hash":"3b7c556ef5bd852482c88dd146b7925fe8ad8c60","modified":1528471555973},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1528471555973},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1528471555973},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1528471555973},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1528471555973},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1528471555973},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1528471555974},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1528471555974},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1528471555974},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1528471555974},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1528471555974},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528471555974},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1528471555974},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1528471555974},{"_id":"public/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1528471555974},{"_id":"public/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1528471555974},{"_id":"public/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1528471555974},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1528471555974},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1528471555974},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1528471555974},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1528471555975},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1528471555975},{"_id":"public/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1528471555975},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1528471555975},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1528471555975},{"_id":"public/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1528471557594},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1528471557598},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1528471557599},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1528471557607},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1528471557607},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1528471557607},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1528471557607},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1528471557607},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1528471557607},{"_id":"public/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1528471557607},{"_id":"public/vendors/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1528471557607},{"_id":"public/vendors/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1528471557607},{"_id":"public/vendors/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1528471557607},{"_id":"public/vendors/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1528471557608},{"_id":"public/vendors/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1528471557608},{"_id":"public/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1528471557608},{"_id":"public/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1528471557608},{"_id":"public/vendors/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1528471557610},{"_id":"public/vendors/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1528471557610},{"_id":"public/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1528471557610},{"_id":"public/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1528471557610},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1528471557611},{"_id":"public/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1528471557611},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1528471557612},{"_id":"public/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1528471557612},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1528471557612},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1528471557612},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1528471557612},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1528471557612},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1528471557612},{"_id":"public/css/main.css","hash":"93b3adb32883b4a5d090d4011a74e47c650695ff","modified":1528471557612},{"_id":"public/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1528471557613},{"_id":"public/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1528471557613},{"_id":"public/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1528471557613},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1528471557613},{"_id":"public/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1528471557613},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1528471557613},{"_id":"public/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1528471557613},{"_id":"public/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1528471557613},{"_id":"public/vendors/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1528471557613},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1528471557613},{"_id":"public/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1528471557668}],"Category":[{"name":"Hadoop","_id":"cji64hxf00006d968klywb3b7"},{"name":"Spark","_id":"cji64hxfh000ed9684we3z1z3"},{"name":"Kafka","_id":"cji64hxfn000jd9680zqj7cw5"},{"name":"Storm","_id":"cji64hxfy000rd9689g1emobu"},{"name":"Redis","_id":"cji64hxg4000wd968xclim7fa"},{"name":"Shell","_id":"cji64hxgb0013d968mgukmgt6"},{"name":"问题分析","_id":"cji64hxgp001fd968p3nxtghn"},{"name":"工具","_id":"cji64hxgr001nd968tj6y99va"},{"name":"分布式应用","_id":"cji64hxgu001sd968alyvwhyf"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"https://maohong.github.io\"\n        homePageName=\"回到我的主页\">\n</script>\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"https://maohong.github.io\"\n        homePageName=\"回到我的主页\">\n</script>\n</body>\n</html>\n","date":"2016-07-03T08:04:28.000Z","updated":"2016-07-03T08:04:28.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cji64hx9m0000d968fnm81td3","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"https://maohong.github.io\" homepagename=\"回到我的主页\">\n</script>\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"https://maohong.github.io\"\n        homePageName=\"回到我的主页\">\n</script>\n</body>\n</html>\n"},{"title":"about","date":"2016-03-03T07:16:19.000Z","_content":"Interests:\n--\nJava/Python/Scala/Shell/BigData/Hadoop/HBase/Hive/Spark/SQL/NoSQL/ML and serious of open-source projects.\n\nContact：\n--\n新浪微博：@maohong-V  \nGithub：https://github.com/maohong  \nEmail：maohong.tech@gmail.com","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-03-03 15:16:19\n---\nInterests:\n--\nJava/Python/Scala/Shell/BigData/Hadoop/HBase/Hive/Spark/SQL/NoSQL/ML and serious of open-source projects.\n\nContact：\n--\n新浪微博：@maohong-V  \nGithub：https://github.com/maohong  \nEmail：maohong.tech@gmail.com","updated":"2016-07-03T07:21:03.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cji64hxed0001d968zpcet37x","content":"<h2 id=\"Interests\"><a href=\"#Interests\" class=\"headerlink\" title=\"Interests:\"></a>Interests:</h2><p>Java/Python/Scala/Shell/BigData/Hadoop/HBase/Hive/Spark/SQL/NoSQL/ML and serious of open-source projects.</p>\n<h2 id=\"Contact：\"><a href=\"#Contact：\" class=\"headerlink\" title=\"Contact：\"></a>Contact：</h2><p>新浪微博：@maohong-V<br>Github：<a href=\"https://github.com/maohong\" target=\"_blank\" rel=\"external\">https://github.com/maohong</a><br>Email：maohong.tech@gmail.com</p>\n","excerpt":"","more":"<h2 id=\"Interests\"><a href=\"#Interests\" class=\"headerlink\" title=\"Interests:\"></a>Interests:</h2><p>Java/Python/Scala/Shell/BigData/Hadoop/HBase/Hive/Spark/SQL/NoSQL/ML and serious of open-source projects.</p>\n<h2 id=\"Contact：\"><a href=\"#Contact：\" class=\"headerlink\" title=\"Contact：\"></a>Contact：</h2><p>新浪微博：@maohong-V<br>Github：<a href=\"https://github.com/maohong\">https://github.com/maohong</a><br>Email：maohong.tech@gmail.com</p>\n"},{"title":"归档","date":"2016-07-03T07:36:16.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: 归档\ndate: 2016-07-03 15:36:16\n---\n","updated":"2016-07-03T07:36:41.000Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cji64hxem0003d968eee95dhv","content":"","excerpt":"","more":""},{"title":"分类","date":"2016-07-03T07:22:46.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-07-03 15:22:46\ntype: \"categories\"\n---\n","updated":"2016-07-03T07:33:23.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cji64hxf10007d968arnhwopa","content":"","excerpt":"","more":""},{"title":"books","date":"2017-01-14T16:16:30.000Z","_content":"Java：\n--\n《深入理解Java虚拟机》\n\n《Java并发编程实战》\n\nTo be added ... ","source":"books/index.md","raw":"---\ntitle: books\ndate: 2017-01-15 00:16:30\n---\nJava：\n--\n《深入理解Java虚拟机》\n\n《Java并发编程实战》\n\nTo be added ... ","updated":"2017-01-14T16:23:57.000Z","path":"books/index.html","comments":1,"layout":"page","_id":"cji64hxfb0009d968kz8szper","content":"<h2 id=\"Java：\"><a href=\"#Java：\" class=\"headerlink\" title=\"Java：\"></a>Java：</h2><p>《深入理解Java虚拟机》</p>\n<p>《Java并发编程实战》</p>\n<p>To be added … </p>\n","excerpt":"","more":"<h2 id=\"Java：\"><a href=\"#Java：\" class=\"headerlink\" title=\"Java：\"></a>Java：</h2><p>《深入理解Java虚拟机》</p>\n<p>《Java并发编程实战》</p>\n<p>To be added … </p>\n"},{"title":"标签","date":"2016-07-03T07:30:44.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-07-03 15:30:44\ntype: \"tags\"\n---\n","updated":"2016-07-03T07:33:30.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cji64hxff000cd968pe3p4ebw","content":"","excerpt":"","more":""}],"Post":[{"title":"hadoop-yarn中ResourceManager的服务模块","date":"2015-06-06T05:10:10.000Z","_content":"\nYarn简述\n--\n\nHadoop2.0引入了yarn（Yet Another Resource Negotiator）资源管理框架。1.0中的MapReduce计算框架变为运行在yarn上的一种application。\n\nYarn依然采用了master/slave结构，master是ResourceManager，负责整个集群的资源管理和调度，并且支持HA，slave是NodeManager，负责管理各子节点上的资源和任务。每个MapReduce作业提交给ResourceManager并被接受后，ResourceManager会通知某个NodeManager启动一个ApplicationMaster管理此作业的生命周期。\n\nResourceManager中的模块划分\n--\n\nYarn中的大多数服务都是带状态的service实现，并通过事件驱动机制实现服务的状态转换和服务之间的交互。ResourceManager是yarn的核心组件，与NodeManager、ApplicationMaster、Client都有交互，提供了非常多的功能，下面基于hadoop2.7版本的实现，梳理一下ResourceManager中的重要service组件及其功能。\n\nResourceManager中按功能划分的service模块如下图所示。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150606ResourceManager%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97/1.png)\n\nResourceManager中核心模块主要包括客户端交互模块、NodeManager管理模块、ApplicationMaster管理模块、Application管理模块、安全管理模块、以及资源管理模块（调度、预留）等。\n\n各模块中的服务介绍\n--\n\n**客户端交互模块：**\n\n* AdminService\n\t* 管理员可通过此接口管理集群，如更新节点、更新ACL、更新队列等。内部有个EmbeddedElectorService，如果RM启用了自动HA，则通过这个service做leader election。\n\t\n* ClientRMService\n\t* 负责为客户端提供服务，是ApplicationClientProtocol协议的服务端。负责处理来自客户端的RPC请求，包括提交app、查询app运行状态、终止app等。\n\n* Webapp\n\t* 提供web页面服务，展示集群状态和资源使用情况。\n\n**NodeManager管理模块**\n\n* NMLivelinessMonitor\n\t* 用于监控NM是否存活，若NM在一定时间内（默认10分钟）未上报心跳，则认为其挂了。\n \n* NodesListManager\n\t* 负责维护节点列表，并动态加载白名单（yarn.resourcemanager.nodes.include-path）和黑名单（yarn.resourcemanager.nodes.exlude-path）节点。\n \n* RMNodeLabelsManager\n\t* 负责节点的标签管理。\n\n* ResourceTrackerService\n\t* 负责与NodeManager通信，处理来自NodeManager的请求，包括注册NodeManager和节点心跳两种。接口定义在ResourceTracker中。\n\n**ApplicationMaster管理模块**\n\n* AMLivelinessMonitor：两个实例\n\t* 用于监控ApplicationMaster是否正常，如果在指定时间内（默认10分钟）未收到AM的心跳，则认为其死掉了。\n \n* ApplicationMasterLauncher\n\t* 负责通知某个NodeManager启动或销毁ApplicationMaster。在app请求被接受后，与某个NodeManager通信，告知其为此app启动相应的ApplicationMaster。若app运行结束或被kill，则通知app所在NodeManager销毁ApplicationMaster。其内部也维护了一个阻塞队列，并有一个后台线程异步处理提交进来的启动ApplicationMaster的请求。\n \n* ApplicationMasterService\n\t* 负责与ApplicationMaster通信，是ApplicationMasterProtocol协议的服务端，ApplicationMaster在NodeManager上启动后通过此协议向ResourceManager注册自己，运行过程中向ResourceManager发送心跳，以及app运行结束后告知RM自己所在的container可以被释放了。\n\n**Application管理模块**\n\n* RMAppManager\n\t* ResourceManager接受客户端提交的app后，会通过RMAppManager来触发启动app的事件RMAppEventType.START，具体启动app的工作由RMAppImpl实现。\n\n* ApplicationACLsManager\n\t* 负责app权限控制，包括查看和修改权限。\n\n* ContainerAllocationExpirer\n\t* 用于监听NodeManager上是否正常启动了分配给ApplicationMaster的container，若在指定时间未启动（默认10分钟），ResourceManager会强制回收该container。\n\n* RMApplicationHistoryWriter\n\t* 负责异步持久化Application运行中的相关日志，主要是Container、Application、ApplicationAttempt在启动和结束时的日志信息。\n\n**安全管理模块**\n\n* RMSecretManagerService\n\t* 负责管理各种通信密钥，包括：\n\t\t* RM与NM通信的NMTokenSecretManagerInRM\n\t\t* RM与container通信的RMContainerTokenSecretManager\n\t\t* 客户端与AM通信的ClientToAMTokenSecretManagerInRM\n\t\t* AM与RM通信的AMRMTokenSecretManager\n\t\t* DelegationTokenRenewer\n\t\t* 启用了安全时，负责定时更新认证token。\n\n**资源管理模块**\n\n* ResourceScheduler\n\t* 资源调度器，可通过yarn.resourcemanager.scheduler.class指定，ResourceManager默认使用的是org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler。\n\n* SchedulerEventDispatcher\n\t* 用于处理SchedulerEventType类型的事件，其内部维护了一个存储SchedulerEvent的阻塞队列，并由一个后台线程从队列中取出资源请求事件，再调用ResourceScheduler进行处理。\n\n* ReservationSystem\n\t* 资源预留系统，对应的实现有CapacityReservationSystem和FairReservationSystem。\n\n此外，SystemMetricsPublisher负责发布RM的系统统计信息。AsyncDispatcher是中央事件处理分发器，ResourceManager启动时，通过它绑定了几种类型的事件的处理器，包括SchedulerEventType、RMAppEventType、ApplicationAttempt、RMAppAttemptEventType、RMNodeEventType、RMAppManagerEventType、AMLaunchEventType等。\n\n上述各service在ResourceManager中的启动顺序为：\n\n1. AsyncDispatcher\n\n2. AdminService\n\n3. RMActiveServices：是个CompositeService（即service列表，ResourceManager本身就是一个CompositeService），用于管理ResourceManager中的“活动”服务（必须在active的ResourceManager上启动的服务，启用HA时，备份ResourceManager上不启动这些服务），包括以下（按启动顺序）：\n\n\t* RMSecretManagerService\n\n\t* ContainerAllocationExpirer\n\t \n\t* AMLivelinessMonitor\n\t \n\t* RMNodeLabelsManager\n\t \n\t* RMApplicationHistoryWriter\n\t \n\t* SystemMetricsPublisher\n\t \n\t* NodesListManager\n\t \n\t* ResourceScheduler\n\t \n\t* SchedulerEventDispatcher\n\t \n\t* NMLivelinessMonitor\n\t \n\t* ResourceTrackerService\n\t \n\t* ApplicationMasterService\n\t \n\t* ClientRMService\n\t \n\t* ApplicationMasterLauncher\n\t \n\t* DelegationTokenRenewer","source":"_posts/hadoop-yarn中ResourceManager的服务模块.md","raw":"---\ntitle: hadoop-yarn中ResourceManager的服务模块\ndate: 2015-06-06 13:10:10\ntags:\n- hadoop\n- yarn\ncategories: \n- Hadoop\n---\n\nYarn简述\n--\n\nHadoop2.0引入了yarn（Yet Another Resource Negotiator）资源管理框架。1.0中的MapReduce计算框架变为运行在yarn上的一种application。\n\nYarn依然采用了master/slave结构，master是ResourceManager，负责整个集群的资源管理和调度，并且支持HA，slave是NodeManager，负责管理各子节点上的资源和任务。每个MapReduce作业提交给ResourceManager并被接受后，ResourceManager会通知某个NodeManager启动一个ApplicationMaster管理此作业的生命周期。\n\nResourceManager中的模块划分\n--\n\nYarn中的大多数服务都是带状态的service实现，并通过事件驱动机制实现服务的状态转换和服务之间的交互。ResourceManager是yarn的核心组件，与NodeManager、ApplicationMaster、Client都有交互，提供了非常多的功能，下面基于hadoop2.7版本的实现，梳理一下ResourceManager中的重要service组件及其功能。\n\nResourceManager中按功能划分的service模块如下图所示。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150606ResourceManager%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97/1.png)\n\nResourceManager中核心模块主要包括客户端交互模块、NodeManager管理模块、ApplicationMaster管理模块、Application管理模块、安全管理模块、以及资源管理模块（调度、预留）等。\n\n各模块中的服务介绍\n--\n\n**客户端交互模块：**\n\n* AdminService\n\t* 管理员可通过此接口管理集群，如更新节点、更新ACL、更新队列等。内部有个EmbeddedElectorService，如果RM启用了自动HA，则通过这个service做leader election。\n\t\n* ClientRMService\n\t* 负责为客户端提供服务，是ApplicationClientProtocol协议的服务端。负责处理来自客户端的RPC请求，包括提交app、查询app运行状态、终止app等。\n\n* Webapp\n\t* 提供web页面服务，展示集群状态和资源使用情况。\n\n**NodeManager管理模块**\n\n* NMLivelinessMonitor\n\t* 用于监控NM是否存活，若NM在一定时间内（默认10分钟）未上报心跳，则认为其挂了。\n \n* NodesListManager\n\t* 负责维护节点列表，并动态加载白名单（yarn.resourcemanager.nodes.include-path）和黑名单（yarn.resourcemanager.nodes.exlude-path）节点。\n \n* RMNodeLabelsManager\n\t* 负责节点的标签管理。\n\n* ResourceTrackerService\n\t* 负责与NodeManager通信，处理来自NodeManager的请求，包括注册NodeManager和节点心跳两种。接口定义在ResourceTracker中。\n\n**ApplicationMaster管理模块**\n\n* AMLivelinessMonitor：两个实例\n\t* 用于监控ApplicationMaster是否正常，如果在指定时间内（默认10分钟）未收到AM的心跳，则认为其死掉了。\n \n* ApplicationMasterLauncher\n\t* 负责通知某个NodeManager启动或销毁ApplicationMaster。在app请求被接受后，与某个NodeManager通信，告知其为此app启动相应的ApplicationMaster。若app运行结束或被kill，则通知app所在NodeManager销毁ApplicationMaster。其内部也维护了一个阻塞队列，并有一个后台线程异步处理提交进来的启动ApplicationMaster的请求。\n \n* ApplicationMasterService\n\t* 负责与ApplicationMaster通信，是ApplicationMasterProtocol协议的服务端，ApplicationMaster在NodeManager上启动后通过此协议向ResourceManager注册自己，运行过程中向ResourceManager发送心跳，以及app运行结束后告知RM自己所在的container可以被释放了。\n\n**Application管理模块**\n\n* RMAppManager\n\t* ResourceManager接受客户端提交的app后，会通过RMAppManager来触发启动app的事件RMAppEventType.START，具体启动app的工作由RMAppImpl实现。\n\n* ApplicationACLsManager\n\t* 负责app权限控制，包括查看和修改权限。\n\n* ContainerAllocationExpirer\n\t* 用于监听NodeManager上是否正常启动了分配给ApplicationMaster的container，若在指定时间未启动（默认10分钟），ResourceManager会强制回收该container。\n\n* RMApplicationHistoryWriter\n\t* 负责异步持久化Application运行中的相关日志，主要是Container、Application、ApplicationAttempt在启动和结束时的日志信息。\n\n**安全管理模块**\n\n* RMSecretManagerService\n\t* 负责管理各种通信密钥，包括：\n\t\t* RM与NM通信的NMTokenSecretManagerInRM\n\t\t* RM与container通信的RMContainerTokenSecretManager\n\t\t* 客户端与AM通信的ClientToAMTokenSecretManagerInRM\n\t\t* AM与RM通信的AMRMTokenSecretManager\n\t\t* DelegationTokenRenewer\n\t\t* 启用了安全时，负责定时更新认证token。\n\n**资源管理模块**\n\n* ResourceScheduler\n\t* 资源调度器，可通过yarn.resourcemanager.scheduler.class指定，ResourceManager默认使用的是org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler。\n\n* SchedulerEventDispatcher\n\t* 用于处理SchedulerEventType类型的事件，其内部维护了一个存储SchedulerEvent的阻塞队列，并由一个后台线程从队列中取出资源请求事件，再调用ResourceScheduler进行处理。\n\n* ReservationSystem\n\t* 资源预留系统，对应的实现有CapacityReservationSystem和FairReservationSystem。\n\n此外，SystemMetricsPublisher负责发布RM的系统统计信息。AsyncDispatcher是中央事件处理分发器，ResourceManager启动时，通过它绑定了几种类型的事件的处理器，包括SchedulerEventType、RMAppEventType、ApplicationAttempt、RMAppAttemptEventType、RMNodeEventType、RMAppManagerEventType、AMLaunchEventType等。\n\n上述各service在ResourceManager中的启动顺序为：\n\n1. AsyncDispatcher\n\n2. AdminService\n\n3. RMActiveServices：是个CompositeService（即service列表，ResourceManager本身就是一个CompositeService），用于管理ResourceManager中的“活动”服务（必须在active的ResourceManager上启动的服务，启用HA时，备份ResourceManager上不启动这些服务），包括以下（按启动顺序）：\n\n\t* RMSecretManagerService\n\n\t* ContainerAllocationExpirer\n\t \n\t* AMLivelinessMonitor\n\t \n\t* RMNodeLabelsManager\n\t \n\t* RMApplicationHistoryWriter\n\t \n\t* SystemMetricsPublisher\n\t \n\t* NodesListManager\n\t \n\t* ResourceScheduler\n\t \n\t* SchedulerEventDispatcher\n\t \n\t* NMLivelinessMonitor\n\t \n\t* ResourceTrackerService\n\t \n\t* ApplicationMasterService\n\t \n\t* ClientRMService\n\t \n\t* ApplicationMasterLauncher\n\t \n\t* DelegationTokenRenewer","slug":"hadoop-yarn中ResourceManager的服务模块","published":1,"updated":"2016-07-09T13:07:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxef0002d9681ed9xxpv","content":"<h2 id=\"Yarn简述\"><a href=\"#Yarn简述\" class=\"headerlink\" title=\"Yarn简述\"></a>Yarn简述</h2><p>Hadoop2.0引入了yarn（Yet Another Resource Negotiator）资源管理框架。1.0中的MapReduce计算框架变为运行在yarn上的一种application。</p>\n<p>Yarn依然采用了master/slave结构，master是ResourceManager，负责整个集群的资源管理和调度，并且支持HA，slave是NodeManager，负责管理各子节点上的资源和任务。每个MapReduce作业提交给ResourceManager并被接受后，ResourceManager会通知某个NodeManager启动一个ApplicationMaster管理此作业的生命周期。</p>\n<h2 id=\"ResourceManager中的模块划分\"><a href=\"#ResourceManager中的模块划分\" class=\"headerlink\" title=\"ResourceManager中的模块划分\"></a>ResourceManager中的模块划分</h2><p>Yarn中的大多数服务都是带状态的service实现，并通过事件驱动机制实现服务的状态转换和服务之间的交互。ResourceManager是yarn的核心组件，与NodeManager、ApplicationMaster、Client都有交互，提供了非常多的功能，下面基于hadoop2.7版本的实现，梳理一下ResourceManager中的重要service组件及其功能。</p>\n<p>ResourceManager中按功能划分的service模块如下图所示。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150606ResourceManager%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97/1.png\" alt=\"\"></p>\n<p>ResourceManager中核心模块主要包括客户端交互模块、NodeManager管理模块、ApplicationMaster管理模块、Application管理模块、安全管理模块、以及资源管理模块（调度、预留）等。</p>\n<h2 id=\"各模块中的服务介绍\"><a href=\"#各模块中的服务介绍\" class=\"headerlink\" title=\"各模块中的服务介绍\"></a>各模块中的服务介绍</h2><p><strong>客户端交互模块：</strong></p>\n<ul>\n<li><p>AdminService</p>\n<ul>\n<li>管理员可通过此接口管理集群，如更新节点、更新ACL、更新队列等。内部有个EmbeddedElectorService，如果RM启用了自动HA，则通过这个service做leader election。</li>\n</ul>\n</li>\n<li><p>ClientRMService</p>\n<ul>\n<li>负责为客户端提供服务，是ApplicationClientProtocol协议的服务端。负责处理来自客户端的RPC请求，包括提交app、查询app运行状态、终止app等。</li>\n</ul>\n</li>\n<li><p>Webapp</p>\n<ul>\n<li>提供web页面服务，展示集群状态和资源使用情况。</li>\n</ul>\n</li>\n</ul>\n<p><strong>NodeManager管理模块</strong></p>\n<ul>\n<li><p>NMLivelinessMonitor</p>\n<ul>\n<li>用于监控NM是否存活，若NM在一定时间内（默认10分钟）未上报心跳，则认为其挂了。</li>\n</ul>\n</li>\n<li><p>NodesListManager</p>\n<ul>\n<li>负责维护节点列表，并动态加载白名单（yarn.resourcemanager.nodes.include-path）和黑名单（yarn.resourcemanager.nodes.exlude-path）节点。</li>\n</ul>\n</li>\n<li><p>RMNodeLabelsManager</p>\n<ul>\n<li>负责节点的标签管理。</li>\n</ul>\n</li>\n<li><p>ResourceTrackerService</p>\n<ul>\n<li>负责与NodeManager通信，处理来自NodeManager的请求，包括注册NodeManager和节点心跳两种。接口定义在ResourceTracker中。</li>\n</ul>\n</li>\n</ul>\n<p><strong>ApplicationMaster管理模块</strong></p>\n<ul>\n<li><p>AMLivelinessMonitor：两个实例</p>\n<ul>\n<li>用于监控ApplicationMaster是否正常，如果在指定时间内（默认10分钟）未收到AM的心跳，则认为其死掉了。</li>\n</ul>\n</li>\n<li><p>ApplicationMasterLauncher</p>\n<ul>\n<li>负责通知某个NodeManager启动或销毁ApplicationMaster。在app请求被接受后，与某个NodeManager通信，告知其为此app启动相应的ApplicationMaster。若app运行结束或被kill，则通知app所在NodeManager销毁ApplicationMaster。其内部也维护了一个阻塞队列，并有一个后台线程异步处理提交进来的启动ApplicationMaster的请求。</li>\n</ul>\n</li>\n<li><p>ApplicationMasterService</p>\n<ul>\n<li>负责与ApplicationMaster通信，是ApplicationMasterProtocol协议的服务端，ApplicationMaster在NodeManager上启动后通过此协议向ResourceManager注册自己，运行过程中向ResourceManager发送心跳，以及app运行结束后告知RM自己所在的container可以被释放了。</li>\n</ul>\n</li>\n</ul>\n<p><strong>Application管理模块</strong></p>\n<ul>\n<li><p>RMAppManager</p>\n<ul>\n<li>ResourceManager接受客户端提交的app后，会通过RMAppManager来触发启动app的事件RMAppEventType.START，具体启动app的工作由RMAppImpl实现。</li>\n</ul>\n</li>\n<li><p>ApplicationACLsManager</p>\n<ul>\n<li>负责app权限控制，包括查看和修改权限。</li>\n</ul>\n</li>\n<li><p>ContainerAllocationExpirer</p>\n<ul>\n<li>用于监听NodeManager上是否正常启动了分配给ApplicationMaster的container，若在指定时间未启动（默认10分钟），ResourceManager会强制回收该container。</li>\n</ul>\n</li>\n<li><p>RMApplicationHistoryWriter</p>\n<ul>\n<li>负责异步持久化Application运行中的相关日志，主要是Container、Application、ApplicationAttempt在启动和结束时的日志信息。</li>\n</ul>\n</li>\n</ul>\n<p><strong>安全管理模块</strong></p>\n<ul>\n<li>RMSecretManagerService<ul>\n<li>负责管理各种通信密钥，包括：<ul>\n<li>RM与NM通信的NMTokenSecretManagerInRM</li>\n<li>RM与container通信的RMContainerTokenSecretManager</li>\n<li>客户端与AM通信的ClientToAMTokenSecretManagerInRM</li>\n<li>AM与RM通信的AMRMTokenSecretManager</li>\n<li>DelegationTokenRenewer</li>\n<li>启用了安全时，负责定时更新认证token。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>资源管理模块</strong></p>\n<ul>\n<li><p>ResourceScheduler</p>\n<ul>\n<li>资源调度器，可通过yarn.resourcemanager.scheduler.class指定，ResourceManager默认使用的是org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler。</li>\n</ul>\n</li>\n<li><p>SchedulerEventDispatcher</p>\n<ul>\n<li>用于处理SchedulerEventType类型的事件，其内部维护了一个存储SchedulerEvent的阻塞队列，并由一个后台线程从队列中取出资源请求事件，再调用ResourceScheduler进行处理。</li>\n</ul>\n</li>\n<li><p>ReservationSystem</p>\n<ul>\n<li>资源预留系统，对应的实现有CapacityReservationSystem和FairReservationSystem。</li>\n</ul>\n</li>\n</ul>\n<p>此外，SystemMetricsPublisher负责发布RM的系统统计信息。AsyncDispatcher是中央事件处理分发器，ResourceManager启动时，通过它绑定了几种类型的事件的处理器，包括SchedulerEventType、RMAppEventType、ApplicationAttempt、RMAppAttemptEventType、RMNodeEventType、RMAppManagerEventType、AMLaunchEventType等。</p>\n<p>上述各service在ResourceManager中的启动顺序为：</p>\n<ol>\n<li><p>AsyncDispatcher</p>\n</li>\n<li><p>AdminService</p>\n</li>\n<li><p>RMActiveServices：是个CompositeService（即service列表，ResourceManager本身就是一个CompositeService），用于管理ResourceManager中的“活动”服务（必须在active的ResourceManager上启动的服务，启用HA时，备份ResourceManager上不启动这些服务），包括以下（按启动顺序）：</p>\n<ul>\n<li><p>RMSecretManagerService</p>\n</li>\n<li><p>ContainerAllocationExpirer</p>\n</li>\n<li><p>AMLivelinessMonitor</p>\n</li>\n<li><p>RMNodeLabelsManager</p>\n</li>\n<li><p>RMApplicationHistoryWriter</p>\n</li>\n<li><p>SystemMetricsPublisher</p>\n</li>\n<li><p>NodesListManager</p>\n</li>\n<li><p>ResourceScheduler</p>\n</li>\n<li><p>SchedulerEventDispatcher</p>\n</li>\n<li><p>NMLivelinessMonitor</p>\n</li>\n<li><p>ResourceTrackerService</p>\n</li>\n<li><p>ApplicationMasterService</p>\n</li>\n<li><p>ClientRMService</p>\n</li>\n<li><p>ApplicationMasterLauncher</p>\n</li>\n<li><p>DelegationTokenRenewer</p>\n</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"Yarn简述\"><a href=\"#Yarn简述\" class=\"headerlink\" title=\"Yarn简述\"></a>Yarn简述</h2><p>Hadoop2.0引入了yarn（Yet Another Resource Negotiator）资源管理框架。1.0中的MapReduce计算框架变为运行在yarn上的一种application。</p>\n<p>Yarn依然采用了master/slave结构，master是ResourceManager，负责整个集群的资源管理和调度，并且支持HA，slave是NodeManager，负责管理各子节点上的资源和任务。每个MapReduce作业提交给ResourceManager并被接受后，ResourceManager会通知某个NodeManager启动一个ApplicationMaster管理此作业的生命周期。</p>\n<h2 id=\"ResourceManager中的模块划分\"><a href=\"#ResourceManager中的模块划分\" class=\"headerlink\" title=\"ResourceManager中的模块划分\"></a>ResourceManager中的模块划分</h2><p>Yarn中的大多数服务都是带状态的service实现，并通过事件驱动机制实现服务的状态转换和服务之间的交互。ResourceManager是yarn的核心组件，与NodeManager、ApplicationMaster、Client都有交互，提供了非常多的功能，下面基于hadoop2.7版本的实现，梳理一下ResourceManager中的重要service组件及其功能。</p>\n<p>ResourceManager中按功能划分的service模块如下图所示。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150606ResourceManager%E7%9A%84%E6%9C%8D%E5%8A%A1%E6%A8%A1%E5%9D%97/1.png\" alt=\"\"></p>\n<p>ResourceManager中核心模块主要包括客户端交互模块、NodeManager管理模块、ApplicationMaster管理模块、Application管理模块、安全管理模块、以及资源管理模块（调度、预留）等。</p>\n<h2 id=\"各模块中的服务介绍\"><a href=\"#各模块中的服务介绍\" class=\"headerlink\" title=\"各模块中的服务介绍\"></a>各模块中的服务介绍</h2><p><strong>客户端交互模块：</strong></p>\n<ul>\n<li><p>AdminService</p>\n<ul>\n<li>管理员可通过此接口管理集群，如更新节点、更新ACL、更新队列等。内部有个EmbeddedElectorService，如果RM启用了自动HA，则通过这个service做leader election。</li>\n</ul>\n</li>\n<li><p>ClientRMService</p>\n<ul>\n<li>负责为客户端提供服务，是ApplicationClientProtocol协议的服务端。负责处理来自客户端的RPC请求，包括提交app、查询app运行状态、终止app等。</li>\n</ul>\n</li>\n<li><p>Webapp</p>\n<ul>\n<li>提供web页面服务，展示集群状态和资源使用情况。</li>\n</ul>\n</li>\n</ul>\n<p><strong>NodeManager管理模块</strong></p>\n<ul>\n<li><p>NMLivelinessMonitor</p>\n<ul>\n<li>用于监控NM是否存活，若NM在一定时间内（默认10分钟）未上报心跳，则认为其挂了。</li>\n</ul>\n</li>\n<li><p>NodesListManager</p>\n<ul>\n<li>负责维护节点列表，并动态加载白名单（yarn.resourcemanager.nodes.include-path）和黑名单（yarn.resourcemanager.nodes.exlude-path）节点。</li>\n</ul>\n</li>\n<li><p>RMNodeLabelsManager</p>\n<ul>\n<li>负责节点的标签管理。</li>\n</ul>\n</li>\n<li><p>ResourceTrackerService</p>\n<ul>\n<li>负责与NodeManager通信，处理来自NodeManager的请求，包括注册NodeManager和节点心跳两种。接口定义在ResourceTracker中。</li>\n</ul>\n</li>\n</ul>\n<p><strong>ApplicationMaster管理模块</strong></p>\n<ul>\n<li><p>AMLivelinessMonitor：两个实例</p>\n<ul>\n<li>用于监控ApplicationMaster是否正常，如果在指定时间内（默认10分钟）未收到AM的心跳，则认为其死掉了。</li>\n</ul>\n</li>\n<li><p>ApplicationMasterLauncher</p>\n<ul>\n<li>负责通知某个NodeManager启动或销毁ApplicationMaster。在app请求被接受后，与某个NodeManager通信，告知其为此app启动相应的ApplicationMaster。若app运行结束或被kill，则通知app所在NodeManager销毁ApplicationMaster。其内部也维护了一个阻塞队列，并有一个后台线程异步处理提交进来的启动ApplicationMaster的请求。</li>\n</ul>\n</li>\n<li><p>ApplicationMasterService</p>\n<ul>\n<li>负责与ApplicationMaster通信，是ApplicationMasterProtocol协议的服务端，ApplicationMaster在NodeManager上启动后通过此协议向ResourceManager注册自己，运行过程中向ResourceManager发送心跳，以及app运行结束后告知RM自己所在的container可以被释放了。</li>\n</ul>\n</li>\n</ul>\n<p><strong>Application管理模块</strong></p>\n<ul>\n<li><p>RMAppManager</p>\n<ul>\n<li>ResourceManager接受客户端提交的app后，会通过RMAppManager来触发启动app的事件RMAppEventType.START，具体启动app的工作由RMAppImpl实现。</li>\n</ul>\n</li>\n<li><p>ApplicationACLsManager</p>\n<ul>\n<li>负责app权限控制，包括查看和修改权限。</li>\n</ul>\n</li>\n<li><p>ContainerAllocationExpirer</p>\n<ul>\n<li>用于监听NodeManager上是否正常启动了分配给ApplicationMaster的container，若在指定时间未启动（默认10分钟），ResourceManager会强制回收该container。</li>\n</ul>\n</li>\n<li><p>RMApplicationHistoryWriter</p>\n<ul>\n<li>负责异步持久化Application运行中的相关日志，主要是Container、Application、ApplicationAttempt在启动和结束时的日志信息。</li>\n</ul>\n</li>\n</ul>\n<p><strong>安全管理模块</strong></p>\n<ul>\n<li>RMSecretManagerService<ul>\n<li>负责管理各种通信密钥，包括：<ul>\n<li>RM与NM通信的NMTokenSecretManagerInRM</li>\n<li>RM与container通信的RMContainerTokenSecretManager</li>\n<li>客户端与AM通信的ClientToAMTokenSecretManagerInRM</li>\n<li>AM与RM通信的AMRMTokenSecretManager</li>\n<li>DelegationTokenRenewer</li>\n<li>启用了安全时，负责定时更新认证token。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><strong>资源管理模块</strong></p>\n<ul>\n<li><p>ResourceScheduler</p>\n<ul>\n<li>资源调度器，可通过yarn.resourcemanager.scheduler.class指定，ResourceManager默认使用的是org.apache.hadoop.yarn.server.resourcemanager.scheduler.capacity.CapacityScheduler。</li>\n</ul>\n</li>\n<li><p>SchedulerEventDispatcher</p>\n<ul>\n<li>用于处理SchedulerEventType类型的事件，其内部维护了一个存储SchedulerEvent的阻塞队列，并由一个后台线程从队列中取出资源请求事件，再调用ResourceScheduler进行处理。</li>\n</ul>\n</li>\n<li><p>ReservationSystem</p>\n<ul>\n<li>资源预留系统，对应的实现有CapacityReservationSystem和FairReservationSystem。</li>\n</ul>\n</li>\n</ul>\n<p>此外，SystemMetricsPublisher负责发布RM的系统统计信息。AsyncDispatcher是中央事件处理分发器，ResourceManager启动时，通过它绑定了几种类型的事件的处理器，包括SchedulerEventType、RMAppEventType、ApplicationAttempt、RMAppAttemptEventType、RMNodeEventType、RMAppManagerEventType、AMLaunchEventType等。</p>\n<p>上述各service在ResourceManager中的启动顺序为：</p>\n<ol>\n<li><p>AsyncDispatcher</p>\n</li>\n<li><p>AdminService</p>\n</li>\n<li><p>RMActiveServices：是个CompositeService（即service列表，ResourceManager本身就是一个CompositeService），用于管理ResourceManager中的“活动”服务（必须在active的ResourceManager上启动的服务，启用HA时，备份ResourceManager上不启动这些服务），包括以下（按启动顺序）：</p>\n<ul>\n<li><p>RMSecretManagerService</p>\n</li>\n<li><p>ContainerAllocationExpirer</p>\n</li>\n<li><p>AMLivelinessMonitor</p>\n</li>\n<li><p>RMNodeLabelsManager</p>\n</li>\n<li><p>RMApplicationHistoryWriter</p>\n</li>\n<li><p>SystemMetricsPublisher</p>\n</li>\n<li><p>NodesListManager</p>\n</li>\n<li><p>ResourceScheduler</p>\n</li>\n<li><p>SchedulerEventDispatcher</p>\n</li>\n<li><p>NMLivelinessMonitor</p>\n</li>\n<li><p>ResourceTrackerService</p>\n</li>\n<li><p>ApplicationMasterService</p>\n</li>\n<li><p>ClientRMService</p>\n</li>\n<li><p>ApplicationMasterLauncher</p>\n</li>\n<li><p>DelegationTokenRenewer</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Spark on yarn的内存分配问题","date":"2015-08-11T05:23:13.000Z","_content":"\n问题描述\n--\n\n在测试spark on yarn时，发现一些内存分配上的问题，具体如下。\n\n在$SPARK_HOME/conf/spark-env.sh中配置如下参数：\n\n> SPARK_EXECUTOR_INSTANCES=4            *在yarn集群中启动的executor进程数*\n> \n> SPARK_EXECUTOR_MEMORY=2G              *为每个executor进程分配的内存大小*\n> \n> SPARK_DRIVER_MEMORY=1G                *为spark-driver进程分配的内存大小*\n\n执行$SPARK_HOME/bin/spark-sql –master yarn，按yarn-client模式启动spark-sql交互命令行（即driver程序运行在本地，而非yarn的container中），日志显示的关于AppMaster和Executor的内存信息如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-1.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-2.png)\n\n日志显示，AppMaster的内存是896MB，其中包含了384MB的memoryOverhead；启动了5个executor，第一个的可用内存是530.3MB，其余每个Executor的可用内存是1060.3MB。\n\n到yarnUI看下资源使用情况，共启动了5个container，占用内存13G，其中一台NodeManager启动了2个container，占用内存4G（1个AppMaster占1G、另一个占3G），另外3台各启了1个container，每个占用3G内存。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-3.png)\n\n再到sparkUI看下executors的情况，这里有5个executor，其中driver是运行在执行spark-sql命令的本地服务器上，另外4个是运行在yarn集群中。Driver的可用storage memory为530.3MB，另外4个都是1060.3MB（与日志信息一致）。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-4.png)\n\n那么问题来了：\n\n1. Yarn为container分配的最小内存由yarn.scheduler.minimum-allocation-mb参数决定，默认是1G，从yarnUI中看确实如此，可为何spark的日志里显示AppMaster的实际内存是896-384=512MB呢？384MB是怎么算出来的？\n\n2. spark配置文件里指定了每个executor的内存为2G，为何日志和sparkUI上显示的是1060.3MB？\n\n3. driver的内存配置为1G，为何sparkUI里显示的是530.3MB呢？\n\n4. 为何yarn中每个container分配的内存是3G，而不是executor需要的2G呢？\n\n问题解析\n--\n进过一番调研，发现这里有些概念容易混淆，整理如下，序号对应上面的问题：\n<!--more-->\n(1) spark的yarn-client向ResourceManager申请提交作业/启动AppMaster时，会判断是否是集群模式，如果是集群模式，则AppMaster的内存大小与driver内存大小一致，否则由spark.yarn.am.memory决定，这个参数的默认值是512MB。我们使用的是yarn-client模式，所以实际内存是512MB。\n\n<font color='red'>384MB是spark-client为appMaster额外申请的内存</font>，计算方法如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-5.png)\n\n即，默认从参数读取（集群模式从spark.yarn.driver.memoryOverhead参数读，否则从spark.yarn.am.memoryOverhead参数读），若没配此参数，则从AppMaster的内存*一定系数和默认最小overhead中取较大值。\n\n在spark-1.4.1版本中，MEMORY_OVERHEAD_FACTOR的默认值为0.10（之前是0.07），MEMORY_OVERHEAD_MIN默认为384，我们没有指定spark.yarn.driver.memoryOverhead和spark.yarn.am.memoryOverhead，而amMemory=512M（由spark.yarn.am.memory决定），因此memoryOverhead为max(512*0.10, 384)=384MB。\n\nExecutor的memoryOverhead计算方法与此一样，只是不区分是否集群模式，都默认由spark.yarn.executor.memoryOverhead配置。\n\n(2) <font color='red'>日志和sparkUI上显示的是executor内部用于缓存计算结果的内存空间，并不是executor所拥有的全部内存</font>。这部分内存是由以下公式计算：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-6.png)\n\nRuntime.getRuntime.maxMemory按2048MB算，storage memory大小为1105.92MB，sparkUI显示的略小于此值，是正常的。\n\n(3) 与上述第2点一样，storage memory的大小略小于1024*0.9*0.6=552.96MB\n\n(4) 前面提到spark会为container额外申请一部分内存（memoryOverhead），因此，实际为container提交申请的内存大小是2048 + max(2048*0.10, 384) = 2432MB，而<font color='red'>yarn在做资源分配时会做资源规整化，即应用程序申请的资源量一定是最小可申请资源量的整数倍（向上取整）</font>，最小可申请内存量由yarn.scheduler.minimum-allocation-mb指定，因此，会为container分配3G内存。\n\n验证\n--\n\n为了验证上述规则，继续修改配置参数：\n\n> SPARK_EXECUTOR_INSTANCES=4          *在yarn集群中启动的executor进程数*\n> \n> SPARK_EXECUTOR_MEMORY=4G            *为每个executor进程分配的内存大小*\n> \n> SPARK_DRIVER_MEMORY=3G              *为spark-driver进程分配的内存大小*\n\n并在启动spark-sql时指定spark.yarn.am.memory参数：\n\n**bin/spark-sql –master yarn –conf spark.yarn.am.memory=1024m**\n\n再看日志信息：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-7.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-8.png)\n\nyarnUI状态：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-9.png)\n\nsparkUI的executors信息：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-10.png)\n\n可见，AppMaster的实际内存为1024M（1408-384），而其在yarn中的container内存大小为2G（1408大于1G，yarn按资源规整化原则为其分配2G）。\n\n同理，driver的storage memory空间为3G\\*0.9\\*0.6=1.62G，executor的storage memory空间为4G\\*0.9\\*0.6=2.16G，executor所在container占用5G内存（4096+max(4096*0.10,384)= 4505.6，大于4G， yarn按资源规整化原则为其分配5G）。\n\nYarn集群的内存总占用空间为2+5*4=22G。","source":"_posts/Spark-on-yarn的内存分配问题.md","raw":"---\ntitle: Spark on yarn的内存分配问题\ndate: 2015-08-11 13:23:13\ntags:\n- spark\n- yarn\n- 内存分配\ncategories:\n- Spark\n---\n\n问题描述\n--\n\n在测试spark on yarn时，发现一些内存分配上的问题，具体如下。\n\n在$SPARK_HOME/conf/spark-env.sh中配置如下参数：\n\n> SPARK_EXECUTOR_INSTANCES=4            *在yarn集群中启动的executor进程数*\n> \n> SPARK_EXECUTOR_MEMORY=2G              *为每个executor进程分配的内存大小*\n> \n> SPARK_DRIVER_MEMORY=1G                *为spark-driver进程分配的内存大小*\n\n执行$SPARK_HOME/bin/spark-sql –master yarn，按yarn-client模式启动spark-sql交互命令行（即driver程序运行在本地，而非yarn的container中），日志显示的关于AppMaster和Executor的内存信息如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-1.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-2.png)\n\n日志显示，AppMaster的内存是896MB，其中包含了384MB的memoryOverhead；启动了5个executor，第一个的可用内存是530.3MB，其余每个Executor的可用内存是1060.3MB。\n\n到yarnUI看下资源使用情况，共启动了5个container，占用内存13G，其中一台NodeManager启动了2个container，占用内存4G（1个AppMaster占1G、另一个占3G），另外3台各启了1个container，每个占用3G内存。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-3.png)\n\n再到sparkUI看下executors的情况，这里有5个executor，其中driver是运行在执行spark-sql命令的本地服务器上，另外4个是运行在yarn集群中。Driver的可用storage memory为530.3MB，另外4个都是1060.3MB（与日志信息一致）。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-4.png)\n\n那么问题来了：\n\n1. Yarn为container分配的最小内存由yarn.scheduler.minimum-allocation-mb参数决定，默认是1G，从yarnUI中看确实如此，可为何spark的日志里显示AppMaster的实际内存是896-384=512MB呢？384MB是怎么算出来的？\n\n2. spark配置文件里指定了每个executor的内存为2G，为何日志和sparkUI上显示的是1060.3MB？\n\n3. driver的内存配置为1G，为何sparkUI里显示的是530.3MB呢？\n\n4. 为何yarn中每个container分配的内存是3G，而不是executor需要的2G呢？\n\n问题解析\n--\n进过一番调研，发现这里有些概念容易混淆，整理如下，序号对应上面的问题：\n<!--more-->\n(1) spark的yarn-client向ResourceManager申请提交作业/启动AppMaster时，会判断是否是集群模式，如果是集群模式，则AppMaster的内存大小与driver内存大小一致，否则由spark.yarn.am.memory决定，这个参数的默认值是512MB。我们使用的是yarn-client模式，所以实际内存是512MB。\n\n<font color='red'>384MB是spark-client为appMaster额外申请的内存</font>，计算方法如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-5.png)\n\n即，默认从参数读取（集群模式从spark.yarn.driver.memoryOverhead参数读，否则从spark.yarn.am.memoryOverhead参数读），若没配此参数，则从AppMaster的内存*一定系数和默认最小overhead中取较大值。\n\n在spark-1.4.1版本中，MEMORY_OVERHEAD_FACTOR的默认值为0.10（之前是0.07），MEMORY_OVERHEAD_MIN默认为384，我们没有指定spark.yarn.driver.memoryOverhead和spark.yarn.am.memoryOverhead，而amMemory=512M（由spark.yarn.am.memory决定），因此memoryOverhead为max(512*0.10, 384)=384MB。\n\nExecutor的memoryOverhead计算方法与此一样，只是不区分是否集群模式，都默认由spark.yarn.executor.memoryOverhead配置。\n\n(2) <font color='red'>日志和sparkUI上显示的是executor内部用于缓存计算结果的内存空间，并不是executor所拥有的全部内存</font>。这部分内存是由以下公式计算：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-6.png)\n\nRuntime.getRuntime.maxMemory按2048MB算，storage memory大小为1105.92MB，sparkUI显示的略小于此值，是正常的。\n\n(3) 与上述第2点一样，storage memory的大小略小于1024*0.9*0.6=552.96MB\n\n(4) 前面提到spark会为container额外申请一部分内存（memoryOverhead），因此，实际为container提交申请的内存大小是2048 + max(2048*0.10, 384) = 2432MB，而<font color='red'>yarn在做资源分配时会做资源规整化，即应用程序申请的资源量一定是最小可申请资源量的整数倍（向上取整）</font>，最小可申请内存量由yarn.scheduler.minimum-allocation-mb指定，因此，会为container分配3G内存。\n\n验证\n--\n\n为了验证上述规则，继续修改配置参数：\n\n> SPARK_EXECUTOR_INSTANCES=4          *在yarn集群中启动的executor进程数*\n> \n> SPARK_EXECUTOR_MEMORY=4G            *为每个executor进程分配的内存大小*\n> \n> SPARK_DRIVER_MEMORY=3G              *为spark-driver进程分配的内存大小*\n\n并在启动spark-sql时指定spark.yarn.am.memory参数：\n\n**bin/spark-sql –master yarn –conf spark.yarn.am.memory=1024m**\n\n再看日志信息：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-7.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-8.png)\n\nyarnUI状态：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-9.png)\n\nsparkUI的executors信息：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-10.png)\n\n可见，AppMaster的实际内存为1024M（1408-384），而其在yarn中的container内存大小为2G（1408大于1G，yarn按资源规整化原则为其分配2G）。\n\n同理，driver的storage memory空间为3G\\*0.9\\*0.6=1.62G，executor的storage memory空间为4G\\*0.9\\*0.6=2.16G，executor所在container占用5G内存（4096+max(4096*0.10,384)= 4505.6，大于4G， yarn按资源规整化原则为其分配5G）。\n\nYarn集群的内存总占用空间为2+5*4=22G。","slug":"Spark-on-yarn的内存分配问题","published":1,"updated":"2017-01-23T03:15:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxep0004d968ueorcz8k","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在测试spark on yarn时，发现一些内存分配上的问题，具体如下。</p>\n<p>在$SPARK_HOME/conf/spark-env.sh中配置如下参数：</p>\n<blockquote>\n<p>SPARK_EXECUTOR_INSTANCES=4            <em>在yarn集群中启动的executor进程数</em></p>\n<p>SPARK_EXECUTOR_MEMORY=2G              <em>为每个executor进程分配的内存大小</em></p>\n<p>SPARK_DRIVER_MEMORY=1G                <em>为spark-driver进程分配的内存大小</em></p>\n</blockquote>\n<p>执行$SPARK_HOME/bin/spark-sql –master yarn，按yarn-client模式启动spark-sql交互命令行（即driver程序运行在本地，而非yarn的container中），日志显示的关于AppMaster和Executor的内存信息如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-1.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-2.png\" alt=\"\"></p>\n<p>日志显示，AppMaster的内存是896MB，其中包含了384MB的memoryOverhead；启动了5个executor，第一个的可用内存是530.3MB，其余每个Executor的可用内存是1060.3MB。</p>\n<p>到yarnUI看下资源使用情况，共启动了5个container，占用内存13G，其中一台NodeManager启动了2个container，占用内存4G（1个AppMaster占1G、另一个占3G），另外3台各启了1个container，每个占用3G内存。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-3.png\" alt=\"\"></p>\n<p>再到sparkUI看下executors的情况，这里有5个executor，其中driver是运行在执行spark-sql命令的本地服务器上，另外4个是运行在yarn集群中。Driver的可用storage memory为530.3MB，另外4个都是1060.3MB（与日志信息一致）。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-4.png\" alt=\"\"></p>\n<p>那么问题来了：</p>\n<ol>\n<li><p>Yarn为container分配的最小内存由yarn.scheduler.minimum-allocation-mb参数决定，默认是1G，从yarnUI中看确实如此，可为何spark的日志里显示AppMaster的实际内存是896-384=512MB呢？384MB是怎么算出来的？</p>\n</li>\n<li><p>spark配置文件里指定了每个executor的内存为2G，为何日志和sparkUI上显示的是1060.3MB？</p>\n</li>\n<li><p>driver的内存配置为1G，为何sparkUI里显示的是530.3MB呢？</p>\n</li>\n<li><p>为何yarn中每个container分配的内存是3G，而不是executor需要的2G呢？</p>\n</li>\n</ol>\n<h2 id=\"问题解析\"><a href=\"#问题解析\" class=\"headerlink\" title=\"问题解析\"></a>问题解析</h2><p>进过一番调研，发现这里有些概念容易混淆，整理如下，序号对应上面的问题：<br><a id=\"more\"></a><br>(1) spark的yarn-client向ResourceManager申请提交作业/启动AppMaster时，会判断是否是集群模式，如果是集群模式，则AppMaster的内存大小与driver内存大小一致，否则由spark.yarn.am.memory决定，这个参数的默认值是512MB。我们使用的是yarn-client模式，所以实际内存是512MB。</p>\n<p><font color=\"red\">384MB是spark-client为appMaster额外申请的内存</font>，计算方法如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-5.png\" alt=\"\"></p>\n<p>即，默认从参数读取（集群模式从spark.yarn.driver.memoryOverhead参数读，否则从spark.yarn.am.memoryOverhead参数读），若没配此参数，则从AppMaster的内存*一定系数和默认最小overhead中取较大值。</p>\n<p>在spark-1.4.1版本中，MEMORY_OVERHEAD_FACTOR的默认值为0.10（之前是0.07），MEMORY_OVERHEAD_MIN默认为384，我们没有指定spark.yarn.driver.memoryOverhead和spark.yarn.am.memoryOverhead，而amMemory=512M（由spark.yarn.am.memory决定），因此memoryOverhead为max(512*0.10, 384)=384MB。</p>\n<p>Executor的memoryOverhead计算方法与此一样，只是不区分是否集群模式，都默认由spark.yarn.executor.memoryOverhead配置。</p>\n<p>(2) <font color=\"red\">日志和sparkUI上显示的是executor内部用于缓存计算结果的内存空间，并不是executor所拥有的全部内存</font>。这部分内存是由以下公式计算：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-6.png\" alt=\"\"></p>\n<p>Runtime.getRuntime.maxMemory按2048MB算，storage memory大小为1105.92MB，sparkUI显示的略小于此值，是正常的。</p>\n<p>(3) 与上述第2点一样，storage memory的大小略小于1024<em>0.9</em>0.6=552.96MB</p>\n<p>(4) 前面提到spark会为container额外申请一部分内存（memoryOverhead），因此，实际为container提交申请的内存大小是2048 + max(2048*0.10, 384) = 2432MB，而<font color=\"red\">yarn在做资源分配时会做资源规整化，即应用程序申请的资源量一定是最小可申请资源量的整数倍（向上取整）</font>，最小可申请内存量由yarn.scheduler.minimum-allocation-mb指定，因此，会为container分配3G内存。</p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>为了验证上述规则，继续修改配置参数：</p>\n<blockquote>\n<p>SPARK_EXECUTOR_INSTANCES=4          <em>在yarn集群中启动的executor进程数</em></p>\n<p>SPARK_EXECUTOR_MEMORY=4G            <em>为每个executor进程分配的内存大小</em></p>\n<p>SPARK_DRIVER_MEMORY=3G              <em>为spark-driver进程分配的内存大小</em></p>\n</blockquote>\n<p>并在启动spark-sql时指定spark.yarn.am.memory参数：</p>\n<p><strong>bin/spark-sql –master yarn –conf spark.yarn.am.memory=1024m</strong></p>\n<p>再看日志信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-7.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-8.png\" alt=\"\"></p>\n<p>yarnUI状态：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-9.png\" alt=\"\"></p>\n<p>sparkUI的executors信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-10.png\" alt=\"\"></p>\n<p>可见，AppMaster的实际内存为1024M（1408-384），而其在yarn中的container内存大小为2G（1408大于1G，yarn按资源规整化原则为其分配2G）。</p>\n<p>同理，driver的storage memory空间为3G*0.9*0.6=1.62G，executor的storage memory空间为4G*0.9*0.6=2.16G，executor所在container占用5G内存（4096+max(4096*0.10,384)= 4505.6，大于4G， yarn按资源规整化原则为其分配5G）。</p>\n<p>Yarn集群的内存总占用空间为2+5*4=22G。</p>\n","excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>在测试spark on yarn时，发现一些内存分配上的问题，具体如下。</p>\n<p>在$SPARK_HOME/conf/spark-env.sh中配置如下参数：</p>\n<blockquote>\n<p>SPARK_EXECUTOR_INSTANCES=4            <em>在yarn集群中启动的executor进程数</em></p>\n<p>SPARK_EXECUTOR_MEMORY=2G              <em>为每个executor进程分配的内存大小</em></p>\n<p>SPARK_DRIVER_MEMORY=1G                <em>为spark-driver进程分配的内存大小</em></p>\n</blockquote>\n<p>执行$SPARK_HOME/bin/spark-sql –master yarn，按yarn-client模式启动spark-sql交互命令行（即driver程序运行在本地，而非yarn的container中），日志显示的关于AppMaster和Executor的内存信息如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-1.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-2.png\" alt=\"\"></p>\n<p>日志显示，AppMaster的内存是896MB，其中包含了384MB的memoryOverhead；启动了5个executor，第一个的可用内存是530.3MB，其余每个Executor的可用内存是1060.3MB。</p>\n<p>到yarnUI看下资源使用情况，共启动了5个container，占用内存13G，其中一台NodeManager启动了2个container，占用内存4G（1个AppMaster占1G、另一个占3G），另外3台各启了1个container，每个占用3G内存。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-3.png\" alt=\"\"></p>\n<p>再到sparkUI看下executors的情况，这里有5个executor，其中driver是运行在执行spark-sql命令的本地服务器上，另外4个是运行在yarn集群中。Driver的可用storage memory为530.3MB，另外4个都是1060.3MB（与日志信息一致）。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-4.png\" alt=\"\"></p>\n<p>那么问题来了：</p>\n<ol>\n<li><p>Yarn为container分配的最小内存由yarn.scheduler.minimum-allocation-mb参数决定，默认是1G，从yarnUI中看确实如此，可为何spark的日志里显示AppMaster的实际内存是896-384=512MB呢？384MB是怎么算出来的？</p>\n</li>\n<li><p>spark配置文件里指定了每个executor的内存为2G，为何日志和sparkUI上显示的是1060.3MB？</p>\n</li>\n<li><p>driver的内存配置为1G，为何sparkUI里显示的是530.3MB呢？</p>\n</li>\n<li><p>为何yarn中每个container分配的内存是3G，而不是executor需要的2G呢？</p>\n</li>\n</ol>\n<h2 id=\"问题解析\"><a href=\"#问题解析\" class=\"headerlink\" title=\"问题解析\"></a>问题解析</h2><p>进过一番调研，发现这里有些概念容易混淆，整理如下，序号对应上面的问题：<br>","more":"<br>(1) spark的yarn-client向ResourceManager申请提交作业/启动AppMaster时，会判断是否是集群模式，如果是集群模式，则AppMaster的内存大小与driver内存大小一致，否则由spark.yarn.am.memory决定，这个参数的默认值是512MB。我们使用的是yarn-client模式，所以实际内存是512MB。</p>\n<p><font color='red'>384MB是spark-client为appMaster额外申请的内存</font>，计算方法如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-5.png\" alt=\"\"></p>\n<p>即，默认从参数读取（集群模式从spark.yarn.driver.memoryOverhead参数读，否则从spark.yarn.am.memoryOverhead参数读），若没配此参数，则从AppMaster的内存*一定系数和默认最小overhead中取较大值。</p>\n<p>在spark-1.4.1版本中，MEMORY_OVERHEAD_FACTOR的默认值为0.10（之前是0.07），MEMORY_OVERHEAD_MIN默认为384，我们没有指定spark.yarn.driver.memoryOverhead和spark.yarn.am.memoryOverhead，而amMemory=512M（由spark.yarn.am.memory决定），因此memoryOverhead为max(512*0.10, 384)=384MB。</p>\n<p>Executor的memoryOverhead计算方法与此一样，只是不区分是否集群模式，都默认由spark.yarn.executor.memoryOverhead配置。</p>\n<p>(2) <font color='red'>日志和sparkUI上显示的是executor内部用于缓存计算结果的内存空间，并不是executor所拥有的全部内存</font>。这部分内存是由以下公式计算：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-6.png\" alt=\"\"></p>\n<p>Runtime.getRuntime.maxMemory按2048MB算，storage memory大小为1105.92MB，sparkUI显示的略小于此值，是正常的。</p>\n<p>(3) 与上述第2点一样，storage memory的大小略小于1024<em>0.9</em>0.6=552.96MB</p>\n<p>(4) 前面提到spark会为container额外申请一部分内存（memoryOverhead），因此，实际为container提交申请的内存大小是2048 + max(2048*0.10, 384) = 2432MB，而<font color='red'>yarn在做资源分配时会做资源规整化，即应用程序申请的资源量一定是最小可申请资源量的整数倍（向上取整）</font>，最小可申请内存量由yarn.scheduler.minimum-allocation-mb指定，因此，会为container分配3G内存。</p>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>为了验证上述规则，继续修改配置参数：</p>\n<blockquote>\n<p>SPARK_EXECUTOR_INSTANCES=4          <em>在yarn集群中启动的executor进程数</em></p>\n<p>SPARK_EXECUTOR_MEMORY=4G            <em>为每个executor进程分配的内存大小</em></p>\n<p>SPARK_DRIVER_MEMORY=3G              <em>为spark-driver进程分配的内存大小</em></p>\n</blockquote>\n<p>并在启动spark-sql时指定spark.yarn.am.memory参数：</p>\n<p><strong>bin/spark-sql –master yarn –conf spark.yarn.am.memory=1024m</strong></p>\n<p>再看日志信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-7.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-8.png\" alt=\"\"></p>\n<p>yarnUI状态：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-9.png\" alt=\"\"></p>\n<p>sparkUI的executors信息：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150813/sparkonyarn-10.png\" alt=\"\"></p>\n<p>可见，AppMaster的实际内存为1024M（1408-384），而其在yarn中的container内存大小为2G（1408大于1G，yarn按资源规整化原则为其分配2G）。</p>\n<p>同理，driver的storage memory空间为3G*0.9*0.6=1.62G，executor的storage memory空间为4G*0.9*0.6=2.16G，executor所在container占用5G内存（4096+max(4096*0.10,384)= 4505.6，大于4G， yarn按资源规整化原则为其分配5G）。</p>\n<p>Yarn集群的内存总占用空间为2+5*4=22G。</p>"},{"title":"kafka-0.10.0启动过程分析","date":"2016-07-08T14:46:18.000Z","_content":"\nkafka-0.10.0是官方出的最新稳定版本，提供了大量新的feature，具体可见[这里](http://www.iteblog.com/archives/1677)，本文主要分析kafka-0.10-0的源码结构和启动过程。\n\n源码结构\n--\nkafka-0.10.0的源码可以从github上fork一份，在源码目录下执行./gradlew idea生成idea项目，然后导入idea即可。这中间需要使用gradle进行依赖包的下载，导入后可以看到其源码结构如下图所示：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20160708-kafka0.10.0%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/1.png)\n\n包括几大重要模块：\n\n* clients主要是kafka-client相关的代码，包括consumer、producer，还包括一些公共逻辑，如授权认证、序列化等。\n* connect主要是kafka-connect模块的代码逻辑，Kafka connect是0.9版本增加的特性,支持创建和管理数据流管道。通过它可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统，比如数据库、elastic search等。\n* core模块是kafka的核心部分，主要包括broker的实现逻辑、producer和consumer的javaapi等。\n* streams模块主要是kafka-streaming的实现，提供了一整套描述常见流操作的高级语言API（比如 joining, filtering以及aggregation等），我们可以基于此开发流处理应用程序。\n\n<!--more-->\n\n启动入口\n--\nkafka的启动入口在core_main这个module下，入口函数如下：\n\n```scala\ndef main(args: Array[String]): Unit = {\n    try {\n      val serverProps = getPropsFromArgs(args)\n      val kafkaServerStartable = KafkaServerStartable.fromProps(serverProps)\n\n      // attach shutdown handler to catch control-c\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        override def run() = {\n          kafkaServerStartable.shutdown\n        }\n      })\n\n      kafkaServerStartable.startup\n      kafkaServerStartable.awaitShutdown\n    }\n    catch {\n      case e: Throwable =>\n        fatal(e)\n        System.exit(1)\n    }\n    System.exit(0)\n  }\n```\n\n先从命令行指定的配置文件加载配置，然后通过KafkaServerStartable类启动broker，实际上在KafkaServerStartable中维护了一个KafkaServer对象，它通过调用KafkaServer的startup方法启动broker。\n\nbroker启动过程\n--\n\n下面并启动过程代码按启动顺序分两部分做说明。\n\n第一部分主要是核心模块的启动，代码如下：\n\n```scala\nmetrics = new Metrics(metricConfig, reporters, kafkaMetricsTime, true)\n\n        brokerState.newState(Starting)\n\n        /* start scheduler */\n        kafkaScheduler.startup()\n\n        /* setup zookeeper */\n        zkUtils = initZk()\n\n        /* start log manager */\n        logManager = createLogManager(zkUtils.zkClient, brokerState)\n        logManager.startup()\n\n        /* generate brokerId */\n        config.brokerId =  getBrokerId\n        this.logIdent = \"[Kafka Server \" + config.brokerId + \"], \"\n\n        socketServer = new SocketServer(config, metrics, kafkaMetricsTime)\n        socketServer.startup()\n\n        /* start replica manager */\n        replicaManager = new ReplicaManager(config, metrics, time, kafkaMetricsTime, zkUtils, kafkaScheduler, logManager,\n          isShuttingDown)\n        replicaManager.startup()\n\n        /* start kafka controller */\n        kafkaController = new KafkaController(config, zkUtils, brokerState, kafkaMetricsTime, metrics, threadNamePrefix)\n        kafkaController.startup()\n\n        /* start group coordinator */\n        groupCoordinator = GroupCoordinator(config, zkUtils, replicaManager, kafkaMetricsTime)\n        groupCoordinator.startup()\n\n        /* Get the authorizer and initialize it if one is specified.*/\n        authorizer = Option(config.authorizerClassName).filter(_.nonEmpty).map { authorizerClassName =>\n          val authZ = CoreUtils.createObject[Authorizer](authorizerClassName)\n          authZ.configure(config.originals())\n          authZ\n        }\n\n        /* start processing requests */\n        apis = new KafkaApis(socketServer.requestChannel, replicaManager, groupCoordinator,\n          kafkaController, zkUtils, config.brokerId, config, metadataCache, metrics, authorizer)\n        requestHandlerPool = new KafkaRequestHandlerPool(config.brokerId, socketServer.requestChannel, apis, config.numIoThreads)\n        brokerState.newState(RunningAsBroker)\n```\n\n1. 首先是初始化Metrics注册信息。\n2. 接着把当前broker的状态先置为Starting。\n3. 启动kafkaScheduler，其内部维护了一个ScheduledThreadPoolExecutor，用于执行broker内置的一些周期性运行的job或定时job。比如，启动自动提交时，broker会定期维护客户端的消费topic-partition的offset信息。\n4. 初始化zookeeper访问工具，建立必要的数据路径。\n5. 启动LogManager，也就是日志数据管理子系统，负责日志数据的创建、截断、滚动、和清理等。\n6. 启动SocketServer，一个基于NIO的socker服务端，其线程模型是有一个acceptor线程来接受客户端的连接，对应这个acceptor有N个processor线程，每个processor有自己的selector来从sockets读取收到的请求。另外，有M个handler线程专门处理请求并把处理结果返回给processor线程并通过socket写回给客户端。\n7. 启动ReplicaManager，也即副本管理器，用于管理每个topic-partition的副本状态，包括主从、ISR列表等。\n8. 启动KafkaController，可以理解为kafka集群的中央控制器，负责全局的协调，比如选取leader，reassignment等，其自身也支持动态选举高可用。\n9. 启动GroupCoordinator，主要用于broker组管理和offset管理。\n10. 初始化授权认证管理器，用户可以自己通过参数authorizer.class.name指定具体的Authorizer实现。kafka自带有SimpleAclAuthorizer的简单实现。\n11. 初始化KafkaApis，用于统一接收外部请求。\n12. 初始化KafkaRequestHandlerPool，内部是一个线程池，用于具体处理外部请求。\n13. 将当前broker的状态置为RunningAsBroker，这时，broker已经可以对外提供服务了。\n\n第二部分主要是辅助模块的启动，代码如下：\n\n```scala\n        Mx4jLoader.maybeLoad()\n\n        /* start dynamic config manager */\n        dynamicConfigHandlers = Map[String, ConfigHandler](ConfigType.Topic -> new TopicConfigHandler(logManager, config),\n                                                           ConfigType.Client -> new ClientIdConfigHandler(apis.quotaManagers))\n\n        // Apply all existing client configs to the ClientIdConfigHandler to bootstrap the overrides\n        // TODO: Move this logic to DynamicConfigManager\n        AdminUtils.fetchAllEntityConfigs(zkUtils, ConfigType.Client).foreach {\n          case (clientId, properties) => dynamicConfigHandlers(ConfigType.Client).processConfigChanges(clientId, properties)\n        }\n\n        // Create the config manager. start listening to notifications\n        dynamicConfigManager = new DynamicConfigManager(zkUtils, dynamicConfigHandlers)\n        dynamicConfigManager.startup()\n\n        /* tell everyone we are alive */\n        val listeners = config.advertisedListeners.map {case(protocol, endpoint) =>\n          if (endpoint.port == 0)\n            (protocol, EndPoint(endpoint.host, socketServer.boundPort(protocol), endpoint.protocolType))\n          else\n            (protocol, endpoint)\n        }\n        kafkaHealthcheck = new KafkaHealthcheck(config.brokerId, listeners, zkUtils, config.rack,\n          config.interBrokerProtocolVersion)\n        kafkaHealthcheck.startup()\n\n        // Now that the broker id is successfully registered via KafkaHealthcheck, checkpoint it\n        checkpointBrokerId(config.brokerId)\n\n        /* register broker metrics */\n        registerStats()\n\n        shutdownLatch = new CountDownLatch(1)\n        startupComplete.set(true)\n        isStartingUp.set(false)\n        AppInfoParser.registerAppInfo(jmxPrefix, config.brokerId.toString)\n        info(\"started\")\n```\n\n1. 启动jmx，通过参数kafka_mx4jenable控制是否启用jmx，默认为false。\n2. 初始化TopicConfigHandler和ClientIdConfigHandler，前者用于处理zk上的topic配置变更信息，后者用于zk上的clientId配置变更信息。\n3. 启动DynamicConfigManager，通过动态配置管理器，监听zk上的配置节点变化，并根据具体变化的配置信息调用TopicConfigHandler或ClientIdConfigHandler更新配置。\n4. 启动KafkaHealthcheck，用于在zk上注册当前broker节点信息，以便节点退出时其他broker和consumer能监听到，目前的节点健康度判断比较简单，只是单纯的看zk上的节点是否存在。\n5. 最后，在本地对当前broker做个checkpoint，并注册jmx bean信息\n\n\n\n\n\n\n","source":"_posts/kafka-0-10-0启动过程分析.md","raw":"---\ntitle: kafka-0.10.0启动过程分析\ndate: 2016-07-08 22:46:18\ntags:\n- kafka\n- 源码分析\ncategories:\n- Kafka\n---\n\nkafka-0.10.0是官方出的最新稳定版本，提供了大量新的feature，具体可见[这里](http://www.iteblog.com/archives/1677)，本文主要分析kafka-0.10-0的源码结构和启动过程。\n\n源码结构\n--\nkafka-0.10.0的源码可以从github上fork一份，在源码目录下执行./gradlew idea生成idea项目，然后导入idea即可。这中间需要使用gradle进行依赖包的下载，导入后可以看到其源码结构如下图所示：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20160708-kafka0.10.0%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/1.png)\n\n包括几大重要模块：\n\n* clients主要是kafka-client相关的代码，包括consumer、producer，还包括一些公共逻辑，如授权认证、序列化等。\n* connect主要是kafka-connect模块的代码逻辑，Kafka connect是0.9版本增加的特性,支持创建和管理数据流管道。通过它可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统，比如数据库、elastic search等。\n* core模块是kafka的核心部分，主要包括broker的实现逻辑、producer和consumer的javaapi等。\n* streams模块主要是kafka-streaming的实现，提供了一整套描述常见流操作的高级语言API（比如 joining, filtering以及aggregation等），我们可以基于此开发流处理应用程序。\n\n<!--more-->\n\n启动入口\n--\nkafka的启动入口在core_main这个module下，入口函数如下：\n\n```scala\ndef main(args: Array[String]): Unit = {\n    try {\n      val serverProps = getPropsFromArgs(args)\n      val kafkaServerStartable = KafkaServerStartable.fromProps(serverProps)\n\n      // attach shutdown handler to catch control-c\n      Runtime.getRuntime().addShutdownHook(new Thread() {\n        override def run() = {\n          kafkaServerStartable.shutdown\n        }\n      })\n\n      kafkaServerStartable.startup\n      kafkaServerStartable.awaitShutdown\n    }\n    catch {\n      case e: Throwable =>\n        fatal(e)\n        System.exit(1)\n    }\n    System.exit(0)\n  }\n```\n\n先从命令行指定的配置文件加载配置，然后通过KafkaServerStartable类启动broker，实际上在KafkaServerStartable中维护了一个KafkaServer对象，它通过调用KafkaServer的startup方法启动broker。\n\nbroker启动过程\n--\n\n下面并启动过程代码按启动顺序分两部分做说明。\n\n第一部分主要是核心模块的启动，代码如下：\n\n```scala\nmetrics = new Metrics(metricConfig, reporters, kafkaMetricsTime, true)\n\n        brokerState.newState(Starting)\n\n        /* start scheduler */\n        kafkaScheduler.startup()\n\n        /* setup zookeeper */\n        zkUtils = initZk()\n\n        /* start log manager */\n        logManager = createLogManager(zkUtils.zkClient, brokerState)\n        logManager.startup()\n\n        /* generate brokerId */\n        config.brokerId =  getBrokerId\n        this.logIdent = \"[Kafka Server \" + config.brokerId + \"], \"\n\n        socketServer = new SocketServer(config, metrics, kafkaMetricsTime)\n        socketServer.startup()\n\n        /* start replica manager */\n        replicaManager = new ReplicaManager(config, metrics, time, kafkaMetricsTime, zkUtils, kafkaScheduler, logManager,\n          isShuttingDown)\n        replicaManager.startup()\n\n        /* start kafka controller */\n        kafkaController = new KafkaController(config, zkUtils, brokerState, kafkaMetricsTime, metrics, threadNamePrefix)\n        kafkaController.startup()\n\n        /* start group coordinator */\n        groupCoordinator = GroupCoordinator(config, zkUtils, replicaManager, kafkaMetricsTime)\n        groupCoordinator.startup()\n\n        /* Get the authorizer and initialize it if one is specified.*/\n        authorizer = Option(config.authorizerClassName).filter(_.nonEmpty).map { authorizerClassName =>\n          val authZ = CoreUtils.createObject[Authorizer](authorizerClassName)\n          authZ.configure(config.originals())\n          authZ\n        }\n\n        /* start processing requests */\n        apis = new KafkaApis(socketServer.requestChannel, replicaManager, groupCoordinator,\n          kafkaController, zkUtils, config.brokerId, config, metadataCache, metrics, authorizer)\n        requestHandlerPool = new KafkaRequestHandlerPool(config.brokerId, socketServer.requestChannel, apis, config.numIoThreads)\n        brokerState.newState(RunningAsBroker)\n```\n\n1. 首先是初始化Metrics注册信息。\n2. 接着把当前broker的状态先置为Starting。\n3. 启动kafkaScheduler，其内部维护了一个ScheduledThreadPoolExecutor，用于执行broker内置的一些周期性运行的job或定时job。比如，启动自动提交时，broker会定期维护客户端的消费topic-partition的offset信息。\n4. 初始化zookeeper访问工具，建立必要的数据路径。\n5. 启动LogManager，也就是日志数据管理子系统，负责日志数据的创建、截断、滚动、和清理等。\n6. 启动SocketServer，一个基于NIO的socker服务端，其线程模型是有一个acceptor线程来接受客户端的连接，对应这个acceptor有N个processor线程，每个processor有自己的selector来从sockets读取收到的请求。另外，有M个handler线程专门处理请求并把处理结果返回给processor线程并通过socket写回给客户端。\n7. 启动ReplicaManager，也即副本管理器，用于管理每个topic-partition的副本状态，包括主从、ISR列表等。\n8. 启动KafkaController，可以理解为kafka集群的中央控制器，负责全局的协调，比如选取leader，reassignment等，其自身也支持动态选举高可用。\n9. 启动GroupCoordinator，主要用于broker组管理和offset管理。\n10. 初始化授权认证管理器，用户可以自己通过参数authorizer.class.name指定具体的Authorizer实现。kafka自带有SimpleAclAuthorizer的简单实现。\n11. 初始化KafkaApis，用于统一接收外部请求。\n12. 初始化KafkaRequestHandlerPool，内部是一个线程池，用于具体处理外部请求。\n13. 将当前broker的状态置为RunningAsBroker，这时，broker已经可以对外提供服务了。\n\n第二部分主要是辅助模块的启动，代码如下：\n\n```scala\n        Mx4jLoader.maybeLoad()\n\n        /* start dynamic config manager */\n        dynamicConfigHandlers = Map[String, ConfigHandler](ConfigType.Topic -> new TopicConfigHandler(logManager, config),\n                                                           ConfigType.Client -> new ClientIdConfigHandler(apis.quotaManagers))\n\n        // Apply all existing client configs to the ClientIdConfigHandler to bootstrap the overrides\n        // TODO: Move this logic to DynamicConfigManager\n        AdminUtils.fetchAllEntityConfigs(zkUtils, ConfigType.Client).foreach {\n          case (clientId, properties) => dynamicConfigHandlers(ConfigType.Client).processConfigChanges(clientId, properties)\n        }\n\n        // Create the config manager. start listening to notifications\n        dynamicConfigManager = new DynamicConfigManager(zkUtils, dynamicConfigHandlers)\n        dynamicConfigManager.startup()\n\n        /* tell everyone we are alive */\n        val listeners = config.advertisedListeners.map {case(protocol, endpoint) =>\n          if (endpoint.port == 0)\n            (protocol, EndPoint(endpoint.host, socketServer.boundPort(protocol), endpoint.protocolType))\n          else\n            (protocol, endpoint)\n        }\n        kafkaHealthcheck = new KafkaHealthcheck(config.brokerId, listeners, zkUtils, config.rack,\n          config.interBrokerProtocolVersion)\n        kafkaHealthcheck.startup()\n\n        // Now that the broker id is successfully registered via KafkaHealthcheck, checkpoint it\n        checkpointBrokerId(config.brokerId)\n\n        /* register broker metrics */\n        registerStats()\n\n        shutdownLatch = new CountDownLatch(1)\n        startupComplete.set(true)\n        isStartingUp.set(false)\n        AppInfoParser.registerAppInfo(jmxPrefix, config.brokerId.toString)\n        info(\"started\")\n```\n\n1. 启动jmx，通过参数kafka_mx4jenable控制是否启用jmx，默认为false。\n2. 初始化TopicConfigHandler和ClientIdConfigHandler，前者用于处理zk上的topic配置变更信息，后者用于zk上的clientId配置变更信息。\n3. 启动DynamicConfigManager，通过动态配置管理器，监听zk上的配置节点变化，并根据具体变化的配置信息调用TopicConfigHandler或ClientIdConfigHandler更新配置。\n4. 启动KafkaHealthcheck，用于在zk上注册当前broker节点信息，以便节点退出时其他broker和consumer能监听到，目前的节点健康度判断比较简单，只是单纯的看zk上的节点是否存在。\n5. 最后，在本地对当前broker做个checkpoint，并注册jmx bean信息\n\n\n\n\n\n\n","slug":"kafka-0-10-0启动过程分析","published":1,"updated":"2016-07-09T13:05:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxf40008d968b2q84yqk","content":"<p>kafka-0.10.0是官方出的最新稳定版本，提供了大量新的feature，具体可见<a href=\"http://www.iteblog.com/archives/1677\" target=\"_blank\" rel=\"external\">这里</a>，本文主要分析kafka-0.10-0的源码结构和启动过程。</p>\n<h2 id=\"源码结构\"><a href=\"#源码结构\" class=\"headerlink\" title=\"源码结构\"></a>源码结构</h2><p>kafka-0.10.0的源码可以从github上fork一份，在源码目录下执行./gradlew idea生成idea项目，然后导入idea即可。这中间需要使用gradle进行依赖包的下载，导入后可以看到其源码结构如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20160708-kafka0.10.0%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/1.png\" alt=\"\"></p>\n<p>包括几大重要模块：</p>\n<ul>\n<li>clients主要是kafka-client相关的代码，包括consumer、producer，还包括一些公共逻辑，如授权认证、序列化等。</li>\n<li>connect主要是kafka-connect模块的代码逻辑，Kafka connect是0.9版本增加的特性,支持创建和管理数据流管道。通过它可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统，比如数据库、elastic search等。</li>\n<li>core模块是kafka的核心部分，主要包括broker的实现逻辑、producer和consumer的javaapi等。</li>\n<li>streams模块主要是kafka-streaming的实现，提供了一整套描述常见流操作的高级语言API（比如 joining, filtering以及aggregation等），我们可以基于此开发流处理应用程序。</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"启动入口\"><a href=\"#启动入口\" class=\"headerlink\" title=\"启动入口\"></a>启动入口</h2><p>kafka的启动入口在core_main这个module下，入口函数如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">val</span> serverProps = getPropsFromArgs(args)</div><div class=\"line\">      <span class=\"keyword\">val</span> kafkaServerStartable = <span class=\"type\">KafkaServerStartable</span>.fromProps(serverProps)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// attach shutdown handler to catch control-c</span></div><div class=\"line\">      <span class=\"type\">Runtime</span>.getRuntime().addShutdownHook(<span class=\"keyword\">new</span> <span class=\"type\">Thread</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>() = &#123;</div><div class=\"line\">          kafkaServerStartable.shutdown</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">      kafkaServerStartable.startup</div><div class=\"line\">      kafkaServerStartable.awaitShutdown</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> e: <span class=\"type\">Throwable</span> =&gt;</div><div class=\"line\">        fatal(e)</div><div class=\"line\">        <span class=\"type\">System</span>.exit(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"type\">System</span>.exit(<span class=\"number\">0</span>)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>先从命令行指定的配置文件加载配置，然后通过KafkaServerStartable类启动broker，实际上在KafkaServerStartable中维护了一个KafkaServer对象，它通过调用KafkaServer的startup方法启动broker。</p>\n<h2 id=\"broker启动过程\"><a href=\"#broker启动过程\" class=\"headerlink\" title=\"broker启动过程\"></a>broker启动过程</h2><p>下面并启动过程代码按启动顺序分两部分做说明。</p>\n<p>第一部分主要是核心模块的启动，代码如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">metrics = <span class=\"keyword\">new</span> <span class=\"type\">Metrics</span>(metricConfig, reporters, kafkaMetricsTime, <span class=\"literal\">true</span>)</div><div class=\"line\"></div><div class=\"line\">        brokerState.newState(<span class=\"type\">Starting</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start scheduler */</span></div><div class=\"line\">        kafkaScheduler.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* setup zookeeper */</span></div><div class=\"line\">        zkUtils = initZk()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start log manager */</span></div><div class=\"line\">        logManager = createLogManager(zkUtils.zkClient, brokerState)</div><div class=\"line\">        logManager.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* generate brokerId */</span></div><div class=\"line\">        config.brokerId =  getBrokerId</div><div class=\"line\">        <span class=\"keyword\">this</span>.logIdent = <span class=\"string\">\"[Kafka Server \"</span> + config.brokerId + <span class=\"string\">\"], \"</span></div><div class=\"line\"></div><div class=\"line\">        socketServer = <span class=\"keyword\">new</span> <span class=\"type\">SocketServer</span>(config, metrics, kafkaMetricsTime)</div><div class=\"line\">        socketServer.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start replica manager */</span></div><div class=\"line\">        replicaManager = <span class=\"keyword\">new</span> <span class=\"type\">ReplicaManager</span>(config, metrics, time, kafkaMetricsTime, zkUtils, kafkaScheduler, logManager,</div><div class=\"line\">          isShuttingDown)</div><div class=\"line\">        replicaManager.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start kafka controller */</span></div><div class=\"line\">        kafkaController = <span class=\"keyword\">new</span> <span class=\"type\">KafkaController</span>(config, zkUtils, brokerState, kafkaMetricsTime, metrics, threadNamePrefix)</div><div class=\"line\">        kafkaController.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start group coordinator */</span></div><div class=\"line\">        groupCoordinator = <span class=\"type\">GroupCoordinator</span>(config, zkUtils, replicaManager, kafkaMetricsTime)</div><div class=\"line\">        groupCoordinator.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* Get the authorizer and initialize it if one is specified.*/</span></div><div class=\"line\">        authorizer = <span class=\"type\">Option</span>(config.authorizerClassName).filter(_.nonEmpty).map &#123; authorizerClassName =&gt;</div><div class=\"line\">          <span class=\"keyword\">val</span> authZ = <span class=\"type\">CoreUtils</span>.createObject[<span class=\"type\">Authorizer</span>](authorizerClassName)</div><div class=\"line\">          authZ.configure(config.originals())</div><div class=\"line\">          authZ</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start processing requests */</span></div><div class=\"line\">        apis = <span class=\"keyword\">new</span> <span class=\"type\">KafkaApis</span>(socketServer.requestChannel, replicaManager, groupCoordinator,</div><div class=\"line\">          kafkaController, zkUtils, config.brokerId, config, metadataCache, metrics, authorizer)</div><div class=\"line\">        requestHandlerPool = <span class=\"keyword\">new</span> <span class=\"type\">KafkaRequestHandlerPool</span>(config.brokerId, socketServer.requestChannel, apis, config.numIoThreads)</div><div class=\"line\">        brokerState.newState(<span class=\"type\">RunningAsBroker</span>)</div></pre></td></tr></table></figure>\n<ol>\n<li>首先是初始化Metrics注册信息。</li>\n<li>接着把当前broker的状态先置为Starting。</li>\n<li>启动kafkaScheduler，其内部维护了一个ScheduledThreadPoolExecutor，用于执行broker内置的一些周期性运行的job或定时job。比如，启动自动提交时，broker会定期维护客户端的消费topic-partition的offset信息。</li>\n<li>初始化zookeeper访问工具，建立必要的数据路径。</li>\n<li>启动LogManager，也就是日志数据管理子系统，负责日志数据的创建、截断、滚动、和清理等。</li>\n<li>启动SocketServer，一个基于NIO的socker服务端，其线程模型是有一个acceptor线程来接受客户端的连接，对应这个acceptor有N个processor线程，每个processor有自己的selector来从sockets读取收到的请求。另外，有M个handler线程专门处理请求并把处理结果返回给processor线程并通过socket写回给客户端。</li>\n<li>启动ReplicaManager，也即副本管理器，用于管理每个topic-partition的副本状态，包括主从、ISR列表等。</li>\n<li>启动KafkaController，可以理解为kafka集群的中央控制器，负责全局的协调，比如选取leader，reassignment等，其自身也支持动态选举高可用。</li>\n<li>启动GroupCoordinator，主要用于broker组管理和offset管理。</li>\n<li>初始化授权认证管理器，用户可以自己通过参数authorizer.class.name指定具体的Authorizer实现。kafka自带有SimpleAclAuthorizer的简单实现。</li>\n<li>初始化KafkaApis，用于统一接收外部请求。</li>\n<li>初始化KafkaRequestHandlerPool，内部是一个线程池，用于具体处理外部请求。</li>\n<li>将当前broker的状态置为RunningAsBroker，这时，broker已经可以对外提供服务了。</li>\n</ol>\n<p>第二部分主要是辅助模块的启动，代码如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Mx4jLoader</span>.maybeLoad()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* start dynamic config manager */</span></div><div class=\"line\">dynamicConfigHandlers = <span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">ConfigHandler</span>](<span class=\"type\">ConfigType</span>.<span class=\"type\">Topic</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">TopicConfigHandler</span>(logManager, config),</div><div class=\"line\">                                                   <span class=\"type\">ConfigType</span>.<span class=\"type\">Client</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">ClientIdConfigHandler</span>(apis.quotaManagers))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Apply all existing client configs to the ClientIdConfigHandler to bootstrap the overrides</span></div><div class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this logic to DynamicConfigManager</span></div><div class=\"line\"><span class=\"type\">AdminUtils</span>.fetchAllEntityConfigs(zkUtils, <span class=\"type\">ConfigType</span>.<span class=\"type\">Client</span>).foreach &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (clientId, properties) =&gt; dynamicConfigHandlers(<span class=\"type\">ConfigType</span>.<span class=\"type\">Client</span>).processConfigChanges(clientId, properties)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create the config manager. start listening to notifications</span></div><div class=\"line\">dynamicConfigManager = <span class=\"keyword\">new</span> <span class=\"type\">DynamicConfigManager</span>(zkUtils, dynamicConfigHandlers)</div><div class=\"line\">dynamicConfigManager.startup()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* tell everyone we are alive */</span></div><div class=\"line\"><span class=\"keyword\">val</span> listeners = config.advertisedListeners.map &#123;<span class=\"keyword\">case</span>(protocol, endpoint) =&gt;</div><div class=\"line\">  <span class=\"keyword\">if</span> (endpoint.port == <span class=\"number\">0</span>)</div><div class=\"line\">    (protocol, <span class=\"type\">EndPoint</span>(endpoint.host, socketServer.boundPort(protocol), endpoint.protocolType))</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    (protocol, endpoint)</div><div class=\"line\">&#125;</div><div class=\"line\">kafkaHealthcheck = <span class=\"keyword\">new</span> <span class=\"type\">KafkaHealthcheck</span>(config.brokerId, listeners, zkUtils, config.rack,</div><div class=\"line\">  config.interBrokerProtocolVersion)</div><div class=\"line\">kafkaHealthcheck.startup()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Now that the broker id is successfully registered via KafkaHealthcheck, checkpoint it</span></div><div class=\"line\">checkpointBrokerId(config.brokerId)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* register broker metrics */</span></div><div class=\"line\">registerStats()</div><div class=\"line\"></div><div class=\"line\">shutdownLatch = <span class=\"keyword\">new</span> <span class=\"type\">CountDownLatch</span>(<span class=\"number\">1</span>)</div><div class=\"line\">startupComplete.set(<span class=\"literal\">true</span>)</div><div class=\"line\">isStartingUp.set(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"type\">AppInfoParser</span>.registerAppInfo(jmxPrefix, config.brokerId.toString)</div><div class=\"line\">info(<span class=\"string\">\"started\"</span>)</div></pre></td></tr></table></figure>\n<ol>\n<li>启动jmx，通过参数kafka_mx4jenable控制是否启用jmx，默认为false。</li>\n<li>初始化TopicConfigHandler和ClientIdConfigHandler，前者用于处理zk上的topic配置变更信息，后者用于zk上的clientId配置变更信息。</li>\n<li>启动DynamicConfigManager，通过动态配置管理器，监听zk上的配置节点变化，并根据具体变化的配置信息调用TopicConfigHandler或ClientIdConfigHandler更新配置。</li>\n<li>启动KafkaHealthcheck，用于在zk上注册当前broker节点信息，以便节点退出时其他broker和consumer能监听到，目前的节点健康度判断比较简单，只是单纯的看zk上的节点是否存在。</li>\n<li>最后，在本地对当前broker做个checkpoint，并注册jmx bean信息</li>\n</ol>\n","excerpt":"<p>kafka-0.10.0是官方出的最新稳定版本，提供了大量新的feature，具体可见<a href=\"http://www.iteblog.com/archives/1677\">这里</a>，本文主要分析kafka-0.10-0的源码结构和启动过程。</p>\n<h2 id=\"源码结构\"><a href=\"#源码结构\" class=\"headerlink\" title=\"源码结构\"></a>源码结构</h2><p>kafka-0.10.0的源码可以从github上fork一份，在源码目录下执行./gradlew idea生成idea项目，然后导入idea即可。这中间需要使用gradle进行依赖包的下载，导入后可以看到其源码结构如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20160708-kafka0.10.0%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B%E5%88%86%E6%9E%90/1.png\" alt=\"\"></p>\n<p>包括几大重要模块：</p>\n<ul>\n<li>clients主要是kafka-client相关的代码，包括consumer、producer，还包括一些公共逻辑，如授权认证、序列化等。</li>\n<li>connect主要是kafka-connect模块的代码逻辑，Kafka connect是0.9版本增加的特性,支持创建和管理数据流管道。通过它可以将大数据从其它系统导入到Kafka中，也可以从Kafka中导出到其它系统，比如数据库、elastic search等。</li>\n<li>core模块是kafka的核心部分，主要包括broker的实现逻辑、producer和consumer的javaapi等。</li>\n<li>streams模块主要是kafka-streaming的实现，提供了一整套描述常见流操作的高级语言API（比如 joining, filtering以及aggregation等），我们可以基于此开发流处理应用程序。</li>\n</ul>","more":"<h2 id=\"启动入口\"><a href=\"#启动入口\" class=\"headerlink\" title=\"启动入口\"></a>启动入口</h2><p>kafka的启动入口在core_main这个module下，入口函数如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span></span>(args: <span class=\"type\">Array</span>[<span class=\"type\">String</span>]): <span class=\"type\">Unit</span> = &#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">val</span> serverProps = getPropsFromArgs(args)</div><div class=\"line\">      <span class=\"keyword\">val</span> kafkaServerStartable = <span class=\"type\">KafkaServerStartable</span>.fromProps(serverProps)</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// attach shutdown handler to catch control-c</span></div><div class=\"line\">      <span class=\"type\">Runtime</span>.getRuntime().addShutdownHook(<span class=\"keyword\">new</span> <span class=\"type\">Thread</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span></span>() = &#123;</div><div class=\"line\">          kafkaServerStartable.shutdown</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\"></div><div class=\"line\">      kafkaServerStartable.startup</div><div class=\"line\">      kafkaServerStartable.awaitShutdown</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">catch</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">case</span> e: <span class=\"type\">Throwable</span> =&gt;</div><div class=\"line\">        fatal(e)</div><div class=\"line\">        <span class=\"type\">System</span>.exit(<span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"type\">System</span>.exit(<span class=\"number\">0</span>)</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>先从命令行指定的配置文件加载配置，然后通过KafkaServerStartable类启动broker，实际上在KafkaServerStartable中维护了一个KafkaServer对象，它通过调用KafkaServer的startup方法启动broker。</p>\n<h2 id=\"broker启动过程\"><a href=\"#broker启动过程\" class=\"headerlink\" title=\"broker启动过程\"></a>broker启动过程</h2><p>下面并启动过程代码按启动顺序分两部分做说明。</p>\n<p>第一部分主要是核心模块的启动，代码如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">metrics = <span class=\"keyword\">new</span> <span class=\"type\">Metrics</span>(metricConfig, reporters, kafkaMetricsTime, <span class=\"literal\">true</span>)</div><div class=\"line\"></div><div class=\"line\">        brokerState.newState(<span class=\"type\">Starting</span>)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start scheduler */</span></div><div class=\"line\">        kafkaScheduler.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* setup zookeeper */</span></div><div class=\"line\">        zkUtils = initZk()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start log manager */</span></div><div class=\"line\">        logManager = createLogManager(zkUtils.zkClient, brokerState)</div><div class=\"line\">        logManager.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* generate brokerId */</span></div><div class=\"line\">        config.brokerId =  getBrokerId</div><div class=\"line\">        <span class=\"keyword\">this</span>.logIdent = <span class=\"string\">\"[Kafka Server \"</span> + config.brokerId + <span class=\"string\">\"], \"</span></div><div class=\"line\"></div><div class=\"line\">        socketServer = <span class=\"keyword\">new</span> <span class=\"type\">SocketServer</span>(config, metrics, kafkaMetricsTime)</div><div class=\"line\">        socketServer.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start replica manager */</span></div><div class=\"line\">        replicaManager = <span class=\"keyword\">new</span> <span class=\"type\">ReplicaManager</span>(config, metrics, time, kafkaMetricsTime, zkUtils, kafkaScheduler, logManager,</div><div class=\"line\">          isShuttingDown)</div><div class=\"line\">        replicaManager.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start kafka controller */</span></div><div class=\"line\">        kafkaController = <span class=\"keyword\">new</span> <span class=\"type\">KafkaController</span>(config, zkUtils, brokerState, kafkaMetricsTime, metrics, threadNamePrefix)</div><div class=\"line\">        kafkaController.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start group coordinator */</span></div><div class=\"line\">        groupCoordinator = <span class=\"type\">GroupCoordinator</span>(config, zkUtils, replicaManager, kafkaMetricsTime)</div><div class=\"line\">        groupCoordinator.startup()</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* Get the authorizer and initialize it if one is specified.*/</span></div><div class=\"line\">        authorizer = <span class=\"type\">Option</span>(config.authorizerClassName).filter(_.nonEmpty).map &#123; authorizerClassName =&gt;</div><div class=\"line\">          <span class=\"keyword\">val</span> authZ = <span class=\"type\">CoreUtils</span>.createObject[<span class=\"type\">Authorizer</span>](authorizerClassName)</div><div class=\"line\">          authZ.configure(config.originals())</div><div class=\"line\">          authZ</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/* start processing requests */</span></div><div class=\"line\">        apis = <span class=\"keyword\">new</span> <span class=\"type\">KafkaApis</span>(socketServer.requestChannel, replicaManager, groupCoordinator,</div><div class=\"line\">          kafkaController, zkUtils, config.brokerId, config, metadataCache, metrics, authorizer)</div><div class=\"line\">        requestHandlerPool = <span class=\"keyword\">new</span> <span class=\"type\">KafkaRequestHandlerPool</span>(config.brokerId, socketServer.requestChannel, apis, config.numIoThreads)</div><div class=\"line\">        brokerState.newState(<span class=\"type\">RunningAsBroker</span>)</div></pre></td></tr></table></figure>\n<ol>\n<li>首先是初始化Metrics注册信息。</li>\n<li>接着把当前broker的状态先置为Starting。</li>\n<li>启动kafkaScheduler，其内部维护了一个ScheduledThreadPoolExecutor，用于执行broker内置的一些周期性运行的job或定时job。比如，启动自动提交时，broker会定期维护客户端的消费topic-partition的offset信息。</li>\n<li>初始化zookeeper访问工具，建立必要的数据路径。</li>\n<li>启动LogManager，也就是日志数据管理子系统，负责日志数据的创建、截断、滚动、和清理等。</li>\n<li>启动SocketServer，一个基于NIO的socker服务端，其线程模型是有一个acceptor线程来接受客户端的连接，对应这个acceptor有N个processor线程，每个processor有自己的selector来从sockets读取收到的请求。另外，有M个handler线程专门处理请求并把处理结果返回给processor线程并通过socket写回给客户端。</li>\n<li>启动ReplicaManager，也即副本管理器，用于管理每个topic-partition的副本状态，包括主从、ISR列表等。</li>\n<li>启动KafkaController，可以理解为kafka集群的中央控制器，负责全局的协调，比如选取leader，reassignment等，其自身也支持动态选举高可用。</li>\n<li>启动GroupCoordinator，主要用于broker组管理和offset管理。</li>\n<li>初始化授权认证管理器，用户可以自己通过参数authorizer.class.name指定具体的Authorizer实现。kafka自带有SimpleAclAuthorizer的简单实现。</li>\n<li>初始化KafkaApis，用于统一接收外部请求。</li>\n<li>初始化KafkaRequestHandlerPool，内部是一个线程池，用于具体处理外部请求。</li>\n<li>将当前broker的状态置为RunningAsBroker，这时，broker已经可以对外提供服务了。</li>\n</ol>\n<p>第二部分主要是辅助模块的启动，代码如下：</p>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">Mx4jLoader</span>.maybeLoad()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* start dynamic config manager */</span></div><div class=\"line\">dynamicConfigHandlers = <span class=\"type\">Map</span>[<span class=\"type\">String</span>, <span class=\"type\">ConfigHandler</span>](<span class=\"type\">ConfigType</span>.<span class=\"type\">Topic</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">TopicConfigHandler</span>(logManager, config),</div><div class=\"line\">                                                   <span class=\"type\">ConfigType</span>.<span class=\"type\">Client</span> -&gt; <span class=\"keyword\">new</span> <span class=\"type\">ClientIdConfigHandler</span>(apis.quotaManagers))</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Apply all existing client configs to the ClientIdConfigHandler to bootstrap the overrides</span></div><div class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> Move this logic to DynamicConfigManager</span></div><div class=\"line\"><span class=\"type\">AdminUtils</span>.fetchAllEntityConfigs(zkUtils, <span class=\"type\">ConfigType</span>.<span class=\"type\">Client</span>).foreach &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> (clientId, properties) =&gt; dynamicConfigHandlers(<span class=\"type\">ConfigType</span>.<span class=\"type\">Client</span>).processConfigChanges(clientId, properties)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Create the config manager. start listening to notifications</span></div><div class=\"line\">dynamicConfigManager = <span class=\"keyword\">new</span> <span class=\"type\">DynamicConfigManager</span>(zkUtils, dynamicConfigHandlers)</div><div class=\"line\">dynamicConfigManager.startup()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* tell everyone we are alive */</span></div><div class=\"line\"><span class=\"keyword\">val</span> listeners = config.advertisedListeners.map &#123;<span class=\"keyword\">case</span>(protocol, endpoint) =&gt;</div><div class=\"line\">  <span class=\"keyword\">if</span> (endpoint.port == <span class=\"number\">0</span>)</div><div class=\"line\">    (protocol, <span class=\"type\">EndPoint</span>(endpoint.host, socketServer.boundPort(protocol), endpoint.protocolType))</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">    (protocol, endpoint)</div><div class=\"line\">&#125;</div><div class=\"line\">kafkaHealthcheck = <span class=\"keyword\">new</span> <span class=\"type\">KafkaHealthcheck</span>(config.brokerId, listeners, zkUtils, config.rack,</div><div class=\"line\">  config.interBrokerProtocolVersion)</div><div class=\"line\">kafkaHealthcheck.startup()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Now that the broker id is successfully registered via KafkaHealthcheck, checkpoint it</span></div><div class=\"line\">checkpointBrokerId(config.brokerId)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* register broker metrics */</span></div><div class=\"line\">registerStats()</div><div class=\"line\"></div><div class=\"line\">shutdownLatch = <span class=\"keyword\">new</span> <span class=\"type\">CountDownLatch</span>(<span class=\"number\">1</span>)</div><div class=\"line\">startupComplete.set(<span class=\"literal\">true</span>)</div><div class=\"line\">isStartingUp.set(<span class=\"literal\">false</span>)</div><div class=\"line\"><span class=\"type\">AppInfoParser</span>.registerAppInfo(jmxPrefix, config.brokerId.toString)</div><div class=\"line\">info(<span class=\"string\">\"started\"</span>)</div></pre></td></tr></table></figure>\n<ol>\n<li>启动jmx，通过参数kafka_mx4jenable控制是否启用jmx，默认为false。</li>\n<li>初始化TopicConfigHandler和ClientIdConfigHandler，前者用于处理zk上的topic配置变更信息，后者用于zk上的clientId配置变更信息。</li>\n<li>启动DynamicConfigManager，通过动态配置管理器，监听zk上的配置节点变化，并根据具体变化的配置信息调用TopicConfigHandler或ClientIdConfigHandler更新配置。</li>\n<li>启动KafkaHealthcheck，用于在zk上注册当前broker节点信息，以便节点退出时其他broker和consumer能监听到，目前的节点健康度判断比较简单，只是单纯的看zk上的节点是否存在。</li>\n<li>最后，在本地对当前broker做个checkpoint，并注册jmx bean信息</li>\n</ol>"},{"title":"Storm的消息可靠处理机制","date":"2015-11-05T12:51:50.000Z","_content":"\n简介\n--\n提交进入Storm运行的topology实际上是一个有向无环图（DAG），其中的节点是由spout和bolt组成，边则可以理解为消息从一个节点到传输到另一个节点的过程。对于spout产生的tuple，只有在topology上处理完毕后，才认为这个tuple被storm可靠处理。\n\nStorm提供了可靠处理消息（storm中的通用名叫tuple）的框架，我们在写一个topology程序时，若需要保证spout产生的消息的可靠处理，需要做到两点：\n\n第一是spout/bolt每生成一个新的tuple都告诉storm一下（其中spout发出的tuple有个id叫rootId），从而让storm能够追踪rootId和每个衍生tuple的处理状态。\n\n第二是每个tuple被下游bolt处理完毕后，无论处理成功或失败，也再告诉storm一下，从而让storm知道是否需要spout重新发送rootId。\n\n做了这两件事，storm就能知道这个tuple是否被处理完毕。如果是处理成功了的，就说明最初从spout发出的tuple（rootId）已在topology中处理完毕，无需spout重新发送。如果是处理失败的，storm则会告知spout重新发送rootId这个tuple。\n\n在程序中实现消息可靠处理\n--\n那在写一个topology时，我们该如何做上面提到的两件事呢？\n<!--more-->\nStorm提供了BaseRichBolt抽象类（实现了IRichBolt接口），一个示例bolt如下：\n```java\npublic class SplitSentence extends BaseRichBolt {\n    OutputCollector _collector;\n \n    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {\n        _collector = collector;\n    }\n \n    public void execute(Tuple t) {\n        String sentence = t.getString(0);\n        for(String word: sentence.split(\" \")) {\n            //1. 告诉storm生成了一个新的tuple，并且这个tuple的锚点是tuple\n            _collector.emit(t, new Values(word));\n        }\n        _collector.ack(t); //2. 告诉storm，t这个tuple已处理完毕\n    }\n \n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"word\"));\n    }\n}\n```\n\n这段代码就做了这两件事，一是输出新的tuple并告知storm，二是对当前tuple t处理完毕后，告知storm。\n\n对于第一件事，这里要注意的是，在BaseRichBolt中输出一个新的tuple（示例中是word）时，必须指定其锚点（即当前bolt正在处理的tuple），因为输出新的tuple会继续被下游bolt处理，这个锚点tuple和下游tuple之间的路径就是DAG的一条边。如果不指定锚点，则可以理解为storm不知道这条边的存在，也就不会对新输出的tuple进行跟踪了。\n\n如果我们确实不需要保证消息的可靠处理，则使用以下方式输出新tuple即可。\n\n```java\n_collector.emit(new Values(word));\n```\n\n另外，一个tuple的锚点tuple可以有多个，比如如下代码，新输出的tuple的锚点就是tuple1和tuple2。\n\n```java\nList anchors = new ArrayList();\nanchors.add(tuple1);\nanchors.add(tuple2);\n_collector.emit(anchors, new Values(1, 2, 3));\n```\n\n对于第二件事，通过调用OutputCollector的ack或fail方法，即可告知storm当前tuple的处理结果。比如，假设我们在bolt中做一些操作的时候出现异常（比如访问redis、DB、hdfs等），可以调fail方法快速重放rootId，避免等到storm判断这个tuple处理超时后才重放。\n\n更简便的方式\n--\n很明显，以上方式有几个弊端：\n\n1. 输出新tuple和对tuple的ack/fail操作需要我们自己维护，代价很高，容易遗忘。\n\n2. storm是在内存中维护每个tuple的处理状态，如果只对tuple进行锚点标记但处理完毕后忘记ack/fail，在tuple量非常大时，有内存溢出的风险。\n\n鉴于此，storm提供了BaseBasicBolt抽象类（实现了IBasicBolt接口）来帮助我们实现对每个tuple的锚点标记和ack/fail。\n前面的例子可改写如下：\n\n```java\npublic class SplitSentence extends BaseBasicBolt {\n    public void execute(Tuple tuple, BasicOutputCollector collector) {\n        String sentence = tuple.getString(0);\n        for(String word: sentence.split(\" \")) {\n            collector.emit(new Values(word));\n        }\n    }\n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"word\"));\n    }\n}\n```\n\n可见，在代码中，我们只需要关心bolt的处理逻辑即可，至于标记锚点和ack/fail，均不用关心。\n\n细究一下storm框架对IBasicBolt的处理可知，在创建topology时，IBasicBolt是被封装在BasicBoltExecutor类（实现了IRichBolt接口）中处理的。\n\n构建topology时的setBolt方法：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20151105/bolt-executor.png)\n\n原理&示例\n--\n刚刚提到对每个topology，storm都在内存中维护其tuple的处理状态，那么对于一个大规模集群，storm是如何高效的维护大量tuple的处理状态的呢？\n\n其实，topology在运行时，内部有一组特殊的任务叫acker，专门用来做tuple的ack/fail。当一个root tuple（spout输出的tuple）在DAG中处理完毕后，acker会向产生该tuple的spout发送消息来ack这个tuple。\n\n我们可通过参数Config.TOPOLOGY_ACKER_EXECUTORS指定topology中的acker任务的数量，默认是与topology中的worker数相同，在处理大量消息的场景下，可以通过此参数增加topology的acker任务数，以提高对message做ack/fail的效率。\n\nstorm通过给每个tuple设置一个全局唯一id，并在输出tuple和tuple处理完毕时收集tuple的id，并进行异或运算，巧妙的实现tuple状态的维护。先看下图示例：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20151105/storm-ack.png)\n\n在这个topology其中包含一个spout，3个bolt和一个acker bolt，紫色线表示tuple的流向，绿色线表示每个bolt处理完tuple后的ack/fail调用，红色线表示acker回调spout的ack/fail方法来标记root tuple处理完毕。\n\n以下是storm的ack框架对tuple的处理状态维护过程说明：\n\n第(1)(2)步，spout发送T1到bolt1，发送T2到bolt2，T1和T2具有相同的内容（可以认为都把spout的输出作为自己的输入）。每条消息都会有一个全局唯一id，T1的锚点为<rootId,T1>，T2的锚点为<rootId,T2>。\n\n第(3)步，spout发送完毕T1、T2后，在acker中注册一条记录rootId=T1^T2。\n\n第(4)(5)步，bolt1收到T1处理完毕后对T1进行ack并发送T3,T4到bolt3，所以在acker中注册T1,T3,T4，acker中的跟踪项变为rootId=T1^T2^T1^T3^T4=T2^T3^T4\n\n第(6)(7)步，bolt2收到T2处理完毕后对T2进行ack并发送T5,T6,T7到bolt4，所以在acker中注册T2,T5,T6,T7，acker中的跟踪项变为rootId=T2^T3^T4^T2^T5^T6^T7=T3^T4^T5^T6^T7\n\n第(8)步，bolt3收到T3,T4处理完毕后对T3,T4进行ack，没有输出新的tuple，所以在acker中注册T3,T4，acker中的跟踪项变为rootId=T3^T4^T5^T6^T7^T3^T4=T5^T6^T7\n\n第(9)步，bolt4收到T5,T6,T7处理完毕后对T5,T6,T7进行ack，没有输出新的tuple，所以在acker中注册T5,T6,T7，acker中的跟踪项变为rootId=T5^T6^T7^T5^T6^T7=0\n\n第(10)步，acker bolt发现rootId对应的追踪值为0，说明该rootId对应的源消息以及衍生出来的所有消息（bolt1,bolt2新输出的消息）都被成功处理完毕。于是acker bolt会回调spout的ack方法，标识消息rootId已被topology处理成功。\n","source":"_posts/Storm的消息可靠处理机制.md","raw":"---\ntitle: Storm的消息可靠处理机制\ndate: 2015-11-05 20:51:50\ntags:\n- storm\n- 实时计算\ncategories:\n- Storm\n---\n\n简介\n--\n提交进入Storm运行的topology实际上是一个有向无环图（DAG），其中的节点是由spout和bolt组成，边则可以理解为消息从一个节点到传输到另一个节点的过程。对于spout产生的tuple，只有在topology上处理完毕后，才认为这个tuple被storm可靠处理。\n\nStorm提供了可靠处理消息（storm中的通用名叫tuple）的框架，我们在写一个topology程序时，若需要保证spout产生的消息的可靠处理，需要做到两点：\n\n第一是spout/bolt每生成一个新的tuple都告诉storm一下（其中spout发出的tuple有个id叫rootId），从而让storm能够追踪rootId和每个衍生tuple的处理状态。\n\n第二是每个tuple被下游bolt处理完毕后，无论处理成功或失败，也再告诉storm一下，从而让storm知道是否需要spout重新发送rootId。\n\n做了这两件事，storm就能知道这个tuple是否被处理完毕。如果是处理成功了的，就说明最初从spout发出的tuple（rootId）已在topology中处理完毕，无需spout重新发送。如果是处理失败的，storm则会告知spout重新发送rootId这个tuple。\n\n在程序中实现消息可靠处理\n--\n那在写一个topology时，我们该如何做上面提到的两件事呢？\n<!--more-->\nStorm提供了BaseRichBolt抽象类（实现了IRichBolt接口），一个示例bolt如下：\n```java\npublic class SplitSentence extends BaseRichBolt {\n    OutputCollector _collector;\n \n    public void prepare(Map conf, TopologyContext context, OutputCollector collector) {\n        _collector = collector;\n    }\n \n    public void execute(Tuple t) {\n        String sentence = t.getString(0);\n        for(String word: sentence.split(\" \")) {\n            //1. 告诉storm生成了一个新的tuple，并且这个tuple的锚点是tuple\n            _collector.emit(t, new Values(word));\n        }\n        _collector.ack(t); //2. 告诉storm，t这个tuple已处理完毕\n    }\n \n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"word\"));\n    }\n}\n```\n\n这段代码就做了这两件事，一是输出新的tuple并告知storm，二是对当前tuple t处理完毕后，告知storm。\n\n对于第一件事，这里要注意的是，在BaseRichBolt中输出一个新的tuple（示例中是word）时，必须指定其锚点（即当前bolt正在处理的tuple），因为输出新的tuple会继续被下游bolt处理，这个锚点tuple和下游tuple之间的路径就是DAG的一条边。如果不指定锚点，则可以理解为storm不知道这条边的存在，也就不会对新输出的tuple进行跟踪了。\n\n如果我们确实不需要保证消息的可靠处理，则使用以下方式输出新tuple即可。\n\n```java\n_collector.emit(new Values(word));\n```\n\n另外，一个tuple的锚点tuple可以有多个，比如如下代码，新输出的tuple的锚点就是tuple1和tuple2。\n\n```java\nList anchors = new ArrayList();\nanchors.add(tuple1);\nanchors.add(tuple2);\n_collector.emit(anchors, new Values(1, 2, 3));\n```\n\n对于第二件事，通过调用OutputCollector的ack或fail方法，即可告知storm当前tuple的处理结果。比如，假设我们在bolt中做一些操作的时候出现异常（比如访问redis、DB、hdfs等），可以调fail方法快速重放rootId，避免等到storm判断这个tuple处理超时后才重放。\n\n更简便的方式\n--\n很明显，以上方式有几个弊端：\n\n1. 输出新tuple和对tuple的ack/fail操作需要我们自己维护，代价很高，容易遗忘。\n\n2. storm是在内存中维护每个tuple的处理状态，如果只对tuple进行锚点标记但处理完毕后忘记ack/fail，在tuple量非常大时，有内存溢出的风险。\n\n鉴于此，storm提供了BaseBasicBolt抽象类（实现了IBasicBolt接口）来帮助我们实现对每个tuple的锚点标记和ack/fail。\n前面的例子可改写如下：\n\n```java\npublic class SplitSentence extends BaseBasicBolt {\n    public void execute(Tuple tuple, BasicOutputCollector collector) {\n        String sentence = tuple.getString(0);\n        for(String word: sentence.split(\" \")) {\n            collector.emit(new Values(word));\n        }\n    }\n    public void declareOutputFields(OutputFieldsDeclarer declarer) {\n        declarer.declare(new Fields(\"word\"));\n    }\n}\n```\n\n可见，在代码中，我们只需要关心bolt的处理逻辑即可，至于标记锚点和ack/fail，均不用关心。\n\n细究一下storm框架对IBasicBolt的处理可知，在创建topology时，IBasicBolt是被封装在BasicBoltExecutor类（实现了IRichBolt接口）中处理的。\n\n构建topology时的setBolt方法：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20151105/bolt-executor.png)\n\n原理&示例\n--\n刚刚提到对每个topology，storm都在内存中维护其tuple的处理状态，那么对于一个大规模集群，storm是如何高效的维护大量tuple的处理状态的呢？\n\n其实，topology在运行时，内部有一组特殊的任务叫acker，专门用来做tuple的ack/fail。当一个root tuple（spout输出的tuple）在DAG中处理完毕后，acker会向产生该tuple的spout发送消息来ack这个tuple。\n\n我们可通过参数Config.TOPOLOGY_ACKER_EXECUTORS指定topology中的acker任务的数量，默认是与topology中的worker数相同，在处理大量消息的场景下，可以通过此参数增加topology的acker任务数，以提高对message做ack/fail的效率。\n\nstorm通过给每个tuple设置一个全局唯一id，并在输出tuple和tuple处理完毕时收集tuple的id，并进行异或运算，巧妙的实现tuple状态的维护。先看下图示例：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20151105/storm-ack.png)\n\n在这个topology其中包含一个spout，3个bolt和一个acker bolt，紫色线表示tuple的流向，绿色线表示每个bolt处理完tuple后的ack/fail调用，红色线表示acker回调spout的ack/fail方法来标记root tuple处理完毕。\n\n以下是storm的ack框架对tuple的处理状态维护过程说明：\n\n第(1)(2)步，spout发送T1到bolt1，发送T2到bolt2，T1和T2具有相同的内容（可以认为都把spout的输出作为自己的输入）。每条消息都会有一个全局唯一id，T1的锚点为<rootId,T1>，T2的锚点为<rootId,T2>。\n\n第(3)步，spout发送完毕T1、T2后，在acker中注册一条记录rootId=T1^T2。\n\n第(4)(5)步，bolt1收到T1处理完毕后对T1进行ack并发送T3,T4到bolt3，所以在acker中注册T1,T3,T4，acker中的跟踪项变为rootId=T1^T2^T1^T3^T4=T2^T3^T4\n\n第(6)(7)步，bolt2收到T2处理完毕后对T2进行ack并发送T5,T6,T7到bolt4，所以在acker中注册T2,T5,T6,T7，acker中的跟踪项变为rootId=T2^T3^T4^T2^T5^T6^T7=T3^T4^T5^T6^T7\n\n第(8)步，bolt3收到T3,T4处理完毕后对T3,T4进行ack，没有输出新的tuple，所以在acker中注册T3,T4，acker中的跟踪项变为rootId=T3^T4^T5^T6^T7^T3^T4=T5^T6^T7\n\n第(9)步，bolt4收到T5,T6,T7处理完毕后对T5,T6,T7进行ack，没有输出新的tuple，所以在acker中注册T5,T6,T7，acker中的跟踪项变为rootId=T5^T6^T7^T5^T6^T7=0\n\n第(10)步，acker bolt发现rootId对应的追踪值为0，说明该rootId对应的源消息以及衍生出来的所有消息（bolt1,bolt2新输出的消息）都被成功处理完毕。于是acker bolt会回调spout的ack方法，标识消息rootId已被topology处理成功。\n","slug":"Storm的消息可靠处理机制","published":1,"updated":"2017-01-23T03:15:42.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxfd000ad968p4t5xfq9","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>提交进入Storm运行的topology实际上是一个有向无环图（DAG），其中的节点是由spout和bolt组成，边则可以理解为消息从一个节点到传输到另一个节点的过程。对于spout产生的tuple，只有在topology上处理完毕后，才认为这个tuple被storm可靠处理。</p>\n<p>Storm提供了可靠处理消息（storm中的通用名叫tuple）的框架，我们在写一个topology程序时，若需要保证spout产生的消息的可靠处理，需要做到两点：</p>\n<p>第一是spout/bolt每生成一个新的tuple都告诉storm一下（其中spout发出的tuple有个id叫rootId），从而让storm能够追踪rootId和每个衍生tuple的处理状态。</p>\n<p>第二是每个tuple被下游bolt处理完毕后，无论处理成功或失败，也再告诉storm一下，从而让storm知道是否需要spout重新发送rootId。</p>\n<p>做了这两件事，storm就能知道这个tuple是否被处理完毕。如果是处理成功了的，就说明最初从spout发出的tuple（rootId）已在topology中处理完毕，无需spout重新发送。如果是处理失败的，storm则会告知spout重新发送rootId这个tuple。</p>\n<h2 id=\"在程序中实现消息可靠处理\"><a href=\"#在程序中实现消息可靠处理\" class=\"headerlink\" title=\"在程序中实现消息可靠处理\"></a>在程序中实现消息可靠处理</h2><p>那在写一个topology时，我们该如何做上面提到的两件事呢？<br><a id=\"more\"></a><br>Storm提供了BaseRichBolt抽象类（实现了IRichBolt接口），一个示例bolt如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseRichBolt</span> </span>&#123;</div><div class=\"line\">    OutputCollector _collector;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(Map conf, TopologyContext context, OutputCollector collector)</span> </span>&#123;</div><div class=\"line\">        _collector = collector;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple t)</span> </span>&#123;</div><div class=\"line\">        String sentence = t.getString(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</div><div class=\"line\">            <span class=\"comment\">//1. 告诉storm生成了一个新的tuple，并且这个tuple的锚点是tuple</span></div><div class=\"line\">            _collector.emit(t, <span class=\"keyword\">new</span> Values(word));</div><div class=\"line\">        &#125;</div><div class=\"line\">        _collector.ack(t); <span class=\"comment\">//2. 告诉storm，t这个tuple已处理完毕</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class=\"line\">        declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码就做了这两件事，一是输出新的tuple并告知storm，二是对当前tuple t处理完毕后，告知storm。</p>\n<p>对于第一件事，这里要注意的是，在BaseRichBolt中输出一个新的tuple（示例中是word）时，必须指定其锚点（即当前bolt正在处理的tuple），因为输出新的tuple会继续被下游bolt处理，这个锚点tuple和下游tuple之间的路径就是DAG的一条边。如果不指定锚点，则可以理解为storm不知道这条边的存在，也就不会对新输出的tuple进行跟踪了。</p>\n<p>如果我们确实不需要保证消息的可靠处理，则使用以下方式输出新tuple即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_collector.emit(<span class=\"keyword\">new</span> Values(word));</div></pre></td></tr></table></figure>\n<p>另外，一个tuple的锚点tuple可以有多个，比如如下代码，新输出的tuple的锚点就是tuple1和tuple2。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List anchors = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">anchors.add(tuple1);</div><div class=\"line\">anchors.add(tuple2);</div><div class=\"line\">_collector.emit(anchors, <span class=\"keyword\">new</span> Values(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</div></pre></td></tr></table></figure>\n<p>对于第二件事，通过调用OutputCollector的ack或fail方法，即可告知storm当前tuple的处理结果。比如，假设我们在bolt中做一些操作的时候出现异常（比如访问redis、DB、hdfs等），可以调fail方法快速重放rootId，避免等到storm判断这个tuple处理超时后才重放。</p>\n<h2 id=\"更简便的方式\"><a href=\"#更简便的方式\" class=\"headerlink\" title=\"更简便的方式\"></a>更简便的方式</h2><p>很明显，以上方式有几个弊端：</p>\n<ol>\n<li><p>输出新tuple和对tuple的ack/fail操作需要我们自己维护，代价很高，容易遗忘。</p>\n</li>\n<li><p>storm是在内存中维护每个tuple的处理状态，如果只对tuple进行锚点标记但处理完毕后忘记ack/fail，在tuple量非常大时，有内存溢出的风险。</p>\n</li>\n</ol>\n<p>鉴于此，storm提供了BaseBasicBolt抽象类（实现了IBasicBolt接口）来帮助我们实现对每个tuple的锚点标记和ack/fail。<br>前面的例子可改写如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseBasicBolt</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple tuple, BasicOutputCollector collector)</span> </span>&#123;</div><div class=\"line\">        String sentence = tuple.getString(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</div><div class=\"line\">            collector.emit(<span class=\"keyword\">new</span> Values(word));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class=\"line\">        declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可见，在代码中，我们只需要关心bolt的处理逻辑即可，至于标记锚点和ack/fail，均不用关心。</p>\n<p>细究一下storm框架对IBasicBolt的处理可知，在创建topology时，IBasicBolt是被封装在BasicBoltExecutor类（实现了IRichBolt接口）中处理的。</p>\n<p>构建topology时的setBolt方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20151105/bolt-executor.png\" alt=\"\"></p>\n<h2 id=\"原理-amp-示例\"><a href=\"#原理-amp-示例\" class=\"headerlink\" title=\"原理&amp;示例\"></a>原理&amp;示例</h2><p>刚刚提到对每个topology，storm都在内存中维护其tuple的处理状态，那么对于一个大规模集群，storm是如何高效的维护大量tuple的处理状态的呢？</p>\n<p>其实，topology在运行时，内部有一组特殊的任务叫acker，专门用来做tuple的ack/fail。当一个root tuple（spout输出的tuple）在DAG中处理完毕后，acker会向产生该tuple的spout发送消息来ack这个tuple。</p>\n<p>我们可通过参数Config.TOPOLOGY_ACKER_EXECUTORS指定topology中的acker任务的数量，默认是与topology中的worker数相同，在处理大量消息的场景下，可以通过此参数增加topology的acker任务数，以提高对message做ack/fail的效率。</p>\n<p>storm通过给每个tuple设置一个全局唯一id，并在输出tuple和tuple处理完毕时收集tuple的id，并进行异或运算，巧妙的实现tuple状态的维护。先看下图示例：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20151105/storm-ack.png\" alt=\"\"></p>\n<p>在这个topology其中包含一个spout，3个bolt和一个acker bolt，紫色线表示tuple的流向，绿色线表示每个bolt处理完tuple后的ack/fail调用，红色线表示acker回调spout的ack/fail方法来标记root tuple处理完毕。</p>\n<p>以下是storm的ack框架对tuple的处理状态维护过程说明：</p>\n<p>第(1)(2)步，spout发送T1到bolt1，发送T2到bolt2，T1和T2具有相同的内容（可以认为都把spout的输出作为自己的输入）。每条消息都会有一个全局唯一id，T1的锚点为<rootid,t1>，T2的锚点为<rootid,t2>。</rootid,t2></rootid,t1></p>\n<p>第(3)步，spout发送完毕T1、T2后，在acker中注册一条记录rootId=T1^T2。</p>\n<p>第(4)(5)步，bolt1收到T1处理完毕后对T1进行ack并发送T3,T4到bolt3，所以在acker中注册T1,T3,T4，acker中的跟踪项变为rootId=T1^T2^T1^T3^T4=T2^T3^T4</p>\n<p>第(6)(7)步，bolt2收到T2处理完毕后对T2进行ack并发送T5,T6,T7到bolt4，所以在acker中注册T2,T5,T6,T7，acker中的跟踪项变为rootId=T2^T3^T4^T2^T5^T6^T7=T3^T4^T5^T6^T7</p>\n<p>第(8)步，bolt3收到T3,T4处理完毕后对T3,T4进行ack，没有输出新的tuple，所以在acker中注册T3,T4，acker中的跟踪项变为rootId=T3^T4^T5^T6^T7^T3^T4=T5^T6^T7</p>\n<p>第(9)步，bolt4收到T5,T6,T7处理完毕后对T5,T6,T7进行ack，没有输出新的tuple，所以在acker中注册T5,T6,T7，acker中的跟踪项变为rootId=T5^T6^T7^T5^T6^T7=0</p>\n<p>第(10)步，acker bolt发现rootId对应的追踪值为0，说明该rootId对应的源消息以及衍生出来的所有消息（bolt1,bolt2新输出的消息）都被成功处理完毕。于是acker bolt会回调spout的ack方法，标识消息rootId已被topology处理成功。</p>\n","excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>提交进入Storm运行的topology实际上是一个有向无环图（DAG），其中的节点是由spout和bolt组成，边则可以理解为消息从一个节点到传输到另一个节点的过程。对于spout产生的tuple，只有在topology上处理完毕后，才认为这个tuple被storm可靠处理。</p>\n<p>Storm提供了可靠处理消息（storm中的通用名叫tuple）的框架，我们在写一个topology程序时，若需要保证spout产生的消息的可靠处理，需要做到两点：</p>\n<p>第一是spout/bolt每生成一个新的tuple都告诉storm一下（其中spout发出的tuple有个id叫rootId），从而让storm能够追踪rootId和每个衍生tuple的处理状态。</p>\n<p>第二是每个tuple被下游bolt处理完毕后，无论处理成功或失败，也再告诉storm一下，从而让storm知道是否需要spout重新发送rootId。</p>\n<p>做了这两件事，storm就能知道这个tuple是否被处理完毕。如果是处理成功了的，就说明最初从spout发出的tuple（rootId）已在topology中处理完毕，无需spout重新发送。如果是处理失败的，storm则会告知spout重新发送rootId这个tuple。</p>\n<h2 id=\"在程序中实现消息可靠处理\"><a href=\"#在程序中实现消息可靠处理\" class=\"headerlink\" title=\"在程序中实现消息可靠处理\"></a>在程序中实现消息可靠处理</h2><p>那在写一个topology时，我们该如何做上面提到的两件事呢？<br>","more":"<br>Storm提供了BaseRichBolt抽象类（实现了IRichBolt接口），一个示例bolt如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseRichBolt</span> </span>&#123;</div><div class=\"line\">    OutputCollector _collector;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">(Map conf, TopologyContext context, OutputCollector collector)</span> </span>&#123;</div><div class=\"line\">        _collector = collector;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple t)</span> </span>&#123;</div><div class=\"line\">        String sentence = t.getString(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</div><div class=\"line\">            <span class=\"comment\">//1. 告诉storm生成了一个新的tuple，并且这个tuple的锚点是tuple</span></div><div class=\"line\">            _collector.emit(t, <span class=\"keyword\">new</span> Values(word));</div><div class=\"line\">        &#125;</div><div class=\"line\">        _collector.ack(t); <span class=\"comment\">//2. 告诉storm，t这个tuple已处理完毕</span></div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class=\"line\">        declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这段代码就做了这两件事，一是输出新的tuple并告知storm，二是对当前tuple t处理完毕后，告知storm。</p>\n<p>对于第一件事，这里要注意的是，在BaseRichBolt中输出一个新的tuple（示例中是word）时，必须指定其锚点（即当前bolt正在处理的tuple），因为输出新的tuple会继续被下游bolt处理，这个锚点tuple和下游tuple之间的路径就是DAG的一条边。如果不指定锚点，则可以理解为storm不知道这条边的存在，也就不会对新输出的tuple进行跟踪了。</p>\n<p>如果我们确实不需要保证消息的可靠处理，则使用以下方式输出新tuple即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">_collector.emit(<span class=\"keyword\">new</span> Values(word));</div></pre></td></tr></table></figure>\n<p>另外，一个tuple的锚点tuple可以有多个，比如如下代码，新输出的tuple的锚点就是tuple1和tuple2。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">List anchors = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\">anchors.add(tuple1);</div><div class=\"line\">anchors.add(tuple2);</div><div class=\"line\">_collector.emit(anchors, <span class=\"keyword\">new</span> Values(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</div></pre></td></tr></table></figure>\n<p>对于第二件事，通过调用OutputCollector的ack或fail方法，即可告知storm当前tuple的处理结果。比如，假设我们在bolt中做一些操作的时候出现异常（比如访问redis、DB、hdfs等），可以调fail方法快速重放rootId，避免等到storm判断这个tuple处理超时后才重放。</p>\n<h2 id=\"更简便的方式\"><a href=\"#更简便的方式\" class=\"headerlink\" title=\"更简便的方式\"></a>更简便的方式</h2><p>很明显，以上方式有几个弊端：</p>\n<ol>\n<li><p>输出新tuple和对tuple的ack/fail操作需要我们自己维护，代价很高，容易遗忘。</p>\n</li>\n<li><p>storm是在内存中维护每个tuple的处理状态，如果只对tuple进行锚点标记但处理完毕后忘记ack/fail，在tuple量非常大时，有内存溢出的风险。</p>\n</li>\n</ol>\n<p>鉴于此，storm提供了BaseBasicBolt抽象类（实现了IBasicBolt接口）来帮助我们实现对每个tuple的锚点标记和ack/fail。<br>前面的例子可改写如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SplitSentence</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseBasicBolt</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(Tuple tuple, BasicOutputCollector collector)</span> </span>&#123;</div><div class=\"line\">        String sentence = tuple.getString(<span class=\"number\">0</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span>(String word: sentence.split(<span class=\"string\">\" \"</span>)) &#123;</div><div class=\"line\">            collector.emit(<span class=\"keyword\">new</span> Values(word));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">declareOutputFields</span><span class=\"params\">(OutputFieldsDeclarer declarer)</span> </span>&#123;</div><div class=\"line\">        declarer.declare(<span class=\"keyword\">new</span> Fields(<span class=\"string\">\"word\"</span>));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可见，在代码中，我们只需要关心bolt的处理逻辑即可，至于标记锚点和ack/fail，均不用关心。</p>\n<p>细究一下storm框架对IBasicBolt的处理可知，在创建topology时，IBasicBolt是被封装在BasicBoltExecutor类（实现了IRichBolt接口）中处理的。</p>\n<p>构建topology时的setBolt方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20151105/bolt-executor.png\" alt=\"\"></p>\n<h2 id=\"原理-amp-示例\"><a href=\"#原理-amp-示例\" class=\"headerlink\" title=\"原理&amp;示例\"></a>原理&amp;示例</h2><p>刚刚提到对每个topology，storm都在内存中维护其tuple的处理状态，那么对于一个大规模集群，storm是如何高效的维护大量tuple的处理状态的呢？</p>\n<p>其实，topology在运行时，内部有一组特殊的任务叫acker，专门用来做tuple的ack/fail。当一个root tuple（spout输出的tuple）在DAG中处理完毕后，acker会向产生该tuple的spout发送消息来ack这个tuple。</p>\n<p>我们可通过参数Config.TOPOLOGY_ACKER_EXECUTORS指定topology中的acker任务的数量，默认是与topology中的worker数相同，在处理大量消息的场景下，可以通过此参数增加topology的acker任务数，以提高对message做ack/fail的效率。</p>\n<p>storm通过给每个tuple设置一个全局唯一id，并在输出tuple和tuple处理完毕时收集tuple的id，并进行异或运算，巧妙的实现tuple状态的维护。先看下图示例：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20151105/storm-ack.png\" alt=\"\"></p>\n<p>在这个topology其中包含一个spout，3个bolt和一个acker bolt，紫色线表示tuple的流向，绿色线表示每个bolt处理完tuple后的ack/fail调用，红色线表示acker回调spout的ack/fail方法来标记root tuple处理完毕。</p>\n<p>以下是storm的ack框架对tuple的处理状态维护过程说明：</p>\n<p>第(1)(2)步，spout发送T1到bolt1，发送T2到bolt2，T1和T2具有相同的内容（可以认为都把spout的输出作为自己的输入）。每条消息都会有一个全局唯一id，T1的锚点为<rootId,T1>，T2的锚点为<rootId,T2>。</p>\n<p>第(3)步，spout发送完毕T1、T2后，在acker中注册一条记录rootId=T1^T2。</p>\n<p>第(4)(5)步，bolt1收到T1处理完毕后对T1进行ack并发送T3,T4到bolt3，所以在acker中注册T1,T3,T4，acker中的跟踪项变为rootId=T1^T2^T1^T3^T4=T2^T3^T4</p>\n<p>第(6)(7)步，bolt2收到T2处理完毕后对T2进行ack并发送T5,T6,T7到bolt4，所以在acker中注册T2,T5,T6,T7，acker中的跟踪项变为rootId=T2^T3^T4^T2^T5^T6^T7=T3^T4^T5^T6^T7</p>\n<p>第(8)步，bolt3收到T3,T4处理完毕后对T3,T4进行ack，没有输出新的tuple，所以在acker中注册T3,T4，acker中的跟踪项变为rootId=T3^T4^T5^T6^T7^T3^T4=T5^T6^T7</p>\n<p>第(9)步，bolt4收到T5,T6,T7处理完毕后对T5,T6,T7进行ack，没有输出新的tuple，所以在acker中注册T5,T6,T7，acker中的跟踪项变为rootId=T5^T6^T7^T5^T6^T7=0</p>\n<p>第(10)步，acker bolt发现rootId对应的追踪值为0，说明该rootId对应的源消息以及衍生出来的所有消息（bolt1,bolt2新输出的消息）都被成功处理完毕。于是acker bolt会回调spout的ack方法，标识消息rootId已被topology处理成功。</p>"},{"title":"mac系统下hadoop-2.7源码编译、导入eclipse及打包","date":"2015-05-18T02:00:44.000Z","_content":"\n编译环境要求\n--\n\n> JDK1.7+  \n> MAVEN 3.0以上版本  \n> 如果需要编译native code，还需要CMake 2.6、Zlib devel、openssl devel（mac下一般安装了xcode后应该都会有这些包）。\n\n编译方法\n--\n\n解压源码包hadoop-2.7.0-src.tar.gz，iterm下进入文件夹hadoop-2.7.0-src，然后根据需要执行相应的mvn命令就可以了。\n\n> 仅编译：mvn compile  \n> 打包生成jar：mvn package  \n> 生成eclipse项目：eclipse:eclipse -DskipTests，加上-DskipTests可跳过test阶段。\n\n期间遇到几个问题，记录如下。\n\n问题记录\n--\n\n先执行mvn eclipse:eclipse -DskipTest生成eclipse项目，执行到一半时，提示下面的报错：\n\n<font color='red'>‘protoc –version’ did not return a version -> [Help 1]</font>\n\n意思也就是是找不到protoc命令，安装protocolbuffer后重试，又提示错误：\n\n<font color='red'>protoc version is ‘libprotoc 2.6.1′, expected version is ’2.5.0′</font>\n\n看上去是protocolbuffer版本问题，hadoop需要的版本是2.5.0，而系统安装的是2.6.1，查了很多资料，都是说protocolbuffer版本太低后来升到2.5的，而我这是2.6.1的版本，难不成还得降回去，不至于吧。因此，猜测这个版本限制是在pom.xml中写死的，于是grep了一下，发现果然在hadoop-project/pom.xml中配置了编译时使用的pb版本。\n\n<font color='red'>\\<protobuf.version>2.5.0\\</protobuf.version></font>\n\n把以上配置项改为2.6.1，再重新执行生成eclipse项目的命令就OK了。\n\n导入eclipse及打包\n--\n\n生成eclipse项目后，从eclipse里import existing project into workspace，选择hadoop-2.7.0-src目录，就会把所有代码模块导入eclipse了。接下来就可以看代码并修改了，比如增加一些日志信息等。\n\n代码修改完毕后，可以再打出一个新的hadoop-distribution包来验证代码修改效果。\n\n在hadoop-2.7.0-src目录下执行命令：<font color='red'>mvn package -Pdist -Ptar -Pdocs -skipTests </font>\n\n等上漫长的一段时间，编译成功后，可以到hadoop-dist/target下找到新的jar包。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150518-hadoop%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85/1.png)\n\n补充说明\n--\n\n编译过程需要从maven中央仓库下载大量依赖包，我使用的是oschina的库。\n\n```java\n    <mirror>\n      <id>CN</id>\n      <name>OSChina Central</name>\n      <url>http://maven.oschina.net/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n      <profile>\n    \t<id>oschina</id>\n    \t<repositories>\n    \t\t<repository>\n    \t\t\t<id>nexus</id>\n    \t\t\t<name>local private nexus</name>\n    \t\t\t<url>http://maven.oschina.net/content/groups/public/</url>\n    \t\t\t<releases>\n    \t\t\t\t<enabled>true</enabled>\n    \t\t\t</releases>\n    \t\t\t<snapshots>\n    \t\t\t\t<enabled>false</enabled>\n    \t\t\t</snapshots>\n    \t\t</repository>\n    \t</repositories>\n    \t<pluginRepositories>\n    \t\t<pluginRepository>\n    \t\t\t<id>nexus</id>\n    \t\t\t<name>local private nexus</name>\n    \t\t\t<url>http://maven.oschina.net/content/groups/public/</url>\n    \t\t\t<releases>\n    \t\t\t\t<enabled>true</enabled>\n    \t\t\t</releases>\n    \t\t\t<snapshots>\n    \t\t\t\t<enabled>false</enabled>\n    \t\t\t</snapshots>\n    \t\t</pluginRepository>\n    \t</pluginRepositories>\n      </profile>\n```","source":"_posts/mac系统下hadoop-2-7源码编译、导入eclipse及打包.md","raw":"---\ntitle: mac系统下hadoop-2.7源码编译、导入eclipse及打包\ndate: 2015-05-18 10:00:44\ntags:\n- hadoop\n- eclipse\ncategories:\n- Hadoop\n---\n\n编译环境要求\n--\n\n> JDK1.7+  \n> MAVEN 3.0以上版本  \n> 如果需要编译native code，还需要CMake 2.6、Zlib devel、openssl devel（mac下一般安装了xcode后应该都会有这些包）。\n\n编译方法\n--\n\n解压源码包hadoop-2.7.0-src.tar.gz，iterm下进入文件夹hadoop-2.7.0-src，然后根据需要执行相应的mvn命令就可以了。\n\n> 仅编译：mvn compile  \n> 打包生成jar：mvn package  \n> 生成eclipse项目：eclipse:eclipse -DskipTests，加上-DskipTests可跳过test阶段。\n\n期间遇到几个问题，记录如下。\n\n问题记录\n--\n\n先执行mvn eclipse:eclipse -DskipTest生成eclipse项目，执行到一半时，提示下面的报错：\n\n<font color='red'>‘protoc –version’ did not return a version -> [Help 1]</font>\n\n意思也就是是找不到protoc命令，安装protocolbuffer后重试，又提示错误：\n\n<font color='red'>protoc version is ‘libprotoc 2.6.1′, expected version is ’2.5.0′</font>\n\n看上去是protocolbuffer版本问题，hadoop需要的版本是2.5.0，而系统安装的是2.6.1，查了很多资料，都是说protocolbuffer版本太低后来升到2.5的，而我这是2.6.1的版本，难不成还得降回去，不至于吧。因此，猜测这个版本限制是在pom.xml中写死的，于是grep了一下，发现果然在hadoop-project/pom.xml中配置了编译时使用的pb版本。\n\n<font color='red'>\\<protobuf.version>2.5.0\\</protobuf.version></font>\n\n把以上配置项改为2.6.1，再重新执行生成eclipse项目的命令就OK了。\n\n导入eclipse及打包\n--\n\n生成eclipse项目后，从eclipse里import existing project into workspace，选择hadoop-2.7.0-src目录，就会把所有代码模块导入eclipse了。接下来就可以看代码并修改了，比如增加一些日志信息等。\n\n代码修改完毕后，可以再打出一个新的hadoop-distribution包来验证代码修改效果。\n\n在hadoop-2.7.0-src目录下执行命令：<font color='red'>mvn package -Pdist -Ptar -Pdocs -skipTests </font>\n\n等上漫长的一段时间，编译成功后，可以到hadoop-dist/target下找到新的jar包。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150518-hadoop%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85/1.png)\n\n补充说明\n--\n\n编译过程需要从maven中央仓库下载大量依赖包，我使用的是oschina的库。\n\n```java\n    <mirror>\n      <id>CN</id>\n      <name>OSChina Central</name>\n      <url>http://maven.oschina.net/content/groups/public/</url>\n      <mirrorOf>central</mirrorOf>\n    </mirror>\n      <profile>\n    \t<id>oschina</id>\n    \t<repositories>\n    \t\t<repository>\n    \t\t\t<id>nexus</id>\n    \t\t\t<name>local private nexus</name>\n    \t\t\t<url>http://maven.oschina.net/content/groups/public/</url>\n    \t\t\t<releases>\n    \t\t\t\t<enabled>true</enabled>\n    \t\t\t</releases>\n    \t\t\t<snapshots>\n    \t\t\t\t<enabled>false</enabled>\n    \t\t\t</snapshots>\n    \t\t</repository>\n    \t</repositories>\n    \t<pluginRepositories>\n    \t\t<pluginRepository>\n    \t\t\t<id>nexus</id>\n    \t\t\t<name>local private nexus</name>\n    \t\t\t<url>http://maven.oschina.net/content/groups/public/</url>\n    \t\t\t<releases>\n    \t\t\t\t<enabled>true</enabled>\n    \t\t\t</releases>\n    \t\t\t<snapshots>\n    \t\t\t\t<enabled>false</enabled>\n    \t\t\t</snapshots>\n    \t\t</pluginRepository>\n    \t</pluginRepositories>\n      </profile>\n```","slug":"mac系统下hadoop-2-7源码编译、导入eclipse及打包","published":1,"updated":"2016-07-09T13:07:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxfg000dd968rt4qs251","content":"<h2 id=\"编译环境要求\"><a href=\"#编译环境要求\" class=\"headerlink\" title=\"编译环境要求\"></a>编译环境要求</h2><blockquote>\n<p>JDK1.7+<br>MAVEN 3.0以上版本<br>如果需要编译native code，还需要CMake 2.6、Zlib devel、openssl devel（mac下一般安装了xcode后应该都会有这些包）。</p>\n</blockquote>\n<h2 id=\"编译方法\"><a href=\"#编译方法\" class=\"headerlink\" title=\"编译方法\"></a>编译方法</h2><p>解压源码包hadoop-2.7.0-src.tar.gz，iterm下进入文件夹hadoop-2.7.0-src，然后根据需要执行相应的mvn命令就可以了。</p>\n<blockquote>\n<p>仅编译：mvn compile<br>打包生成jar：mvn package<br>生成eclipse项目：eclipse:eclipse -DskipTests，加上-DskipTests可跳过test阶段。</p>\n</blockquote>\n<p>期间遇到几个问题，记录如下。</p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><p>先执行mvn eclipse:eclipse -DskipTest生成eclipse项目，执行到一半时，提示下面的报错：</p>\n<font color=\"red\">‘protoc –version’ did not return a version -&gt; [Help 1]</font>\n\n<p>意思也就是是找不到protoc命令，安装protocolbuffer后重试，又提示错误：</p>\n<font color=\"red\">protoc version is ‘libprotoc 2.6.1′, expected version is ’2.5.0′</font>\n\n<p>看上去是protocolbuffer版本问题，hadoop需要的版本是2.5.0，而系统安装的是2.6.1，查了很多资料，都是说protocolbuffer版本太低后来升到2.5的，而我这是2.6.1的版本，难不成还得降回去，不至于吧。因此，猜测这个版本限制是在pom.xml中写死的，于是grep了一下，发现果然在hadoop-project/pom.xml中配置了编译时使用的pb版本。</p>\n<font color=\"red\">\\<protobuf.version>2.5.0\\</protobuf.version></font>\n\n<p>把以上配置项改为2.6.1，再重新执行生成eclipse项目的命令就OK了。</p>\n<h2 id=\"导入eclipse及打包\"><a href=\"#导入eclipse及打包\" class=\"headerlink\" title=\"导入eclipse及打包\"></a>导入eclipse及打包</h2><p>生成eclipse项目后，从eclipse里import existing project into workspace，选择hadoop-2.7.0-src目录，就会把所有代码模块导入eclipse了。接下来就可以看代码并修改了，比如增加一些日志信息等。</p>\n<p>代码修改完毕后，可以再打出一个新的hadoop-distribution包来验证代码修改效果。</p>\n<p>在hadoop-2.7.0-src目录下执行命令：<font color=\"red\">mvn package -Pdist -Ptar -Pdocs -skipTests </font></p>\n<p>等上漫长的一段时间，编译成功后，可以到hadoop-dist/target下找到新的jar包。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150518-hadoop%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85/1.png\" alt=\"\"></p>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p>编译过程需要从maven中央仓库下载大量依赖包，我使用的是oschina的库。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mirror&gt;</div><div class=\"line\">  &lt;id&gt;CN&lt;/id&gt;</div><div class=\"line\">  &lt;name&gt;OSChina Central&lt;/name&gt;</div><div class=\"line\">  &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class=\"line\">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</div><div class=\"line\">&lt;/mirror&gt;</div><div class=\"line\">  &lt;profile&gt;</div><div class=\"line\">\t&lt;id&gt;oschina&lt;/id&gt;</div><div class=\"line\">\t&lt;repositories&gt;</div><div class=\"line\">\t\t&lt;repository&gt;</div><div class=\"line\">\t\t\t&lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">\t\t\t&lt;name&gt;local private nexus&lt;/name&gt;</div><div class=\"line\">\t\t\t&lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class=\"line\">\t\t\t&lt;releases&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/releases&gt;</div><div class=\"line\">\t\t\t&lt;snapshots&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;false&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/snapshots&gt;</div><div class=\"line\">\t\t&lt;/repository&gt;</div><div class=\"line\">\t&lt;/repositories&gt;</div><div class=\"line\">\t&lt;pluginRepositories&gt;</div><div class=\"line\">\t\t&lt;pluginRepository&gt;</div><div class=\"line\">\t\t\t&lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">\t\t\t&lt;name&gt;local private nexus&lt;/name&gt;</div><div class=\"line\">\t\t\t&lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class=\"line\">\t\t\t&lt;releases&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/releases&gt;</div><div class=\"line\">\t\t\t&lt;snapshots&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;false&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/snapshots&gt;</div><div class=\"line\">\t\t&lt;/pluginRepository&gt;</div><div class=\"line\">\t&lt;/pluginRepositories&gt;</div><div class=\"line\">  &lt;/profile&gt;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"编译环境要求\"><a href=\"#编译环境要求\" class=\"headerlink\" title=\"编译环境要求\"></a>编译环境要求</h2><blockquote>\n<p>JDK1.7+<br>MAVEN 3.0以上版本<br>如果需要编译native code，还需要CMake 2.6、Zlib devel、openssl devel（mac下一般安装了xcode后应该都会有这些包）。</p>\n</blockquote>\n<h2 id=\"编译方法\"><a href=\"#编译方法\" class=\"headerlink\" title=\"编译方法\"></a>编译方法</h2><p>解压源码包hadoop-2.7.0-src.tar.gz，iterm下进入文件夹hadoop-2.7.0-src，然后根据需要执行相应的mvn命令就可以了。</p>\n<blockquote>\n<p>仅编译：mvn compile<br>打包生成jar：mvn package<br>生成eclipse项目：eclipse:eclipse -DskipTests，加上-DskipTests可跳过test阶段。</p>\n</blockquote>\n<p>期间遇到几个问题，记录如下。</p>\n<h2 id=\"问题记录\"><a href=\"#问题记录\" class=\"headerlink\" title=\"问题记录\"></a>问题记录</h2><p>先执行mvn eclipse:eclipse -DskipTest生成eclipse项目，执行到一半时，提示下面的报错：</p>\n<font color='red'>‘protoc –version’ did not return a version -&gt; [Help 1]</font>\n\n<p>意思也就是是找不到protoc命令，安装protocolbuffer后重试，又提示错误：</p>\n<font color='red'>protoc version is ‘libprotoc 2.6.1′, expected version is ’2.5.0′</font>\n\n<p>看上去是protocolbuffer版本问题，hadoop需要的版本是2.5.0，而系统安装的是2.6.1，查了很多资料，都是说protocolbuffer版本太低后来升到2.5的，而我这是2.6.1的版本，难不成还得降回去，不至于吧。因此，猜测这个版本限制是在pom.xml中写死的，于是grep了一下，发现果然在hadoop-project/pom.xml中配置了编译时使用的pb版本。</p>\n<font color='red'>\\<protobuf.version>2.5.0\\</protobuf.version></font>\n\n<p>把以上配置项改为2.6.1，再重新执行生成eclipse项目的命令就OK了。</p>\n<h2 id=\"导入eclipse及打包\"><a href=\"#导入eclipse及打包\" class=\"headerlink\" title=\"导入eclipse及打包\"></a>导入eclipse及打包</h2><p>生成eclipse项目后，从eclipse里import existing project into workspace，选择hadoop-2.7.0-src目录，就会把所有代码模块导入eclipse了。接下来就可以看代码并修改了，比如增加一些日志信息等。</p>\n<p>代码修改完毕后，可以再打出一个新的hadoop-distribution包来验证代码修改效果。</p>\n<p>在hadoop-2.7.0-src目录下执行命令：<font color='red'>mvn package -Pdist -Ptar -Pdocs -skipTests </font></p>\n<p>等上漫长的一段时间，编译成功后，可以到hadoop-dist/target下找到新的jar包。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150518-hadoop%E7%BC%96%E8%AF%91%E6%89%93%E5%8C%85/1.png\" alt=\"\"></p>\n<h2 id=\"补充说明\"><a href=\"#补充说明\" class=\"headerlink\" title=\"补充说明\"></a>补充说明</h2><p>编译过程需要从maven中央仓库下载大量依赖包，我使用的是oschina的库。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;mirror&gt;</div><div class=\"line\">  &lt;id&gt;CN&lt;/id&gt;</div><div class=\"line\">  &lt;name&gt;OSChina Central&lt;/name&gt;</div><div class=\"line\">  &lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class=\"line\">  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</div><div class=\"line\">&lt;/mirror&gt;</div><div class=\"line\">  &lt;profile&gt;</div><div class=\"line\">\t&lt;id&gt;oschina&lt;/id&gt;</div><div class=\"line\">\t&lt;repositories&gt;</div><div class=\"line\">\t\t&lt;repository&gt;</div><div class=\"line\">\t\t\t&lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">\t\t\t&lt;name&gt;local private nexus&lt;/name&gt;</div><div class=\"line\">\t\t\t&lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class=\"line\">\t\t\t&lt;releases&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/releases&gt;</div><div class=\"line\">\t\t\t&lt;snapshots&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;false&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/snapshots&gt;</div><div class=\"line\">\t\t&lt;/repository&gt;</div><div class=\"line\">\t&lt;/repositories&gt;</div><div class=\"line\">\t&lt;pluginRepositories&gt;</div><div class=\"line\">\t\t&lt;pluginRepository&gt;</div><div class=\"line\">\t\t\t&lt;id&gt;nexus&lt;/id&gt;</div><div class=\"line\">\t\t\t&lt;name&gt;local private nexus&lt;/name&gt;</div><div class=\"line\">\t\t\t&lt;url&gt;http://maven.oschina.net/content/groups/public/&lt;/url&gt;</div><div class=\"line\">\t\t\t&lt;releases&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;true&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/releases&gt;</div><div class=\"line\">\t\t\t&lt;snapshots&gt;</div><div class=\"line\">\t\t\t\t&lt;enabled&gt;false&lt;/enabled&gt;</div><div class=\"line\">\t\t\t&lt;/snapshots&gt;</div><div class=\"line\">\t\t&lt;/pluginRepository&gt;</div><div class=\"line\">\t&lt;/pluginRepositories&gt;</div><div class=\"line\">  &lt;/profile&gt;</div></pre></td></tr></table></figure>"},{"title":"redis服务端连接断开问题诊断","date":"2014-06-01T13:29:28.000Z","_content":"\n问题现象\n--\n\n前段时间，由于线上redis服务器的内存使用率达到了机器总内存的50%以上，导致内存数据的dump持久化一直失败。扩展到多台redis后，应用系统访问redis时，在业务量较少时，时不时会出现以下异常，当业务量较大，redis访问频率很高时，却不会发生这个异常，一时觉得很诡异。\n\n> redis.clients.jedis.exceptions.JedisConnectionException: It seems like server has closed the connection.\n> at redis.clients.util.RedisInputStream.readLine(RedisInputStream.java:90) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Protocol.processInteger(Protocol.java:110) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Protocol.process(Protocol.java:70) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Protocol.read(Protocol.java:131) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Connection.getIntegerReply(Connection.java:188) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Jedis.sismember(Jedis.java:1266) ~[jedis-2.1.0.jar:na]\n\n看提示，应该是服务端主动关闭了连接。查看了新上线的redis服务器的配置，有这么一项：\n\n> \\# Close the connection after a client is idle for N seconds (0 to disable)\n> timeout 120\n\n这项配置指的是客户端连接空闲超过多少秒后，服务端主动关闭连接，默认值0表示服务端永远不主动关闭。而op人员把服务器端的超时时间设置为了120秒。\n\n这就解释了发生这个异常的原因。客户端使用了一个连接池管理访问redis的所有连接，这些连接是长连接，当业务量较小时，客户端部分连接使用率较低，当两次使用之间的间隔超过120秒时，redis服务端就主动关闭了这个连接，而等客户端下次再使用这个连接对象时，发现服务端已经关闭了连接，进而报错。\n\n于是，再查看访问redis的系统（客户端）的配置：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/1.png)\n\n客户端使用的是jedis内置的连接池，看其源码本质上是基于apache commons-pool实现的，其中有一个eviction线程，用于回收idle对象，对于redis连接池来说，也就是回收空闲连接。\n\nJedisPoolConfig类继承自GenericObjectPoolConfig并覆盖了几项关于eviction线程的配置，具体如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.png)\n\n*<font color=red>_timeBetweenEvictionRunsMillis</font>*：eviction线程的运行周期。默认是-1，表示不启动eviction线程。这里设置为30秒。\n\n*<font color=red>_minEvictableIdleTimeMillis</font>*：对象处于idle状态的最长时间，默认是30分钟，这里设置为60秒。\n\n通过客户端的默认配置看，对象的最大空闲时长是小于服务端的配置的，应该不是配置上的问题了。\n\n于是，继续看是不是客户端代码使用上的问题。追踪到客户端代码如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/3.png)\n\n可见，客户端首先尝试从本线程的ThreadLocal对象中获取jedis对象，若获取不到，再从masterJedisPool中取得jedis对象并放入ThreadLocal对象以便下次使用，并且jedis对象使用完毕后，没有从ThreadLocal中清除，也没有returnResource给masterJedisPool。\n\n因此，问题产生的原因就在于此。ThreadLocal中的这个jedis对象被取出后没有return，对于对象池来说是处于非idle状态，因此不会被对象池evict。<font color=red>当业务量大时，这个jedis会被频繁使用，服务端认为这个jedis对应的连接是非空闲的，或者空闲时间达不到120秒，不会主动关闭，所以没什么问题。然而当业务量小时，这个jedis使用频率很低，当两次之间的使用间隔超出120秒时，服务端会主动把这个jedis的连接关闭，第二次调用时，就会出现上面的报错。</font>\n\n从代码开发者的角度来说，这么做的目的是避免频繁从pool中获取jedis对象和return jedis对象以提高性能。\n\n解决方案有两个：\n\n1. 在redis-cli下在线修改redis 的配置，把timeout改回为0，无需重启redis即可直接生效，但redis若重启，配置会恢复。\n\n2. 修改客户端代码，使用完jedis对象后，从ThreadLocal中清除，再返回给连接池。\n\n出于改动成本考虑，先采用了第一种方案，在线修改redis配置后，报错不再出现。","source":"_posts/redis服务端连接断开问题诊断.md","raw":"---\ntitle: redis服务端连接断开问题诊断\ndate: 2014-06-01 21:29:28\ntags:\n- redis\n- 连接断开\ncategories: \n- Redis\n---\n\n问题现象\n--\n\n前段时间，由于线上redis服务器的内存使用率达到了机器总内存的50%以上，导致内存数据的dump持久化一直失败。扩展到多台redis后，应用系统访问redis时，在业务量较少时，时不时会出现以下异常，当业务量较大，redis访问频率很高时，却不会发生这个异常，一时觉得很诡异。\n\n> redis.clients.jedis.exceptions.JedisConnectionException: It seems like server has closed the connection.\n> at redis.clients.util.RedisInputStream.readLine(RedisInputStream.java:90) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Protocol.processInteger(Protocol.java:110) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Protocol.process(Protocol.java:70) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Protocol.read(Protocol.java:131) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Connection.getIntegerReply(Connection.java:188) ~[jedis-2.1.0.jar:na]\n> at redis.clients.jedis.Jedis.sismember(Jedis.java:1266) ~[jedis-2.1.0.jar:na]\n\n看提示，应该是服务端主动关闭了连接。查看了新上线的redis服务器的配置，有这么一项：\n\n> \\# Close the connection after a client is idle for N seconds (0 to disable)\n> timeout 120\n\n这项配置指的是客户端连接空闲超过多少秒后，服务端主动关闭连接，默认值0表示服务端永远不主动关闭。而op人员把服务器端的超时时间设置为了120秒。\n\n这就解释了发生这个异常的原因。客户端使用了一个连接池管理访问redis的所有连接，这些连接是长连接，当业务量较小时，客户端部分连接使用率较低，当两次使用之间的间隔超过120秒时，redis服务端就主动关闭了这个连接，而等客户端下次再使用这个连接对象时，发现服务端已经关闭了连接，进而报错。\n\n于是，再查看访问redis的系统（客户端）的配置：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/1.png)\n\n客户端使用的是jedis内置的连接池，看其源码本质上是基于apache commons-pool实现的，其中有一个eviction线程，用于回收idle对象，对于redis连接池来说，也就是回收空闲连接。\n\nJedisPoolConfig类继承自GenericObjectPoolConfig并覆盖了几项关于eviction线程的配置，具体如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.png)\n\n*<font color=red>_timeBetweenEvictionRunsMillis</font>*：eviction线程的运行周期。默认是-1，表示不启动eviction线程。这里设置为30秒。\n\n*<font color=red>_minEvictableIdleTimeMillis</font>*：对象处于idle状态的最长时间，默认是30分钟，这里设置为60秒。\n\n通过客户端的默认配置看，对象的最大空闲时长是小于服务端的配置的，应该不是配置上的问题了。\n\n于是，继续看是不是客户端代码使用上的问题。追踪到客户端代码如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/3.png)\n\n可见，客户端首先尝试从本线程的ThreadLocal对象中获取jedis对象，若获取不到，再从masterJedisPool中取得jedis对象并放入ThreadLocal对象以便下次使用，并且jedis对象使用完毕后，没有从ThreadLocal中清除，也没有returnResource给masterJedisPool。\n\n因此，问题产生的原因就在于此。ThreadLocal中的这个jedis对象被取出后没有return，对于对象池来说是处于非idle状态，因此不会被对象池evict。<font color=red>当业务量大时，这个jedis会被频繁使用，服务端认为这个jedis对应的连接是非空闲的，或者空闲时间达不到120秒，不会主动关闭，所以没什么问题。然而当业务量小时，这个jedis使用频率很低，当两次之间的使用间隔超出120秒时，服务端会主动把这个jedis的连接关闭，第二次调用时，就会出现上面的报错。</font>\n\n从代码开发者的角度来说，这么做的目的是避免频繁从pool中获取jedis对象和return jedis对象以提高性能。\n\n解决方案有两个：\n\n1. 在redis-cli下在线修改redis 的配置，把timeout改回为0，无需重启redis即可直接生效，但redis若重启，配置会恢复。\n\n2. 修改客户端代码，使用完jedis对象后，从ThreadLocal中清除，再返回给连接池。\n\n出于改动成本考虑，先采用了第一种方案，在线修改redis配置后，报错不再出现。","slug":"redis服务端连接断开问题诊断","published":1,"updated":"2016-07-09T08:39:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxfi000fd968k9gvgxu8","content":"<h2 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h2><p>前段时间，由于线上redis服务器的内存使用率达到了机器总内存的50%以上，导致内存数据的dump持久化一直失败。扩展到多台redis后，应用系统访问redis时，在业务量较少时，时不时会出现以下异常，当业务量较大，redis访问频率很高时，却不会发生这个异常，一时觉得很诡异。</p>\n<blockquote>\n<p>redis.clients.jedis.exceptions.JedisConnectionException: It seems like server has closed the connection.<br>at redis.clients.util.RedisInputStream.readLine(RedisInputStream.java:90) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Protocol.processInteger(Protocol.java:110) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Protocol.process(Protocol.java:70) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Protocol.read(Protocol.java:131) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Connection.getIntegerReply(Connection.java:188) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Jedis.sismember(Jedis.java:1266) ~[jedis-2.1.0.jar:na]</p>\n</blockquote>\n<p>看提示，应该是服务端主动关闭了连接。查看了新上线的redis服务器的配置，有这么一项：</p>\n<blockquote>\n<p># Close the connection after a client is idle for N seconds (0 to disable)<br>timeout 120</p>\n</blockquote>\n<p>这项配置指的是客户端连接空闲超过多少秒后，服务端主动关闭连接，默认值0表示服务端永远不主动关闭。而op人员把服务器端的超时时间设置为了120秒。</p>\n<p>这就解释了发生这个异常的原因。客户端使用了一个连接池管理访问redis的所有连接，这些连接是长连接，当业务量较小时，客户端部分连接使用率较低，当两次使用之间的间隔超过120秒时，redis服务端就主动关闭了这个连接，而等客户端下次再使用这个连接对象时，发现服务端已经关闭了连接，进而报错。</p>\n<p>于是，再查看访问redis的系统（客户端）的配置：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/1.png\" alt=\"\"></p>\n<p>客户端使用的是jedis内置的连接池，看其源码本质上是基于apache commons-pool实现的，其中有一个eviction线程，用于回收idle对象，对于redis连接池来说，也就是回收空闲连接。</p>\n<p>JedisPoolConfig类继承自GenericObjectPoolConfig并覆盖了几项关于eviction线程的配置，具体如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.png\" alt=\"\"></p>\n<p><em><font color=\"red\">_timeBetweenEvictionRunsMillis</font></em>：eviction线程的运行周期。默认是-1，表示不启动eviction线程。这里设置为30秒。</p>\n<p><em><font color=\"red\">_minEvictableIdleTimeMillis</font></em>：对象处于idle状态的最长时间，默认是30分钟，这里设置为60秒。</p>\n<p>通过客户端的默认配置看，对象的最大空闲时长是小于服务端的配置的，应该不是配置上的问题了。</p>\n<p>于是，继续看是不是客户端代码使用上的问题。追踪到客户端代码如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/3.png\" alt=\"\"></p>\n<p>可见，客户端首先尝试从本线程的ThreadLocal对象中获取jedis对象，若获取不到，再从masterJedisPool中取得jedis对象并放入ThreadLocal对象以便下次使用，并且jedis对象使用完毕后，没有从ThreadLocal中清除，也没有returnResource给masterJedisPool。</p>\n<p>因此，问题产生的原因就在于此。ThreadLocal中的这个jedis对象被取出后没有return，对于对象池来说是处于非idle状态，因此不会被对象池evict。<font color=\"red\">当业务量大时，这个jedis会被频繁使用，服务端认为这个jedis对应的连接是非空闲的，或者空闲时间达不到120秒，不会主动关闭，所以没什么问题。然而当业务量小时，这个jedis使用频率很低，当两次之间的使用间隔超出120秒时，服务端会主动把这个jedis的连接关闭，第二次调用时，就会出现上面的报错。</font></p>\n<p>从代码开发者的角度来说，这么做的目的是避免频繁从pool中获取jedis对象和return jedis对象以提高性能。</p>\n<p>解决方案有两个：</p>\n<ol>\n<li><p>在redis-cli下在线修改redis 的配置，把timeout改回为0，无需重启redis即可直接生效，但redis若重启，配置会恢复。</p>\n</li>\n<li><p>修改客户端代码，使用完jedis对象后，从ThreadLocal中清除，再返回给连接池。</p>\n</li>\n</ol>\n<p>出于改动成本考虑，先采用了第一种方案，在线修改redis配置后，报错不再出现。</p>\n","excerpt":"","more":"<h2 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h2><p>前段时间，由于线上redis服务器的内存使用率达到了机器总内存的50%以上，导致内存数据的dump持久化一直失败。扩展到多台redis后，应用系统访问redis时，在业务量较少时，时不时会出现以下异常，当业务量较大，redis访问频率很高时，却不会发生这个异常，一时觉得很诡异。</p>\n<blockquote>\n<p>redis.clients.jedis.exceptions.JedisConnectionException: It seems like server has closed the connection.<br>at redis.clients.util.RedisInputStream.readLine(RedisInputStream.java:90) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Protocol.processInteger(Protocol.java:110) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Protocol.process(Protocol.java:70) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Protocol.read(Protocol.java:131) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Connection.getIntegerReply(Connection.java:188) ~[jedis-2.1.0.jar:na]<br>at redis.clients.jedis.Jedis.sismember(Jedis.java:1266) ~[jedis-2.1.0.jar:na]</p>\n</blockquote>\n<p>看提示，应该是服务端主动关闭了连接。查看了新上线的redis服务器的配置，有这么一项：</p>\n<blockquote>\n<p># Close the connection after a client is idle for N seconds (0 to disable)<br>timeout 120</p>\n</blockquote>\n<p>这项配置指的是客户端连接空闲超过多少秒后，服务端主动关闭连接，默认值0表示服务端永远不主动关闭。而op人员把服务器端的超时时间设置为了120秒。</p>\n<p>这就解释了发生这个异常的原因。客户端使用了一个连接池管理访问redis的所有连接，这些连接是长连接，当业务量较小时，客户端部分连接使用率较低，当两次使用之间的间隔超过120秒时，redis服务端就主动关闭了这个连接，而等客户端下次再使用这个连接对象时，发现服务端已经关闭了连接，进而报错。</p>\n<p>于是，再查看访问redis的系统（客户端）的配置：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/1.png\" alt=\"\"></p>\n<p>客户端使用的是jedis内置的连接池，看其源码本质上是基于apache commons-pool实现的，其中有一个eviction线程，用于回收idle对象，对于redis连接池来说，也就是回收空闲连接。</p>\n<p>JedisPoolConfig类继承自GenericObjectPoolConfig并覆盖了几项关于eviction线程的配置，具体如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/2.png\" alt=\"\"></p>\n<p><em><font color=red>_timeBetweenEvictionRunsMillis</font></em>：eviction线程的运行周期。默认是-1，表示不启动eviction线程。这里设置为30秒。</p>\n<p><em><font color=red>_minEvictableIdleTimeMillis</font></em>：对象处于idle状态的最长时间，默认是30分钟，这里设置为60秒。</p>\n<p>通过客户端的默认配置看，对象的最大空闲时长是小于服务端的配置的，应该不是配置上的问题了。</p>\n<p>于是，继续看是不是客户端代码使用上的问题。追踪到客户端代码如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140601-redis%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/3.png\" alt=\"\"></p>\n<p>可见，客户端首先尝试从本线程的ThreadLocal对象中获取jedis对象，若获取不到，再从masterJedisPool中取得jedis对象并放入ThreadLocal对象以便下次使用，并且jedis对象使用完毕后，没有从ThreadLocal中清除，也没有returnResource给masterJedisPool。</p>\n<p>因此，问题产生的原因就在于此。ThreadLocal中的这个jedis对象被取出后没有return，对于对象池来说是处于非idle状态，因此不会被对象池evict。<font color=red>当业务量大时，这个jedis会被频繁使用，服务端认为这个jedis对应的连接是非空闲的，或者空闲时间达不到120秒，不会主动关闭，所以没什么问题。然而当业务量小时，这个jedis使用频率很低，当两次之间的使用间隔超出120秒时，服务端会主动把这个jedis的连接关闭，第二次调用时，就会出现上面的报错。</font></p>\n<p>从代码开发者的角度来说，这么做的目的是避免频繁从pool中获取jedis对象和return jedis对象以提高性能。</p>\n<p>解决方案有两个：</p>\n<ol>\n<li><p>在redis-cli下在线修改redis 的配置，把timeout改回为0，无需重启redis即可直接生效，但redis若重启，配置会恢复。</p>\n</li>\n<li><p>修改客户端代码，使用完jedis对象后，从ThreadLocal中清除，再返回给连接池。</p>\n</li>\n</ol>\n<p>出于改动成本考虑，先采用了第一种方案，在线修改redis配置后，报错不再出现。</p>\n"},{"title":"Shell中的IFS分隔符使用","date":"2013-01-29T12:41:54.000Z","_content":"\n在linux中，shell把每个 $IFS 字符对待成一个分隔符，且基于这些字符把其他扩展的结果分割。\n  \n工作中需要处理一个文件datafile，文件中有好几列，列与列之间以‘\\3′分割，如下(终端下’\\3′显示为方块)：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20130129/shell.png)\n\n我需要拿到文件中<font color='blue'>第三列为1</font>的数据行再做具体的处理，比如取其中的某一列数据再去其他文件grep数据等等。简单点，直接逐行cat数据吧。 \n \n**脚本如下：**\n\n```c\nfor line in `awk -F\"\\3\" '{if($3==1) print $0}' datafile`\n    do\n        echo $line\ndone\n```\n\n**结果如下：**  \n\n![](https://raw.githubusercontent.com/maohong/picture/master/20130129/shell2.png) \n\n本来是想要逐行打印出来的，可结果却不是我想要的，究其原因，是因为在shell的for循环中，列出集合的item时，默认是以<space>或<tab>或<newline>为分隔符，我们的数据文件中有空格，因此它就以空格分割打印了。\n  \n可以通过显式设置IFS的值来达到我们要的效果，修改后的脚本如下：  \n\n```c\noldifs=$IFS\nIFS=$'\\n'    #change seperator to '\\n' to get a line\nfor line in `awk -F\"\\3\" '{if($3==1) print $0}' datafile`\n    do\n        echo $line\ndone\nIFS=$oldifs #reset seperator\n```\n\n通过先保存当前的IFS变量的值到一个临时变量，再显式设置为我们想要的行分隔符$’\\n’，然后在for循环结束后，再重置IFS的值即可。  \n\n**结果如下：**  \n![](https://raw.githubusercontent.com/maohong/picture/master/20130129/shell3.png)  \n","source":"_posts/shell中的IFS分隔符.md","raw":"---\ntitle: Shell中的IFS分隔符使用\ndate: 2013-01-29 20:41:54\ntags: \n- shell\ncategories: \n- Shell\n---\n\n在linux中，shell把每个 $IFS 字符对待成一个分隔符，且基于这些字符把其他扩展的结果分割。\n  \n工作中需要处理一个文件datafile，文件中有好几列，列与列之间以‘\\3′分割，如下(终端下’\\3′显示为方块)：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20130129/shell.png)\n\n我需要拿到文件中<font color='blue'>第三列为1</font>的数据行再做具体的处理，比如取其中的某一列数据再去其他文件grep数据等等。简单点，直接逐行cat数据吧。 \n \n**脚本如下：**\n\n```c\nfor line in `awk -F\"\\3\" '{if($3==1) print $0}' datafile`\n    do\n        echo $line\ndone\n```\n\n**结果如下：**  \n\n![](https://raw.githubusercontent.com/maohong/picture/master/20130129/shell2.png) \n\n本来是想要逐行打印出来的，可结果却不是我想要的，究其原因，是因为在shell的for循环中，列出集合的item时，默认是以<space>或<tab>或<newline>为分隔符，我们的数据文件中有空格，因此它就以空格分割打印了。\n  \n可以通过显式设置IFS的值来达到我们要的效果，修改后的脚本如下：  \n\n```c\noldifs=$IFS\nIFS=$'\\n'    #change seperator to '\\n' to get a line\nfor line in `awk -F\"\\3\" '{if($3==1) print $0}' datafile`\n    do\n        echo $line\ndone\nIFS=$oldifs #reset seperator\n```\n\n通过先保存当前的IFS变量的值到一个临时变量，再显式设置为我们想要的行分隔符$’\\n’，然后在for循环结束后，再重置IFS的值即可。  \n\n**结果如下：**  \n![](https://raw.githubusercontent.com/maohong/picture/master/20130129/shell3.png)  \n","slug":"shell中的IFS分隔符","published":1,"updated":"2016-07-04T15:52:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxfl000hd968clkp372m","content":"<p>在linux中，shell把每个 $IFS 字符对待成一个分隔符，且基于这些字符把其他扩展的结果分割。</p>\n<p>工作中需要处理一个文件datafile，文件中有好几列，列与列之间以‘\\3′分割，如下(终端下’\\3′显示为方块)：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20130129/shell.png\" alt=\"\"></p>\n<p>我需要拿到文件中<font color=\"blue\">第三列为1</font>的数据行再做具体的处理，比如取其中的某一列数据再去其他文件grep数据等等。简单点，直接逐行cat数据吧。 </p>\n<p><strong>脚本如下：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for line in `awk -F\"\\3\" '&#123;if($3==1) print $0&#125;' datafile`</div><div class=\"line\">    do</div><div class=\"line\">        echo $line</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<p><strong>结果如下：</strong>  </p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20130129/shell2.png\" alt=\"\"> </p>\n<p>本来是想要逐行打印出来的，可结果却不是我想要的，究其原因，是因为在shell的for循环中，列出集合的item时，默认是以<space>或<tab>或<newline>为分隔符，我们的数据文件中有空格，因此它就以空格分割打印了。</newline></tab></space></p>\n<p>可以通过显式设置IFS的值来达到我们要的效果，修改后的脚本如下：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">oldifs=$IFS</div><div class=\"line\">IFS=$'\\n'    #change seperator to '\\n' to get a line</div><div class=\"line\">for line in `awk -F\"\\3\" '&#123;if($3==1) print $0&#125;' datafile`</div><div class=\"line\">    do</div><div class=\"line\">        echo $line</div><div class=\"line\">done</div><div class=\"line\">IFS=$oldifs #reset seperator</div></pre></td></tr></table></figure>\n<p>通过先保存当前的IFS变量的值到一个临时变量，再显式设置为我们想要的行分隔符$’\\n’，然后在for循环结束后，再重置IFS的值即可。  </p>\n<p><strong>结果如下：</strong><br><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20130129/shell3.png\" alt=\"\">  </p>\n","excerpt":"","more":"<p>在linux中，shell把每个 $IFS 字符对待成一个分隔符，且基于这些字符把其他扩展的结果分割。</p>\n<p>工作中需要处理一个文件datafile，文件中有好几列，列与列之间以‘\\3′分割，如下(终端下’\\3′显示为方块)：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20130129/shell.png\" alt=\"\"></p>\n<p>我需要拿到文件中<font color='blue'>第三列为1</font>的数据行再做具体的处理，比如取其中的某一列数据再去其他文件grep数据等等。简单点，直接逐行cat数据吧。 </p>\n<p><strong>脚本如下：</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">for line in `awk -F\"\\3\" '&#123;if($3==1) print $0&#125;' datafile`</div><div class=\"line\">    do</div><div class=\"line\">        echo $line</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<p><strong>结果如下：</strong>  </p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20130129/shell2.png\" alt=\"\"> </p>\n<p>本来是想要逐行打印出来的，可结果却不是我想要的，究其原因，是因为在shell的for循环中，列出集合的item时，默认是以<space>或<tab>或<newline>为分隔符，我们的数据文件中有空格，因此它就以空格分割打印了。</p>\n<p>可以通过显式设置IFS的值来达到我们要的效果，修改后的脚本如下：  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">oldifs=$IFS</div><div class=\"line\">IFS=$'\\n'    #change seperator to '\\n' to get a line</div><div class=\"line\">for line in `awk -F\"\\3\" '&#123;if($3==1) print $0&#125;' datafile`</div><div class=\"line\">    do</div><div class=\"line\">        echo $line</div><div class=\"line\">done</div><div class=\"line\">IFS=$oldifs #reset seperator</div></pre></td></tr></table></figure>\n<p>通过先保存当前的IFS变量的值到一个临时变量，再显式设置为我们想要的行分隔符$’\\n’，然后在for循环结束后，再重置IFS的值即可。  </p>\n<p><strong>结果如下：</strong><br><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20130129/shell3.png\" alt=\"\">  </p>\n"},{"title":"storm源码编译及本地调试方法","date":"2016-07-13T15:53:12.000Z","_content":"\n基础环境\n--\n\n* IDE开发环境：intelliJIdea\n* JDK1.7  64bit\n* intelliJIdea安装maven插件，配置好仓库源\n* intelliJIdea安装clojure插件Cursive（需要注册并获取一个license，否则只能使用30天）\n* 如果需要自己创建clojure项目进行开发，需要安装leiningen，[下载地址](http://leiningen.org/)\n\n源码获取\n--\n\n从github checkout代码到本地即可，https://github.com/apache/storm.git\n\n我这里编译的是我们目前正在用的0.10.0版本的代码。\n\n\n导入idea及编译\n--\n\n打开idea，新建project，从源码导入，如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/1.png)\n\n导入后，idea会自动根据pom.xml下载相关依赖包，部分依赖包如果下载不到，需要手动添加。完成后，可以看到project的module如下图所示：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/2.png)\n\n<!--more-->\n\n这时候，通过idea就可以直接跟踪看源码了，但直接运行storm-starter中的例子还是会报错并提示有些类找不到，经查看是clojure的代码还未编译出class文件。可以在源码目录下执行mvn compile进行编译。\n\n使用idea调试源码\n--\n\n编译完成后，可以直接启动storm-starter中的例子运行。期间可能出现找不到类，检查classpath，依赖包的scope由provided改为compile。\n\n在源代码中加断点，run或者debug即可。\n\n> 2739 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources\n> 4546 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources\n> 5218 [main] INFO  b.s.zookeeper - Starting inprocess zookeeper at port 2000 and dir /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//eeb57be9-5478-4fa9-ab31-6dfce38e7695\n> 5243 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources\n> 5340 [main] INFO  b.s.d.nimbus - Starting Nimbus with conf {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 5342 [main] INFO  b.s.d.nimbus - Using default scheduler\n> 5360 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 5457 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 5529 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 5531 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6569 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6569 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6574 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6605 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6605 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6609 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6609 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6617 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6618 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6620 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6621 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6623 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6625 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6649 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6652 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6653 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6657 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6671 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 6693 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6694 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6697 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6697 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6700 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6701 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6704 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6722 [main] INFO  b.s.d.supervisor - Starting supervisor with id 913c90f6-3f78-4646-8998-aa901ae3c360 at host localhost\n> 6725 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {\"topology.builtin.metrics.bucket.size.secs\" 60, .....\n> 6732 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6732 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6736 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6736 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6740 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6741 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6744 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6753 [main] INFO  b.s.d.supervisor - Starting supervisor with id 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 at host localhost\n> 7035 [main] INFO  b.s.d.nimbus - [req 1] Access from:  principal: op:submitTopology\n> 7113 [main] INFO  b.s.d.nimbus - Received topology submission for wordCounter with conf {\"topology.max.task.parallelism\" nil, \"topology.submitter.principal\" \"\", \"topology.acker.executors\" nil, \"topology.max.spout.pending\" 20, \"storm.zookeeper.superACL\" nil, \"topology.users\" (), \"topology.submitter.user\" \"\", \"topology.kryo.register\" {\"storm.trident.topology.TransactionAttempt\" nil, \"storm.trident.spout.RichSpoutBatchId\" \"storm.trident.spout.RichSpoutBatchIdSerializer\"}, \"topology.kryo.decorators\" (), \"storm.id\" \"wordCounter-1-1468420782\", \"topology.name\" \"wordCounter\"}\n> 7123 [main] INFO  b.s.d.nimbus - nimbus file location:/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782\n> 7152 [main] INFO  b.s.d.nimbus - Activating wordCounter: wordCounter-1-1468420782\n> 7346 [main] INFO  b.s.s.EvenScheduler - Available slots: ([\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1028] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1029] [\"913c90f6-3f78-4646-8998-aa901ae3c360\" 1024] [\"913c90f6-3f78-4646-8998-aa901ae3c360\" 1025] [\"913c90f6-3f78-4646-8998-aa901ae3c360\" 1026])\n> 7398 [main] INFO  b.s.d.nimbus - Setting new assignment for topology id wordCounter-1-1468420782: #backtype.storm.daemon.common.Assignment{:master-code-dir \"/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782\", :node->host {\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" \"localhost\"}, :executor->node+port {[8 8] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [12 12] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [2 2] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [7 7] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [22 22] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [3 3] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [24 24] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [1 1] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [18 18] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [6 6] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [20 20] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [9 9] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [23 23] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [11 11] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [16 16] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [13 13] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [19 19] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [21 21] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [5 5] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [26 26] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [10 10] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [14 14] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [4 4] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [15 15] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [25 25] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [17 17] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027]}, :executor->start-time-secs {[8 8] 1468420782, [12 12] 1468420782, [2 2] 1468420782, [7 7] 1468420782, [22 22] 1468420782, [3 3] 1468420782, [24 24] 1468420782, [1 1] 1468420782, [18 18] 1468420782, [6 6] 1468420782, [20 20] 1468420782, [9 9] 1468420782, [23 23] 1468420782, [11 11] 1468420782, [16 16] 1468420782, [13 13] 1468420782, [19 19] 1468420782, [21 21] 1468420782, [5 5] 1468420782, [26 26] 1468420782, [10 10] 1468420782, [14 14] 1468420782, [4 4] 1468420782, [15 15] 1468420782, [25 25] 1468420782, [17 17] 1468420782}}\n> 7751 [Thread-7] INFO  b.s.d.supervisor - Extracting resources from jar at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/lib/ant-javafx.jar to /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//29645b09-90e9-4b9a-a657-60c418f92841/supervisor/stormdist/wordCounter-1-1468420782/resources\n> 7788 [Thread-8] INFO  b.s.d.supervisor - Launching worker with assignment {:storm-id \"wordCounter-1-1468420782\", :executors [[8 8] [12 12] [2 2] [7 7] [22 22] [3 3] [24 24] [1 1] [18 18] [6 6] [20 20] [9 9] [23 23] [11 11] [16 16] [13 13] [19 19] [21 21] [5 5] [26 26] [10 10] [14 14] [4 4] [15 15] [25 25] [17 17]]} for this supervisor 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 on port 1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99\n> 7791 [Thread-8] INFO  b.s.d.worker - Launching worker for wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99 and conf {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 7793 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 7794 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 7798 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 7798 [Thread-8-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 7801 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 7802 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 7805 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 7809 [Thread-8] INFO  b.s.s.a.AuthUtils - Got AutoCreds []\n> 7811 [Thread-8] INFO  b.s.d.worker - Reading Assignments.\n> 7881 [Thread-8] INFO  b.s.d.worker - Launching receive-thread for 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027\n> 7884 [Thread-9-worker-receiver-thread-0] INFO  b.s.m.loader - Starting receive-thread: [stormId: wordCounter-1-1468420782, port: 1027, thread-id: 0 ]\n> 8261 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[8 8]\n> 8285 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[8 8]\n> 8300 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[8 8]\n> 8311 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[12 12]\n> 8329 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[12 12]\n> 8331 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[12 12]\n> 8340 [Thread-8] INFO  b.s.d.executor - Loading executor $spoutcoord-spout0:[2 2]\n> 8343 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $spoutcoord-spout0:[2 2]\n> 8346 [Thread-8] INFO  b.s.d.executor - Finished loading executor $spoutcoord-spout0:[2 2]\n> 8355 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[7 7]\n> 8372 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[7 7]\n> 8375 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[7 7]\n> 8381 [Thread-8] INFO  b.s.d.executor - Loading executor b-3:[22 22]\n> 8401 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-3:[22 22]\n> 8404 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-3:[22 22]\n> 8412 [Thread-8] INFO  b.s.d.executor - Loading executor __acker:[3 3]\n> 8414 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks __acker:[3 3]\n> 8424 [Thread-8] INFO  b.s.d.executor - Timeouts disabled for executor __acker:[3 3]\n> 8425 [Thread-8] INFO  b.s.d.executor - Finished loading executor __acker:[3 3]\n> 8443 [Thread-8] INFO  b.s.d.executor - Loading executor b-5:[24 24]\n> 8465 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-5:[24 24]\n> 8467 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-5:[24 24]\n> 8530 [Thread-8] INFO  b.s.d.executor - Loading executor $mastercoord-bg0:[1 1]\n> 8539 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $mastercoord-bg0:[1 1]\n> 8576 [Thread-8] INFO  b.s.d.executor - Finished loading executor $mastercoord-bg0:[1 1]\n> 8603 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[18 18]\n> 8633 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[18 18]\n> 8635 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[18 18]\n> 8646 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[6 6]\n> 8681 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[6 6]\n> 8683 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[6 6]\n> 8719 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[20 20]\n> 8757 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[20 20]\n> 8763 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[20 20]\n> 8782 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[9 9]\n> 8808 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[9 9]\n> 8818 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[9 9]\n> 8828 [Thread-8] INFO  b.s.d.executor - Loading executor b-4:[23 23]\n> 8847 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-4:[23 23]\n> 8851 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-4:[23 23]\n> 8858 [refresh-active-timer] INFO  b.s.d.worker - All connections are ready for worker 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99\n> 8864 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[11 11]\n> 8877 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[11 11]\n> 8879 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[11 11]\n> 8886 [Thread-8] INFO  b.s.d.executor - Loading executor __system:[-1 -1]\n> 8887 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks __system:[-1 -1]\n> 8890 [Thread-8] INFO  b.s.d.executor - Finished loading executor __system:[-1 -1]\n> 8914 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[16 16]\n> 9052 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[16 16]\n> 9055 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[16 16]\n> 9070 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[13 13]\n> 9081 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[13 13]\n> 9089 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[13 13]\n> 9116 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[19 19]\n> 9129 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[19 19]\n> 9132 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[19 19]\n> 9148 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[21 21]\n> 9160 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[21 21]\n> 9163 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[21 21]\n> 9178 [Thread-8] INFO  b.s.d.executor - Loading executor b-1:[5 5]\n> 9192 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-1:[5 5]\n> 9194 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-1:[5 5]\n> 9204 [Thread-8] INFO  b.s.d.executor - Loading executor spout1:[26 26]\n> 9205 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout1:[26 26]\n> 9208 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout1:[26 26]\n> 9220 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[10 10]\n> 9226 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[10 10]\n> 9228 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[10 10]\n> 9234 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[14 14]\n> 9237 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[14 14]\n> 9239 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[14 14]\n> 9244 [Thread-8] INFO  b.s.d.executor - Loading executor b-0:[4 4]\n> 9248 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-0:[4 4]\n> 9249 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-0:[4 4]\n> 9255 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[15 15]\n> 9260 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[15 15]\n> 9261 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[15 15]\n> 9273 [Thread-8] INFO  b.s.d.executor - Loading executor spout0:[25 25]\n> 9275 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout0:[25 25]\n> 9277 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout0:[25 25]\n> 9284 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[17 17]\n> 9289 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[17 17]\n> 9291 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[17 17]\n> 9298 [Thread-8] INFO  b.s.d.worker - Worker has topology config {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 9298 [Thread-8] INFO  b.s.d.worker - Worker 9dd8aeac-1cd6-467a-a84c-2637d0825d99 for storm wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 has finished loading\n> 9298 [Thread-8] INFO  b.s.config - SET worker-user 9dd8aeac-1cd6-467a-a84c-2637d0825d99 \n> 9875 [Thread-27-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(18)\n> 9882 [Thread-35-b-4] INFO  b.s.d.executor - Preparing bolt b-4:(23)\n> 9882 [Thread-41-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(16)\n> 9883 [Thread-13-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(12)\n> 9883 [Thread-59-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(15)\n> 9883 [Thread-47-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(21)\n> 9893 [Thread-35-b-4] INFO  b.s.d.executor - Prepared bolt b-4:(23)\n> 9896 [Thread-47-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(21)\n> 9896 [Thread-59-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(15)\n> 9896 [Thread-27-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(18)\n> 9896 [Thread-13-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(12)\n> 9896 [Thread-41-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(16)\n> 9898 [Thread-31-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(20)\n> 9898 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Preparing bolt $spoutcoord-spout0:(2)\n> 9899 [Thread-61-spout0] INFO  b.s.d.executor - Preparing bolt spout0:(25)\n> 9900 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9900 [Thread-61-spout0] INFO  b.s.d.executor - Prepared bolt spout0:(25)\n> 9901 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9901 [Thread-31-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(20)\n> 9907 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 9908 [Thread-43-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(13)\n> 9908 [Thread-37-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(11)\n> 9908 [Thread-63-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(17)\n> 9910 [Thread-43-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(13)\n> 9910 [Thread-37-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(11)\n> 9911 [Thread-63-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(17)\n> 9918 [Thread-49-b-1] INFO  b.s.d.executor - Preparing bolt b-1:(5)\n> 9918 [Thread-39-__system] INFO  b.s.d.executor - Preparing bolt __system:(-1)\n> 9918 [Thread-29-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(6)\n> 9920 [Thread-49-b-1] INFO  b.s.d.executor - Prepared bolt b-1:(5)\n> 9920 [Thread-29-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(6)\n> 9921 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9922 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9924 [Thread-39-__system] INFO  b.s.d.executor - Prepared bolt __system:(-1)\n> 9929 [Thread-51-spout1] INFO  b.s.d.executor - Opening spout spout1:(26)\n> 9929 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opening spout $mastercoord-bg0:(1)\n> 9929 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 9938 [Thread-51-spout1] INFO  b.s.d.executor - Opened spout spout1:(26)\n> 9937 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9940 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9940 [Thread-33-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(9)\n> 9942 [Thread-51-spout1] INFO  b.s.d.executor - Activating spout spout1:(26)\n> 9942 [Thread-33-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(9)\n> 9947 [Thread-53-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(10)\n> 9950 [Thread-53-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(10)\n> 9956 [Thread-11-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(8)\n> 9956 [Thread-45-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(19)\n> 9957 [Thread-23-b-5] INFO  b.s.d.executor - Preparing bolt b-5:(24)\n> 9958 [Thread-23-b-5] INFO  b.s.d.executor - Prepared bolt b-5:(24)\n> 9958 [Thread-11-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(8)\n> 9958 [Thread-17-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(7)\n> 9959 [Thread-55-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(14)\n> 9959 [Thread-19-b-3] INFO  b.s.d.executor - Preparing bolt b-3:(22)\n> 9960 [Thread-19-b-3] INFO  b.s.d.executor - Prepared bolt b-3:(22)\n> 9960 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 9960 [Thread-17-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(7)\n> 9962 [Thread-45-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(19)\n> 9963 [Thread-55-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(14)\n> 9964 [Thread-57-b-0] INFO  b.s.d.executor - Preparing bolt b-0:(4)\n> 9964 [Thread-21-__acker] INFO  b.s.d.executor - Preparing bolt __acker:(3)\n> 9965 [Thread-57-b-0] INFO  b.s.d.executor - Prepared bolt b-0:(4)\n> 9966 [Thread-21-__acker] INFO  b.s.d.executor - Prepared bolt __acker:(3)\n> 9969 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Prepared bolt $spoutcoord-spout0:(2)\n> 9971 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9972 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9984 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> DRPC RESULT: [[0]]\n> 9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opened spout $mastercoord-bg0:(1)\n> 9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Activating spout $mastercoord-bg0:(1)\n> DRPC RESULT: [[60]]\n> DRPC RESULT: [[120]]\n> DRPC RESULT: [[179]]\n> DRPC RESULT: [[239]]\n> DRPC RESULT: [[299]]\n> DRPC RESULT: [[359]]\n> DRPC RESULT: [[414]]\n> DRPC RESULT: [[474]]\n> DRPC RESULT: [[534]]\n> DRPC RESULT: [[593]]\n> DRPC RESULT: [[653]]\n> DRPC RESULT: [[713]]\n> DRPC RESULT: [[768]]\n> \n> Process finished with exit code 130\n\n\n\n","source":"_posts/storm源码编译及本地调试方法.md","raw":"---\ntitle: storm源码编译及本地调试方法\ndate: 2016-07-13 23:53:12\ntags: \n- storm\n- 源码编译\n- 本地调试\ncategories:\n- Storm\n---\n\n基础环境\n--\n\n* IDE开发环境：intelliJIdea\n* JDK1.7  64bit\n* intelliJIdea安装maven插件，配置好仓库源\n* intelliJIdea安装clojure插件Cursive（需要注册并获取一个license，否则只能使用30天）\n* 如果需要自己创建clojure项目进行开发，需要安装leiningen，[下载地址](http://leiningen.org/)\n\n源码获取\n--\n\n从github checkout代码到本地即可，https://github.com/apache/storm.git\n\n我这里编译的是我们目前正在用的0.10.0版本的代码。\n\n\n导入idea及编译\n--\n\n打开idea，新建project，从源码导入，如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/1.png)\n\n导入后，idea会自动根据pom.xml下载相关依赖包，部分依赖包如果下载不到，需要手动添加。完成后，可以看到project的module如下图所示：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/2.png)\n\n<!--more-->\n\n这时候，通过idea就可以直接跟踪看源码了，但直接运行storm-starter中的例子还是会报错并提示有些类找不到，经查看是clojure的代码还未编译出class文件。可以在源码目录下执行mvn compile进行编译。\n\n使用idea调试源码\n--\n\n编译完成后，可以直接启动storm-starter中的例子运行。期间可能出现找不到类，检查classpath，依赖包的scope由provided改为compile。\n\n在源代码中加断点，run或者debug即可。\n\n> 2739 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources\n> 4546 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources\n> 5218 [main] INFO  b.s.zookeeper - Starting inprocess zookeeper at port 2000 and dir /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//eeb57be9-5478-4fa9-ab31-6dfce38e7695\n> 5243 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources\n> 5340 [main] INFO  b.s.d.nimbus - Starting Nimbus with conf {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 5342 [main] INFO  b.s.d.nimbus - Using default scheduler\n> 5360 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 5457 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 5529 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 5531 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6569 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6569 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6574 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6605 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6605 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6609 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6609 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6617 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6618 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6620 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6621 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6623 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6625 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6649 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6652 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6653 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6657 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6671 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 6693 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6694 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6697 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6697 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6700 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6701 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6704 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6722 [main] INFO  b.s.d.supervisor - Starting supervisor with id 913c90f6-3f78-4646-8998-aa901ae3c360 at host localhost\n> 6725 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {\"topology.builtin.metrics.bucket.size.secs\" 60, .....\n> 6732 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6732 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6736 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6736 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 6740 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 6741 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 6744 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 6753 [main] INFO  b.s.d.supervisor - Starting supervisor with id 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 at host localhost\n> 7035 [main] INFO  b.s.d.nimbus - [req 1] Access from:  principal: op:submitTopology\n> 7113 [main] INFO  b.s.d.nimbus - Received topology submission for wordCounter with conf {\"topology.max.task.parallelism\" nil, \"topology.submitter.principal\" \"\", \"topology.acker.executors\" nil, \"topology.max.spout.pending\" 20, \"storm.zookeeper.superACL\" nil, \"topology.users\" (), \"topology.submitter.user\" \"\", \"topology.kryo.register\" {\"storm.trident.topology.TransactionAttempt\" nil, \"storm.trident.spout.RichSpoutBatchId\" \"storm.trident.spout.RichSpoutBatchIdSerializer\"}, \"topology.kryo.decorators\" (), \"storm.id\" \"wordCounter-1-1468420782\", \"topology.name\" \"wordCounter\"}\n> 7123 [main] INFO  b.s.d.nimbus - nimbus file location:/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782\n> 7152 [main] INFO  b.s.d.nimbus - Activating wordCounter: wordCounter-1-1468420782\n> 7346 [main] INFO  b.s.s.EvenScheduler - Available slots: ([\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1028] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1029] [\"913c90f6-3f78-4646-8998-aa901ae3c360\" 1024] [\"913c90f6-3f78-4646-8998-aa901ae3c360\" 1025] [\"913c90f6-3f78-4646-8998-aa901ae3c360\" 1026])\n> 7398 [main] INFO  b.s.d.nimbus - Setting new assignment for topology id wordCounter-1-1468420782: #backtype.storm.daemon.common.Assignment{:master-code-dir \"/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782\", :node->host {\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" \"localhost\"}, :executor->node+port {[8 8] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [12 12] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [2 2] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [7 7] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [22 22] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [3 3] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [24 24] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [1 1] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [18 18] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [6 6] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [20 20] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [9 9] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [23 23] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [11 11] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [16 16] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [13 13] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [19 19] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [21 21] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [5 5] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [26 26] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [10 10] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [14 14] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [4 4] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [15 15] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [25 25] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027], [17 17] [\"49c35a73-7500-4ea4-aaa2-4b1c1f231fd4\" 1027]}, :executor->start-time-secs {[8 8] 1468420782, [12 12] 1468420782, [2 2] 1468420782, [7 7] 1468420782, [22 22] 1468420782, [3 3] 1468420782, [24 24] 1468420782, [1 1] 1468420782, [18 18] 1468420782, [6 6] 1468420782, [20 20] 1468420782, [9 9] 1468420782, [23 23] 1468420782, [11 11] 1468420782, [16 16] 1468420782, [13 13] 1468420782, [19 19] 1468420782, [21 21] 1468420782, [5 5] 1468420782, [26 26] 1468420782, [10 10] 1468420782, [14 14] 1468420782, [4 4] 1468420782, [15 15] 1468420782, [25 25] 1468420782, [17 17] 1468420782}}\n> 7751 [Thread-7] INFO  b.s.d.supervisor - Extracting resources from jar at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/lib/ant-javafx.jar to /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//29645b09-90e9-4b9a-a657-60c418f92841/supervisor/stormdist/wordCounter-1-1468420782/resources\n> 7788 [Thread-8] INFO  b.s.d.supervisor - Launching worker with assignment {:storm-id \"wordCounter-1-1468420782\", :executors [[8 8] [12 12] [2 2] [7 7] [22 22] [3 3] [24 24] [1 1] [18 18] [6 6] [20 20] [9 9] [23 23] [11 11] [16 16] [13 13] [19 19] [21 21] [5 5] [26 26] [10 10] [14 14] [4 4] [15 15] [25 25] [17 17]]} for this supervisor 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 on port 1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99\n> 7791 [Thread-8] INFO  b.s.d.worker - Launching worker for wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99 and conf {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 7793 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 7794 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 7798 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 7798 [Thread-8-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none\n> 7801 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 7802 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 7805 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 7809 [Thread-8] INFO  b.s.s.a.AuthUtils - Got AutoCreds []\n> 7811 [Thread-8] INFO  b.s.d.worker - Reading Assignments.\n> 7881 [Thread-8] INFO  b.s.d.worker - Launching receive-thread for 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027\n> 7884 [Thread-9-worker-receiver-thread-0] INFO  b.s.m.loader - Starting receive-thread: [stormId: wordCounter-1-1468420782, port: 1027, thread-id: 0 ]\n> 8261 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[8 8]\n> 8285 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[8 8]\n> 8300 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[8 8]\n> 8311 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[12 12]\n> 8329 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[12 12]\n> 8331 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[12 12]\n> 8340 [Thread-8] INFO  b.s.d.executor - Loading executor $spoutcoord-spout0:[2 2]\n> 8343 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $spoutcoord-spout0:[2 2]\n> 8346 [Thread-8] INFO  b.s.d.executor - Finished loading executor $spoutcoord-spout0:[2 2]\n> 8355 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[7 7]\n> 8372 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[7 7]\n> 8375 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[7 7]\n> 8381 [Thread-8] INFO  b.s.d.executor - Loading executor b-3:[22 22]\n> 8401 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-3:[22 22]\n> 8404 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-3:[22 22]\n> 8412 [Thread-8] INFO  b.s.d.executor - Loading executor __acker:[3 3]\n> 8414 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks __acker:[3 3]\n> 8424 [Thread-8] INFO  b.s.d.executor - Timeouts disabled for executor __acker:[3 3]\n> 8425 [Thread-8] INFO  b.s.d.executor - Finished loading executor __acker:[3 3]\n> 8443 [Thread-8] INFO  b.s.d.executor - Loading executor b-5:[24 24]\n> 8465 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-5:[24 24]\n> 8467 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-5:[24 24]\n> 8530 [Thread-8] INFO  b.s.d.executor - Loading executor $mastercoord-bg0:[1 1]\n> 8539 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $mastercoord-bg0:[1 1]\n> 8576 [Thread-8] INFO  b.s.d.executor - Finished loading executor $mastercoord-bg0:[1 1]\n> 8603 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[18 18]\n> 8633 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[18 18]\n> 8635 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[18 18]\n> 8646 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[6 6]\n> 8681 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[6 6]\n> 8683 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[6 6]\n> 8719 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[20 20]\n> 8757 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[20 20]\n> 8763 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[20 20]\n> 8782 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[9 9]\n> 8808 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[9 9]\n> 8818 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[9 9]\n> 8828 [Thread-8] INFO  b.s.d.executor - Loading executor b-4:[23 23]\n> 8847 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-4:[23 23]\n> 8851 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-4:[23 23]\n> 8858 [refresh-active-timer] INFO  b.s.d.worker - All connections are ready for worker 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99\n> 8864 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[11 11]\n> 8877 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[11 11]\n> 8879 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[11 11]\n> 8886 [Thread-8] INFO  b.s.d.executor - Loading executor __system:[-1 -1]\n> 8887 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks __system:[-1 -1]\n> 8890 [Thread-8] INFO  b.s.d.executor - Finished loading executor __system:[-1 -1]\n> 8914 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[16 16]\n> 9052 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[16 16]\n> 9055 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[16 16]\n> 9070 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[13 13]\n> 9081 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[13 13]\n> 9089 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[13 13]\n> 9116 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[19 19]\n> 9129 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[19 19]\n> 9132 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[19 19]\n> 9148 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[21 21]\n> 9160 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[21 21]\n> 9163 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[21 21]\n> 9178 [Thread-8] INFO  b.s.d.executor - Loading executor b-1:[5 5]\n> 9192 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-1:[5 5]\n> 9194 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-1:[5 5]\n> 9204 [Thread-8] INFO  b.s.d.executor - Loading executor spout1:[26 26]\n> 9205 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout1:[26 26]\n> 9208 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout1:[26 26]\n> 9220 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[10 10]\n> 9226 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[10 10]\n> 9228 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[10 10]\n> 9234 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[14 14]\n> 9237 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[14 14]\n> 9239 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[14 14]\n> 9244 [Thread-8] INFO  b.s.d.executor - Loading executor b-0:[4 4]\n> 9248 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-0:[4 4]\n> 9249 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-0:[4 4]\n> 9255 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[15 15]\n> 9260 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[15 15]\n> 9261 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[15 15]\n> 9273 [Thread-8] INFO  b.s.d.executor - Loading executor spout0:[25 25]\n> 9275 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout0:[25 25]\n> 9277 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout0:[25 25]\n> 9284 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[17 17]\n> 9289 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[17 17]\n> 9291 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[17 17]\n> 9298 [Thread-8] INFO  b.s.d.worker - Worker has topology config {\"topology.builtin.metrics.bucket.size.secs\" 60, ......\n> 9298 [Thread-8] INFO  b.s.d.worker - Worker 9dd8aeac-1cd6-467a-a84c-2637d0825d99 for storm wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 has finished loading\n> 9298 [Thread-8] INFO  b.s.config - SET worker-user 9dd8aeac-1cd6-467a-a84c-2637d0825d99 \n> 9875 [Thread-27-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(18)\n> 9882 [Thread-35-b-4] INFO  b.s.d.executor - Preparing bolt b-4:(23)\n> 9882 [Thread-41-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(16)\n> 9883 [Thread-13-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(12)\n> 9883 [Thread-59-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(15)\n> 9883 [Thread-47-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(21)\n> 9893 [Thread-35-b-4] INFO  b.s.d.executor - Prepared bolt b-4:(23)\n> 9896 [Thread-47-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(21)\n> 9896 [Thread-59-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(15)\n> 9896 [Thread-27-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(18)\n> 9896 [Thread-13-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(12)\n> 9896 [Thread-41-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(16)\n> 9898 [Thread-31-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(20)\n> 9898 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Preparing bolt $spoutcoord-spout0:(2)\n> 9899 [Thread-61-spout0] INFO  b.s.d.executor - Preparing bolt spout0:(25)\n> 9900 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9900 [Thread-61-spout0] INFO  b.s.d.executor - Prepared bolt spout0:(25)\n> 9901 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9901 [Thread-31-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(20)\n> 9907 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 9908 [Thread-43-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(13)\n> 9908 [Thread-37-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(11)\n> 9908 [Thread-63-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(17)\n> 9910 [Thread-43-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(13)\n> 9910 [Thread-37-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(11)\n> 9911 [Thread-63-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(17)\n> 9918 [Thread-49-b-1] INFO  b.s.d.executor - Preparing bolt b-1:(5)\n> 9918 [Thread-39-__system] INFO  b.s.d.executor - Preparing bolt __system:(-1)\n> 9918 [Thread-29-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(6)\n> 9920 [Thread-49-b-1] INFO  b.s.d.executor - Prepared bolt b-1:(5)\n> 9920 [Thread-29-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(6)\n> 9921 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9922 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9924 [Thread-39-__system] INFO  b.s.d.executor - Prepared bolt __system:(-1)\n> 9929 [Thread-51-spout1] INFO  b.s.d.executor - Opening spout spout1:(26)\n> 9929 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opening spout $mastercoord-bg0:(1)\n> 9929 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 9938 [Thread-51-spout1] INFO  b.s.d.executor - Opened spout spout1:(26)\n> 9937 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9940 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9940 [Thread-33-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(9)\n> 9942 [Thread-51-spout1] INFO  b.s.d.executor - Activating spout spout1:(26)\n> 9942 [Thread-33-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(9)\n> 9947 [Thread-53-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(10)\n> 9950 [Thread-53-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(10)\n> 9956 [Thread-11-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(8)\n> 9956 [Thread-45-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(19)\n> 9957 [Thread-23-b-5] INFO  b.s.d.executor - Preparing bolt b-5:(24)\n> 9958 [Thread-23-b-5] INFO  b.s.d.executor - Prepared bolt b-5:(24)\n> 9958 [Thread-11-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(8)\n> 9958 [Thread-17-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(7)\n> 9959 [Thread-55-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(14)\n> 9959 [Thread-19-b-3] INFO  b.s.d.executor - Preparing bolt b-3:(22)\n> 9960 [Thread-19-b-3] INFO  b.s.d.executor - Prepared bolt b-3:(22)\n> 9960 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> 9960 [Thread-17-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(7)\n> 9962 [Thread-45-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(19)\n> 9963 [Thread-55-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(14)\n> 9964 [Thread-57-b-0] INFO  b.s.d.executor - Preparing bolt b-0:(4)\n> 9964 [Thread-21-__acker] INFO  b.s.d.executor - Preparing bolt __acker:(3)\n> 9965 [Thread-57-b-0] INFO  b.s.d.executor - Prepared bolt b-0:(4)\n> 9966 [Thread-21-__acker] INFO  b.s.d.executor - Prepared bolt __acker:(3)\n> 9969 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Prepared bolt $spoutcoord-spout0:(2)\n> 9971 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]\n> 9972 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting\n> 9984 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED\n> DRPC RESULT: [[0]]\n> 9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opened spout $mastercoord-bg0:(1)\n> 9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Activating spout $mastercoord-bg0:(1)\n> DRPC RESULT: [[60]]\n> DRPC RESULT: [[120]]\n> DRPC RESULT: [[179]]\n> DRPC RESULT: [[239]]\n> DRPC RESULT: [[299]]\n> DRPC RESULT: [[359]]\n> DRPC RESULT: [[414]]\n> DRPC RESULT: [[474]]\n> DRPC RESULT: [[534]]\n> DRPC RESULT: [[593]]\n> DRPC RESULT: [[653]]\n> DRPC RESULT: [[713]]\n> DRPC RESULT: [[768]]\n> \n> Process finished with exit code 130\n\n\n\n","slug":"storm源码编译及本地调试方法","published":1,"updated":"2017-01-02T12:59:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxfp000md968r7av9rsy","content":"<h2 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h2><ul>\n<li>IDE开发环境：intelliJIdea</li>\n<li>JDK1.7  64bit</li>\n<li>intelliJIdea安装maven插件，配置好仓库源</li>\n<li>intelliJIdea安装clojure插件Cursive（需要注册并获取一个license，否则只能使用30天）</li>\n<li>如果需要自己创建clojure项目进行开发，需要安装leiningen，<a href=\"http://leiningen.org/\" target=\"_blank\" rel=\"external\">下载地址</a></li>\n</ul>\n<h2 id=\"源码获取\"><a href=\"#源码获取\" class=\"headerlink\" title=\"源码获取\"></a>源码获取</h2><p>从github checkout代码到本地即可，<a href=\"https://github.com/apache/storm.git\" target=\"_blank\" rel=\"external\">https://github.com/apache/storm.git</a></p>\n<p>我这里编译的是我们目前正在用的0.10.0版本的代码。</p>\n<h2 id=\"导入idea及编译\"><a href=\"#导入idea及编译\" class=\"headerlink\" title=\"导入idea及编译\"></a>导入idea及编译</h2><p>打开idea，新建project，从源码导入，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/1.png\" alt=\"\"></p>\n<p>导入后，idea会自动根据pom.xml下载相关依赖包，部分依赖包如果下载不到，需要手动添加。完成后，可以看到project的module如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/2.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<p>这时候，通过idea就可以直接跟踪看源码了，但直接运行storm-starter中的例子还是会报错并提示有些类找不到，经查看是clojure的代码还未编译出class文件。可以在源码目录下执行mvn compile进行编译。</p>\n<h2 id=\"使用idea调试源码\"><a href=\"#使用idea调试源码\" class=\"headerlink\" title=\"使用idea调试源码\"></a>使用idea调试源码</h2><p>编译完成后，可以直接启动storm-starter中的例子运行。期间可能出现找不到类，检查classpath，依赖包的scope由provided改为compile。</p>\n<p>在源代码中加断点，run或者debug即可。</p>\n<blockquote>\n<p>2739 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources<br>4546 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources<br>5218 [main] INFO  b.s.zookeeper - Starting inprocess zookeeper at port 2000 and dir /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//eeb57be9-5478-4fa9-ab31-6dfce38e7695<br>5243 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources<br>5340 [main] INFO  b.s.d.nimbus - Starting Nimbus with conf {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>5342 [main] INFO  b.s.d.nimbus - Using default scheduler<br>5360 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>5457 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>5529 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>5531 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6569 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6569 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6574 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6605 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6605 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6609 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6609 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6617 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6618 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6620 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6621 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6623 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6625 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6649 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6652 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6653 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6657 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6671 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>6693 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6694 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6697 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6697 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6700 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6701 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6704 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6722 [main] INFO  b.s.d.supervisor - Starting supervisor with id 913c90f6-3f78-4646-8998-aa901ae3c360 at host localhost<br>6725 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {“topology.builtin.metrics.bucket.size.secs” 60, …..<br>6732 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6732 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6736 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6736 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6740 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6741 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6744 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6753 [main] INFO  b.s.d.supervisor - Starting supervisor with id 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 at host localhost<br>7035 [main] INFO  b.s.d.nimbus - [req 1] Access from:  principal: op:submitTopology<br>7113 [main] INFO  b.s.d.nimbus - Received topology submission for wordCounter with conf {“topology.max.task.parallelism” nil, “topology.submitter.principal” “”, “topology.acker.executors” nil, “topology.max.spout.pending” 20, “storm.zookeeper.superACL” nil, “topology.users” (), “topology.submitter.user” “”, “topology.kryo.register” {“storm.trident.topology.TransactionAttempt” nil, “storm.trident.spout.RichSpoutBatchId” “storm.trident.spout.RichSpoutBatchIdSerializer”}, “topology.kryo.decorators” (), “storm.id” “wordCounter-1-1468420782”, “topology.name” “wordCounter”}<br>7123 [main] INFO  b.s.d.nimbus - nimbus file location:/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782<br>7152 [main] INFO  b.s.d.nimbus - Activating wordCounter: wordCounter-1-1468420782<br>7346 [main] INFO  b.s.s.EvenScheduler - Available slots: ([“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1028] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1029] [“913c90f6-3f78-4646-8998-aa901ae3c360” 1024] [“913c90f6-3f78-4646-8998-aa901ae3c360” 1025] [“913c90f6-3f78-4646-8998-aa901ae3c360” 1026])<br>7398 [main] INFO  b.s.d.nimbus - Setting new assignment for topology id wordCounter-1-1468420782: #backtype.storm.daemon.common.Assignment{:master-code-dir “/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782”, :node-&gt;host {“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” “localhost”}, :executor-&gt;node+port {[8 8] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [12 12] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [2 2] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [7 7] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [22 22] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [3 3] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [24 24] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [1 1] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [18 18] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [6 6] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [20 20] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [9 9] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [23 23] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [11 11] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [16 16] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [13 13] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [19 19] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [21 21] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [5 5] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [26 26] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [10 10] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [14 14] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [4 4] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [15 15] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [25 25] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [17 17] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027]}, :executor-&gt;start-time-secs {[8 8] 1468420782, [12 12] 1468420782, [2 2] 1468420782, [7 7] 1468420782, [22 22] 1468420782, [3 3] 1468420782, [24 24] 1468420782, [1 1] 1468420782, [18 18] 1468420782, [6 6] 1468420782, [20 20] 1468420782, [9 9] 1468420782, [23 23] 1468420782, [11 11] 1468420782, [16 16] 1468420782, [13 13] 1468420782, [19 19] 1468420782, [21 21] 1468420782, [5 5] 1468420782, [26 26] 1468420782, [10 10] 1468420782, [14 14] 1468420782, [4 4] 1468420782, [15 15] 1468420782, [25 25] 1468420782, [17 17] 1468420782}}<br>7751 [Thread-7] INFO  b.s.d.supervisor - Extracting resources from jar at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/lib/ant-javafx.jar to /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//29645b09-90e9-4b9a-a657-60c418f92841/supervisor/stormdist/wordCounter-1-1468420782/resources<br>7788 [Thread-8] INFO  b.s.d.supervisor - Launching worker with assignment {:storm-id “wordCounter-1-1468420782”, :executors [[8 8] [12 12] [2 2] [7 7] [22 22] [3 3] [24 24] [1 1] [18 18] [6 6] [20 20] [9 9] [23 23] [11 11] [16 16] [13 13] [19 19] [21 21] [5 5] [26 26] [10 10] [14 14] [4 4] [15 15] [25 25] [17 17]]} for this supervisor 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 on port 1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99<br>7791 [Thread-8] INFO  b.s.d.worker - Launching worker for wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99 and conf {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>7793 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>7794 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>7798 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>7798 [Thread-8-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>7801 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>7802 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>7805 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>7809 [Thread-8] INFO  b.s.s.a.AuthUtils - Got AutoCreds []<br>7811 [Thread-8] INFO  b.s.d.worker - Reading Assignments.<br>7881 [Thread-8] INFO  b.s.d.worker - Launching receive-thread for 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027<br>7884 [Thread-9-worker-receiver-thread-0] INFO  b.s.m.loader - Starting receive-thread: [stormId: wordCounter-1-1468420782, port: 1027, thread-id: 0 ]<br>8261 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[8 8]<br>8285 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[8 8]<br>8300 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[8 8]<br>8311 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[12 12]<br>8329 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[12 12]<br>8331 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[12 12]<br>8340 [Thread-8] INFO  b.s.d.executor - Loading executor $spoutcoord-spout0:[2 2]<br>8343 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $spoutcoord-spout0:[2 2]<br>8346 [Thread-8] INFO  b.s.d.executor - Finished loading executor $spoutcoord-spout0:[2 2]<br>8355 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[7 7]<br>8372 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[7 7]<br>8375 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[7 7]<br>8381 [Thread-8] INFO  b.s.d.executor - Loading executor b-3:[22 22]<br>8401 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-3:[22 22]<br>8404 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-3:[22 22]<br>8412 [Thread-8] INFO  b.s.d.executor - Loading executor <strong>acker:[3 3]<br>8414 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks </strong>acker:[3 3]<br>8424 [Thread-8] INFO  b.s.d.executor - Timeouts disabled for executor <strong>acker:[3 3]<br>8425 [Thread-8] INFO  b.s.d.executor - Finished loading executor </strong>acker:[3 3]<br>8443 [Thread-8] INFO  b.s.d.executor - Loading executor b-5:[24 24]<br>8465 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-5:[24 24]<br>8467 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-5:[24 24]<br>8530 [Thread-8] INFO  b.s.d.executor - Loading executor $mastercoord-bg0:[1 1]<br>8539 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $mastercoord-bg0:[1 1]<br>8576 [Thread-8] INFO  b.s.d.executor - Finished loading executor $mastercoord-bg0:[1 1]<br>8603 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[18 18]<br>8633 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[18 18]<br>8635 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[18 18]<br>8646 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[6 6]<br>8681 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[6 6]<br>8683 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[6 6]<br>8719 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[20 20]<br>8757 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[20 20]<br>8763 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[20 20]<br>8782 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[9 9]<br>8808 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[9 9]<br>8818 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[9 9]<br>8828 [Thread-8] INFO  b.s.d.executor - Loading executor b-4:[23 23]<br>8847 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-4:[23 23]<br>8851 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-4:[23 23]<br>8858 [refresh-active-timer] INFO  b.s.d.worker - All connections are ready for worker 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99<br>8864 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[11 11]<br>8877 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[11 11]<br>8879 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[11 11]<br>8886 [Thread-8] INFO  b.s.d.executor - Loading executor <strong>system:[-1 -1]<br>8887 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks </strong>system:[-1 -1]<br>8890 [Thread-8] INFO  b.s.d.executor - Finished loading executor <strong>system:[-1 -1]<br>8914 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[16 16]<br>9052 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[16 16]<br>9055 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[16 16]<br>9070 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[13 13]<br>9081 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[13 13]<br>9089 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[13 13]<br>9116 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[19 19]<br>9129 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[19 19]<br>9132 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[19 19]<br>9148 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[21 21]<br>9160 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[21 21]<br>9163 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[21 21]<br>9178 [Thread-8] INFO  b.s.d.executor - Loading executor b-1:[5 5]<br>9192 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-1:[5 5]<br>9194 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-1:[5 5]<br>9204 [Thread-8] INFO  b.s.d.executor - Loading executor spout1:[26 26]<br>9205 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout1:[26 26]<br>9208 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout1:[26 26]<br>9220 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[10 10]<br>9226 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[10 10]<br>9228 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[10 10]<br>9234 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[14 14]<br>9237 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[14 14]<br>9239 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[14 14]<br>9244 [Thread-8] INFO  b.s.d.executor - Loading executor b-0:[4 4]<br>9248 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-0:[4 4]<br>9249 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-0:[4 4]<br>9255 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[15 15]<br>9260 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[15 15]<br>9261 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[15 15]<br>9273 [Thread-8] INFO  b.s.d.executor - Loading executor spout0:[25 25]<br>9275 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout0:[25 25]<br>9277 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout0:[25 25]<br>9284 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[17 17]<br>9289 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[17 17]<br>9291 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[17 17]<br>9298 [Thread-8] INFO  b.s.d.worker - Worker has topology config {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>9298 [Thread-8] INFO  b.s.d.worker - Worker 9dd8aeac-1cd6-467a-a84c-2637d0825d99 for storm wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 has finished loading<br>9298 [Thread-8] INFO  b.s.config - SET worker-user 9dd8aeac-1cd6-467a-a84c-2637d0825d99<br>9875 [Thread-27-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(18)<br>9882 [Thread-35-b-4] INFO  b.s.d.executor - Preparing bolt b-4:(23)<br>9882 [Thread-41-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(16)<br>9883 [Thread-13-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(12)<br>9883 [Thread-59-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(15)<br>9883 [Thread-47-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(21)<br>9893 [Thread-35-b-4] INFO  b.s.d.executor - Prepared bolt b-4:(23)<br>9896 [Thread-47-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(21)<br>9896 [Thread-59-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(15)<br>9896 [Thread-27-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(18)<br>9896 [Thread-13-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(12)<br>9896 [Thread-41-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(16)<br>9898 [Thread-31-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(20)<br>9898 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Preparing bolt $spoutcoord-spout0:(2)<br>9899 [Thread-61-spout0] INFO  b.s.d.executor - Preparing bolt spout0:(25)<br>9900 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9900 [Thread-61-spout0] INFO  b.s.d.executor - Prepared bolt spout0:(25)<br>9901 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9901 [Thread-31-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(20)<br>9907 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>9908 [Thread-43-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(13)<br>9908 [Thread-37-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(11)<br>9908 [Thread-63-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(17)<br>9910 [Thread-43-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(13)<br>9910 [Thread-37-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(11)<br>9911 [Thread-63-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(17)<br>9918 [Thread-49-b-1] INFO  b.s.d.executor - Preparing bolt b-1:(5)<br>9918 [Thread-39-</strong>system] INFO  b.s.d.executor - Preparing bolt <strong>system:(-1)<br>9918 [Thread-29-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(6)<br>9920 [Thread-49-b-1] INFO  b.s.d.executor - Prepared bolt b-1:(5)<br>9920 [Thread-29-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(6)<br>9921 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9922 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9924 [Thread-39-</strong>system] INFO  b.s.d.executor - Prepared bolt <strong>system:(-1)<br>9929 [Thread-51-spout1] INFO  b.s.d.executor - Opening spout spout1:(26)<br>9929 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opening spout $mastercoord-bg0:(1)<br>9929 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>9938 [Thread-51-spout1] INFO  b.s.d.executor - Opened spout spout1:(26)<br>9937 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9940 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9940 [Thread-33-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(9)<br>9942 [Thread-51-spout1] INFO  b.s.d.executor - Activating spout spout1:(26)<br>9942 [Thread-33-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(9)<br>9947 [Thread-53-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(10)<br>9950 [Thread-53-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(10)<br>9956 [Thread-11-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(8)<br>9956 [Thread-45-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(19)<br>9957 [Thread-23-b-5] INFO  b.s.d.executor - Preparing bolt b-5:(24)<br>9958 [Thread-23-b-5] INFO  b.s.d.executor - Prepared bolt b-5:(24)<br>9958 [Thread-11-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(8)<br>9958 [Thread-17-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(7)<br>9959 [Thread-55-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(14)<br>9959 [Thread-19-b-3] INFO  b.s.d.executor - Preparing bolt b-3:(22)<br>9960 [Thread-19-b-3] INFO  b.s.d.executor - Prepared bolt b-3:(22)<br>9960 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>9960 [Thread-17-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(7)<br>9962 [Thread-45-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(19)<br>9963 [Thread-55-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(14)<br>9964 [Thread-57-b-0] INFO  b.s.d.executor - Preparing bolt b-0:(4)<br>9964 [Thread-21-</strong>acker] INFO  b.s.d.executor - Preparing bolt <strong>acker:(3)<br>9965 [Thread-57-b-0] INFO  b.s.d.executor - Prepared bolt b-0:(4)<br>9966 [Thread-21-</strong>acker] INFO  b.s.d.executor - Prepared bolt __acker:(3)<br>9969 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Prepared bolt $spoutcoord-spout0:(2)<br>9971 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9972 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9984 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>DRPC RESULT: [[0]]<br>9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opened spout $mastercoord-bg0:(1)<br>9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Activating spout $mastercoord-bg0:(1)<br>DRPC RESULT: [[60]]<br>DRPC RESULT: [[120]]<br>DRPC RESULT: [[179]]<br>DRPC RESULT: [[239]]<br>DRPC RESULT: [[299]]<br>DRPC RESULT: [[359]]<br>DRPC RESULT: [[414]]<br>DRPC RESULT: [[474]]<br>DRPC RESULT: [[534]]<br>DRPC RESULT: [[593]]<br>DRPC RESULT: [[653]]<br>DRPC RESULT: [[713]]<br>DRPC RESULT: [[768]]</p>\n<p>Process finished with exit code 130</p>\n</blockquote>\n","excerpt":"<h2 id=\"基础环境\"><a href=\"#基础环境\" class=\"headerlink\" title=\"基础环境\"></a>基础环境</h2><ul>\n<li>IDE开发环境：intelliJIdea</li>\n<li>JDK1.7  64bit</li>\n<li>intelliJIdea安装maven插件，配置好仓库源</li>\n<li>intelliJIdea安装clojure插件Cursive（需要注册并获取一个license，否则只能使用30天）</li>\n<li>如果需要自己创建clojure项目进行开发，需要安装leiningen，<a href=\"http://leiningen.org/\">下载地址</a></li>\n</ul>\n<h2 id=\"源码获取\"><a href=\"#源码获取\" class=\"headerlink\" title=\"源码获取\"></a>源码获取</h2><p>从github checkout代码到本地即可，<a href=\"https://github.com/apache/storm.git\">https://github.com/apache/storm.git</a></p>\n<p>我这里编译的是我们目前正在用的0.10.0版本的代码。</p>\n<h2 id=\"导入idea及编译\"><a href=\"#导入idea及编译\" class=\"headerlink\" title=\"导入idea及编译\"></a>导入idea及编译</h2><p>打开idea，新建project，从源码导入，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/1.png\" alt=\"\"></p>\n<p>导入后，idea会自动根据pom.xml下载相关依赖包，部分依赖包如果下载不到，需要手动添加。完成后，可以看到project的module如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20160713-storm%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%8F%8A%E8%B0%83%E8%AF%95/2.png\" alt=\"\"></p>","more":"<p>这时候，通过idea就可以直接跟踪看源码了，但直接运行storm-starter中的例子还是会报错并提示有些类找不到，经查看是clojure的代码还未编译出class文件。可以在源码目录下执行mvn compile进行编译。</p>\n<h2 id=\"使用idea调试源码\"><a href=\"#使用idea调试源码\" class=\"headerlink\" title=\"使用idea调试源码\"></a>使用idea调试源码</h2><p>编译完成后，可以直接启动storm-starter中的例子运行。期间可能出现找不到类，检查classpath，依赖包的scope由provided改为compile。</p>\n<p>在源代码中加断点，run或者debug即可。</p>\n<blockquote>\n<p>2739 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources<br>4546 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources<br>5218 [main] INFO  b.s.zookeeper - Starting inprocess zookeeper at port 2000 and dir /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//eeb57be9-5478-4fa9-ab31-6dfce38e7695<br>5243 [main] INFO  b.s.u.Utils - Using defaults.yaml from resources<br>5340 [main] INFO  b.s.d.nimbus - Starting Nimbus with conf {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>5342 [main] INFO  b.s.d.nimbus - Using default scheduler<br>5360 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>5457 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>5529 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>5531 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6569 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6569 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6574 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6605 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6605 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6609 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6609 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6617 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6618 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6620 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6621 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6623 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6625 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6649 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6652 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6653 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6657 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6671 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>6693 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6694 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6697 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6697 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6700 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6701 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6704 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6722 [main] INFO  b.s.d.supervisor - Starting supervisor with id 913c90f6-3f78-4646-8998-aa901ae3c360 at host localhost<br>6725 [main] INFO  b.s.d.supervisor - Starting Supervisor with conf {“topology.builtin.metrics.bucket.size.secs” 60, …..<br>6732 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6732 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6736 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6736 [main-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>6740 [main] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>6741 [main] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>6744 [main-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>6753 [main] INFO  b.s.d.supervisor - Starting supervisor with id 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 at host localhost<br>7035 [main] INFO  b.s.d.nimbus - [req 1] Access from:  principal: op:submitTopology<br>7113 [main] INFO  b.s.d.nimbus - Received topology submission for wordCounter with conf {“topology.max.task.parallelism” nil, “topology.submitter.principal” “”, “topology.acker.executors” nil, “topology.max.spout.pending” 20, “storm.zookeeper.superACL” nil, “topology.users” (), “topology.submitter.user” “”, “topology.kryo.register” {“storm.trident.topology.TransactionAttempt” nil, “storm.trident.spout.RichSpoutBatchId” “storm.trident.spout.RichSpoutBatchIdSerializer”}, “topology.kryo.decorators” (), “storm.id” “wordCounter-1-1468420782”, “topology.name” “wordCounter”}<br>7123 [main] INFO  b.s.d.nimbus - nimbus file location:/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782<br>7152 [main] INFO  b.s.d.nimbus - Activating wordCounter: wordCounter-1-1468420782<br>7346 [main] INFO  b.s.s.EvenScheduler - Available slots: ([“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1028] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1029] [“913c90f6-3f78-4646-8998-aa901ae3c360” 1024] [“913c90f6-3f78-4646-8998-aa901ae3c360” 1025] [“913c90f6-3f78-4646-8998-aa901ae3c360” 1026])<br>7398 [main] INFO  b.s.d.nimbus - Setting new assignment for topology id wordCounter-1-1468420782: #backtype.storm.daemon.common.Assignment{:master-code-dir “/var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//333ed6da-9ef5-4781-bd82-4f315facd4a8/nimbus/stormdist/wordCounter-1-1468420782”, :node-&gt;host {“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” “localhost”}, :executor-&gt;node+port {[8 8] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [12 12] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [2 2] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [7 7] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [22 22] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [3 3] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [24 24] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [1 1] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [18 18] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [6 6] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [20 20] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [9 9] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [23 23] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [11 11] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [16 16] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [13 13] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [19 19] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [21 21] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [5 5] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [26 26] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [10 10] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [14 14] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [4 4] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [15 15] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [25 25] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027], [17 17] [“49c35a73-7500-4ea4-aaa2-4b1c1f231fd4” 1027]}, :executor-&gt;start-time-secs {[8 8] 1468420782, [12 12] 1468420782, [2 2] 1468420782, [7 7] 1468420782, [22 22] 1468420782, [3 3] 1468420782, [24 24] 1468420782, [1 1] 1468420782, [18 18] 1468420782, [6 6] 1468420782, [20 20] 1468420782, [9 9] 1468420782, [23 23] 1468420782, [11 11] 1468420782, [16 16] 1468420782, [13 13] 1468420782, [19 19] 1468420782, [21 21] 1468420782, [5 5] 1468420782, [26 26] 1468420782, [10 10] 1468420782, [14 14] 1468420782, [4 4] 1468420782, [15 15] 1468420782, [25 25] 1468420782, [17 17] 1468420782}}<br>7751 [Thread-7] INFO  b.s.d.supervisor - Extracting resources from jar at /Library/Java/JavaVirtualMachines/jdk1.7.0_79.jdk/Contents/Home/lib/ant-javafx.jar to /var/folders/c0/0bgvmbb10jz1609_1xjqdsj00000gn/T//29645b09-90e9-4b9a-a657-60c418f92841/supervisor/stormdist/wordCounter-1-1468420782/resources<br>7788 [Thread-8] INFO  b.s.d.supervisor - Launching worker with assignment {:storm-id “wordCounter-1-1468420782”, :executors [[8 8] [12 12] [2 2] [7 7] [22 22] [3 3] [24 24] [1 1] [18 18] [6 6] [20 20] [9 9] [23 23] [11 11] [16 16] [13 13] [19 19] [21 21] [5 5] [26 26] [10 10] [14 14] [4 4] [15 15] [25 25] [17 17]]} for this supervisor 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4 on port 1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99<br>7791 [Thread-8] INFO  b.s.d.worker - Launching worker for wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99 and conf {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>7793 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>7794 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>7798 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>7798 [Thread-8-EventThread] INFO  b.s.zookeeper - Zookeeper state update: :connected:none<br>7801 [Thread-8] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>7802 [Thread-8] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>7805 [Thread-8-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>7809 [Thread-8] INFO  b.s.s.a.AuthUtils - Got AutoCreds []<br>7811 [Thread-8] INFO  b.s.d.worker - Reading Assignments.<br>7881 [Thread-8] INFO  b.s.d.worker - Launching receive-thread for 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027<br>7884 [Thread-9-worker-receiver-thread-0] INFO  b.s.m.loader - Starting receive-thread: [stormId: wordCounter-1-1468420782, port: 1027, thread-id: 0 ]<br>8261 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[8 8]<br>8285 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[8 8]<br>8300 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[8 8]<br>8311 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[12 12]<br>8329 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[12 12]<br>8331 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[12 12]<br>8340 [Thread-8] INFO  b.s.d.executor - Loading executor $spoutcoord-spout0:[2 2]<br>8343 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $spoutcoord-spout0:[2 2]<br>8346 [Thread-8] INFO  b.s.d.executor - Finished loading executor $spoutcoord-spout0:[2 2]<br>8355 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[7 7]<br>8372 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[7 7]<br>8375 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[7 7]<br>8381 [Thread-8] INFO  b.s.d.executor - Loading executor b-3:[22 22]<br>8401 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-3:[22 22]<br>8404 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-3:[22 22]<br>8412 [Thread-8] INFO  b.s.d.executor - Loading executor <strong>acker:[3 3]<br>8414 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks </strong>acker:[3 3]<br>8424 [Thread-8] INFO  b.s.d.executor - Timeouts disabled for executor <strong>acker:[3 3]<br>8425 [Thread-8] INFO  b.s.d.executor - Finished loading executor </strong>acker:[3 3]<br>8443 [Thread-8] INFO  b.s.d.executor - Loading executor b-5:[24 24]<br>8465 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-5:[24 24]<br>8467 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-5:[24 24]<br>8530 [Thread-8] INFO  b.s.d.executor - Loading executor $mastercoord-bg0:[1 1]<br>8539 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks $mastercoord-bg0:[1 1]<br>8576 [Thread-8] INFO  b.s.d.executor - Finished loading executor $mastercoord-bg0:[1 1]<br>8603 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[18 18]<br>8633 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[18 18]<br>8635 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[18 18]<br>8646 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[6 6]<br>8681 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[6 6]<br>8683 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[6 6]<br>8719 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[20 20]<br>8757 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[20 20]<br>8763 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[20 20]<br>8782 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[9 9]<br>8808 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[9 9]<br>8818 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[9 9]<br>8828 [Thread-8] INFO  b.s.d.executor - Loading executor b-4:[23 23]<br>8847 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-4:[23 23]<br>8851 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-4:[23 23]<br>8858 [refresh-active-timer] INFO  b.s.d.worker - All connections are ready for worker 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 with id 9dd8aeac-1cd6-467a-a84c-2637d0825d99<br>8864 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[11 11]<br>8877 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[11 11]<br>8879 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[11 11]<br>8886 [Thread-8] INFO  b.s.d.executor - Loading executor <strong>system:[-1 -1]<br>8887 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks </strong>system:[-1 -1]<br>8890 [Thread-8] INFO  b.s.d.executor - Finished loading executor <strong>system:[-1 -1]<br>8914 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[16 16]<br>9052 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[16 16]<br>9055 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[16 16]<br>9070 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[13 13]<br>9081 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[13 13]<br>9089 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[13 13]<br>9116 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[19 19]<br>9129 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[19 19]<br>9132 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[19 19]<br>9148 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[21 21]<br>9160 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[21 21]<br>9163 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[21 21]<br>9178 [Thread-8] INFO  b.s.d.executor - Loading executor b-1:[5 5]<br>9192 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-1:[5 5]<br>9194 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-1:[5 5]<br>9204 [Thread-8] INFO  b.s.d.executor - Loading executor spout1:[26 26]<br>9205 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout1:[26 26]<br>9208 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout1:[26 26]<br>9220 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[10 10]<br>9226 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[10 10]<br>9228 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[10 10]<br>9234 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[14 14]<br>9237 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[14 14]<br>9239 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[14 14]<br>9244 [Thread-8] INFO  b.s.d.executor - Loading executor b-0:[4 4]<br>9248 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-0:[4 4]<br>9249 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-0:[4 4]<br>9255 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[15 15]<br>9260 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[15 15]<br>9261 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[15 15]<br>9273 [Thread-8] INFO  b.s.d.executor - Loading executor spout0:[25 25]<br>9275 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks spout0:[25 25]<br>9277 [Thread-8] INFO  b.s.d.executor - Finished loading executor spout0:[25 25]<br>9284 [Thread-8] INFO  b.s.d.executor - Loading executor b-2:[17 17]<br>9289 [Thread-8] INFO  b.s.d.executor - Loaded executor tasks b-2:[17 17]<br>9291 [Thread-8] INFO  b.s.d.executor - Finished loading executor b-2:[17 17]<br>9298 [Thread-8] INFO  b.s.d.worker - Worker has topology config {“topology.builtin.metrics.bucket.size.secs” 60, ……<br>9298 [Thread-8] INFO  b.s.d.worker - Worker 9dd8aeac-1cd6-467a-a84c-2637d0825d99 for storm wordCounter-1-1468420782 on 49c35a73-7500-4ea4-aaa2-4b1c1f231fd4:1027 has finished loading<br>9298 [Thread-8] INFO  b.s.config - SET worker-user 9dd8aeac-1cd6-467a-a84c-2637d0825d99<br>9875 [Thread-27-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(18)<br>9882 [Thread-35-b-4] INFO  b.s.d.executor - Preparing bolt b-4:(23)<br>9882 [Thread-41-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(16)<br>9883 [Thread-13-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(12)<br>9883 [Thread-59-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(15)<br>9883 [Thread-47-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(21)<br>9893 [Thread-35-b-4] INFO  b.s.d.executor - Prepared bolt b-4:(23)<br>9896 [Thread-47-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(21)<br>9896 [Thread-59-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(15)<br>9896 [Thread-27-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(18)<br>9896 [Thread-13-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(12)<br>9896 [Thread-41-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(16)<br>9898 [Thread-31-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(20)<br>9898 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Preparing bolt $spoutcoord-spout0:(2)<br>9899 [Thread-61-spout0] INFO  b.s.d.executor - Preparing bolt spout0:(25)<br>9900 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9900 [Thread-61-spout0] INFO  b.s.d.executor - Prepared bolt spout0:(25)<br>9901 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9901 [Thread-31-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(20)<br>9907 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>9908 [Thread-43-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(13)<br>9908 [Thread-37-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(11)<br>9908 [Thread-63-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(17)<br>9910 [Thread-43-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(13)<br>9910 [Thread-37-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(11)<br>9911 [Thread-63-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(17)<br>9918 [Thread-49-b-1] INFO  b.s.d.executor - Preparing bolt b-1:(5)<br>9918 [Thread-39-</strong>system] INFO  b.s.d.executor - Preparing bolt <strong>system:(-1)<br>9918 [Thread-29-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(6)<br>9920 [Thread-49-b-1] INFO  b.s.d.executor - Prepared bolt b-1:(5)<br>9920 [Thread-29-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(6)<br>9921 [Thread-15-$spoutcoord-spout0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9922 [Thread-15-$spoutcoord-spout0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9924 [Thread-39-</strong>system] INFO  b.s.d.executor - Prepared bolt <strong>system:(-1)<br>9929 [Thread-51-spout1] INFO  b.s.d.executor - Opening spout spout1:(26)<br>9929 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opening spout $mastercoord-bg0:(1)<br>9929 [Thread-15-$spoutcoord-spout0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>9938 [Thread-51-spout1] INFO  b.s.d.executor - Opened spout spout1:(26)<br>9937 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9940 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9940 [Thread-33-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(9)<br>9942 [Thread-51-spout1] INFO  b.s.d.executor - Activating spout spout1:(26)<br>9942 [Thread-33-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(9)<br>9947 [Thread-53-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(10)<br>9950 [Thread-53-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(10)<br>9956 [Thread-11-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(8)<br>9956 [Thread-45-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(19)<br>9957 [Thread-23-b-5] INFO  b.s.d.executor - Preparing bolt b-5:(24)<br>9958 [Thread-23-b-5] INFO  b.s.d.executor - Prepared bolt b-5:(24)<br>9958 [Thread-11-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(8)<br>9958 [Thread-17-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(7)<br>9959 [Thread-55-b-2] INFO  b.s.d.executor - Preparing bolt b-2:(14)<br>9959 [Thread-19-b-3] INFO  b.s.d.executor - Preparing bolt b-3:(22)<br>9960 [Thread-19-b-3] INFO  b.s.d.executor - Prepared bolt b-3:(22)<br>9960 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>9960 [Thread-17-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(7)<br>9962 [Thread-45-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(19)<br>9963 [Thread-55-b-2] INFO  b.s.d.executor - Prepared bolt b-2:(14)<br>9964 [Thread-57-b-0] INFO  b.s.d.executor - Preparing bolt b-0:(4)<br>9964 [Thread-21-</strong>acker] INFO  b.s.d.executor - Preparing bolt <strong>acker:(3)<br>9965 [Thread-57-b-0] INFO  b.s.d.executor - Prepared bolt b-0:(4)<br>9966 [Thread-21-</strong>acker] INFO  b.s.d.executor - Prepared bolt __acker:(3)<br>9969 [Thread-15-$spoutcoord-spout0] INFO  b.s.d.executor - Prepared bolt $spoutcoord-spout0:(2)<br>9971 [Thread-25-$mastercoord-bg0] INFO  b.s.u.StormBoundedExponentialBackoffRetry - The baseSleepTimeMs [1000] the maxSleepTimeMs [30000] the maxRetries [5]<br>9972 [Thread-25-$mastercoord-bg0] INFO  o.a.c.f.i.CuratorFrameworkImpl - Starting<br>9984 [Thread-25-$mastercoord-bg0-EventThread] INFO  o.a.c.f.s.ConnectionStateManager - State change: CONNECTED<br>DRPC RESULT: [[0]]<br>9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Opened spout $mastercoord-bg0:(1)<br>9988 [Thread-25-$mastercoord-bg0] INFO  b.s.d.executor - Activating spout $mastercoord-bg0:(1)<br>DRPC RESULT: [[60]]<br>DRPC RESULT: [[120]]<br>DRPC RESULT: [[179]]<br>DRPC RESULT: [[239]]<br>DRPC RESULT: [[299]]<br>DRPC RESULT: [[359]]<br>DRPC RESULT: [[414]]<br>DRPC RESULT: [[474]]<br>DRPC RESULT: [[534]]<br>DRPC RESULT: [[593]]<br>DRPC RESULT: [[653]]<br>DRPC RESULT: [[713]]<br>DRPC RESULT: [[768]]</p>\n<p>Process finished with exit code 130</p>\n</blockquote>"},{"title":"使用httpclient引起的tcp连接数超高问题","date":"2014-03-28T09:44:58.000Z","_content":"\n组内的一个系统新上线了通过图片url上传图片到图片存储平台的功能。其中使用了httpclient，通过向图片存储平台发送MultipartPostMethod上传图片。当业务量较大时，10个处理线程满负荷运行，上传图片时，发现应用系统服务器的tcp连接数陡然升高，<font color='red'>峰值能达到几万个tcp连接数！</font>\n\n排查系统代码并结合分析httpclient的源码发现，应用系统每次上传图片时，都会做new HttpClient()操作，这个操作内部默认使用的是SimpleHttpConnectionManager来管理http连接，而SimpleHttpConnectionManager有个默认字段alwaysClose=false，表示当外部程序调用了HttpMethod.releaseConnection()时并不会立即释放连接，而是保持这个连接并尝试用于后续的请求，在连接空闲一段时间后（默认3秒）才真正释放。\n\n因此，当业务量较大，<font color='red'>系统高并发发送post请求时，new出来的HttpClient对象会很多，而这个对象使用完毕后，而当中建立的client对象在短时间内并不会立即释放连接</font>，因此，随着时间的积累，tcp连接数保持居高不下。\n\n通过查看官方文档，建议在高并发环境下使用MultiThreadedHttpConnectionManager来管理httpclient，因此，我们将httpclient改为单例后，tcp连接数回复正常水平。\n\n通过管理httpclient的代码如下：\n\n```java\nprivate static HttpClient initHttpClient()\n{\n    HttpConnectionManagerParams params = new HttpConnectionManagerParams();\n    //指定向每个host发起的最大连接数，默认是2，太少了\n    params.setDefaultMaxConnectionsPerHost(1000);\n    //指定总共发起的最大连接数，默认是20，太少了\n    params.setMaxTotalConnections(5000);\n    //连接超时时间-10s\n    params.setConnectionTimeout(60*1000);\n    //读取数据超时时间-60s\n    params.setSoTimeout(60*1000);\n \n    MultiThreadedHttpConnectionManager manager = new MultiThreadedHttpConnectionManager();\n    manager.setParams(params);\n    return new HttpClient(manager);\n}\n```","source":"_posts/使用httpclient引起的tcp连接数超高问题.md","raw":"---\ntitle: 使用httpclient引起的tcp连接数超高问题\ndate: 2014-03-28 17:44:58\ntags:\n- httpclient\n- tcp连接数\ncategories: \n- 问题分析\n---\n\n组内的一个系统新上线了通过图片url上传图片到图片存储平台的功能。其中使用了httpclient，通过向图片存储平台发送MultipartPostMethod上传图片。当业务量较大时，10个处理线程满负荷运行，上传图片时，发现应用系统服务器的tcp连接数陡然升高，<font color='red'>峰值能达到几万个tcp连接数！</font>\n\n排查系统代码并结合分析httpclient的源码发现，应用系统每次上传图片时，都会做new HttpClient()操作，这个操作内部默认使用的是SimpleHttpConnectionManager来管理http连接，而SimpleHttpConnectionManager有个默认字段alwaysClose=false，表示当外部程序调用了HttpMethod.releaseConnection()时并不会立即释放连接，而是保持这个连接并尝试用于后续的请求，在连接空闲一段时间后（默认3秒）才真正释放。\n\n因此，当业务量较大，<font color='red'>系统高并发发送post请求时，new出来的HttpClient对象会很多，而这个对象使用完毕后，而当中建立的client对象在短时间内并不会立即释放连接</font>，因此，随着时间的积累，tcp连接数保持居高不下。\n\n通过查看官方文档，建议在高并发环境下使用MultiThreadedHttpConnectionManager来管理httpclient，因此，我们将httpclient改为单例后，tcp连接数回复正常水平。\n\n通过管理httpclient的代码如下：\n\n```java\nprivate static HttpClient initHttpClient()\n{\n    HttpConnectionManagerParams params = new HttpConnectionManagerParams();\n    //指定向每个host发起的最大连接数，默认是2，太少了\n    params.setDefaultMaxConnectionsPerHost(1000);\n    //指定总共发起的最大连接数，默认是20，太少了\n    params.setMaxTotalConnections(5000);\n    //连接超时时间-10s\n    params.setConnectionTimeout(60*1000);\n    //读取数据超时时间-60s\n    params.setSoTimeout(60*1000);\n \n    MultiThreadedHttpConnectionManager manager = new MultiThreadedHttpConnectionManager();\n    manager.setParams(params);\n    return new HttpClient(manager);\n}\n```","slug":"使用httpclient引起的tcp连接数超高问题","published":1,"updated":"2016-07-04T15:48:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxft000od9689036qwjd","content":"<p>组内的一个系统新上线了通过图片url上传图片到图片存储平台的功能。其中使用了httpclient，通过向图片存储平台发送MultipartPostMethod上传图片。当业务量较大时，10个处理线程满负荷运行，上传图片时，发现应用系统服务器的tcp连接数陡然升高，<font color=\"red\">峰值能达到几万个tcp连接数！</font></p>\n<p>排查系统代码并结合分析httpclient的源码发现，应用系统每次上传图片时，都会做new HttpClient()操作，这个操作内部默认使用的是SimpleHttpConnectionManager来管理http连接，而SimpleHttpConnectionManager有个默认字段alwaysClose=false，表示当外部程序调用了HttpMethod.releaseConnection()时并不会立即释放连接，而是保持这个连接并尝试用于后续的请求，在连接空闲一段时间后（默认3秒）才真正释放。</p>\n<p>因此，当业务量较大，<font color=\"red\">系统高并发发送post请求时，new出来的HttpClient对象会很多，而这个对象使用完毕后，而当中建立的client对象在短时间内并不会立即释放连接</font>，因此，随着时间的积累，tcp连接数保持居高不下。</p>\n<p>通过查看官方文档，建议在高并发环境下使用MultiThreadedHttpConnectionManager来管理httpclient，因此，我们将httpclient改为单例后，tcp连接数回复正常水平。</p>\n<p>通过管理httpclient的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HttpClient <span class=\"title\">initHttpClient</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    HttpConnectionManagerParams params = <span class=\"keyword\">new</span> HttpConnectionManagerParams();</div><div class=\"line\">    <span class=\"comment\">//指定向每个host发起的最大连接数，默认是2，太少了</span></div><div class=\"line\">    params.setDefaultMaxConnectionsPerHost(<span class=\"number\">1000</span>);</div><div class=\"line\">    <span class=\"comment\">//指定总共发起的最大连接数，默认是20，太少了</span></div><div class=\"line\">    params.setMaxTotalConnections(<span class=\"number\">5000</span>);</div><div class=\"line\">    <span class=\"comment\">//连接超时时间-10s</span></div><div class=\"line\">    params.setConnectionTimeout(<span class=\"number\">60</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">    <span class=\"comment\">//读取数据超时时间-60s</span></div><div class=\"line\">    params.setSoTimeout(<span class=\"number\">60</span>*<span class=\"number\">1000</span>);</div><div class=\"line\"> </div><div class=\"line\">    MultiThreadedHttpConnectionManager manager = <span class=\"keyword\">new</span> MultiThreadedHttpConnectionManager();</div><div class=\"line\">    manager.setParams(params);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpClient(manager);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p>组内的一个系统新上线了通过图片url上传图片到图片存储平台的功能。其中使用了httpclient，通过向图片存储平台发送MultipartPostMethod上传图片。当业务量较大时，10个处理线程满负荷运行，上传图片时，发现应用系统服务器的tcp连接数陡然升高，<font color='red'>峰值能达到几万个tcp连接数！</font></p>\n<p>排查系统代码并结合分析httpclient的源码发现，应用系统每次上传图片时，都会做new HttpClient()操作，这个操作内部默认使用的是SimpleHttpConnectionManager来管理http连接，而SimpleHttpConnectionManager有个默认字段alwaysClose=false，表示当外部程序调用了HttpMethod.releaseConnection()时并不会立即释放连接，而是保持这个连接并尝试用于后续的请求，在连接空闲一段时间后（默认3秒）才真正释放。</p>\n<p>因此，当业务量较大，<font color='red'>系统高并发发送post请求时，new出来的HttpClient对象会很多，而这个对象使用完毕后，而当中建立的client对象在短时间内并不会立即释放连接</font>，因此，随着时间的积累，tcp连接数保持居高不下。</p>\n<p>通过查看官方文档，建议在高并发环境下使用MultiThreadedHttpConnectionManager来管理httpclient，因此，我们将httpclient改为单例后，tcp连接数回复正常水平。</p>\n<p>通过管理httpclient的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> HttpClient <span class=\"title\">initHttpClient</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    HttpConnectionManagerParams params = <span class=\"keyword\">new</span> HttpConnectionManagerParams();</div><div class=\"line\">    <span class=\"comment\">//指定向每个host发起的最大连接数，默认是2，太少了</span></div><div class=\"line\">    params.setDefaultMaxConnectionsPerHost(<span class=\"number\">1000</span>);</div><div class=\"line\">    <span class=\"comment\">//指定总共发起的最大连接数，默认是20，太少了</span></div><div class=\"line\">    params.setMaxTotalConnections(<span class=\"number\">5000</span>);</div><div class=\"line\">    <span class=\"comment\">//连接超时时间-10s</span></div><div class=\"line\">    params.setConnectionTimeout(<span class=\"number\">60</span>*<span class=\"number\">1000</span>);</div><div class=\"line\">    <span class=\"comment\">//读取数据超时时间-60s</span></div><div class=\"line\">    params.setSoTimeout(<span class=\"number\">60</span>*<span class=\"number\">1000</span>);</div><div class=\"line\"> </div><div class=\"line\">    MultiThreadedHttpConnectionManager manager = <span class=\"keyword\">new</span> MultiThreadedHttpConnectionManager();</div><div class=\"line\">    manager.setParams(params);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> HttpClient(manager);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"storm集群supervisor节点异常退出问题排查","date":"2015-07-03T12:48:50.000Z","_content":"\n问题出现\n--\n\n测试storm集群为0.9.4版本，前段时间出现supervisor进程挂掉，而其上work进程仍然运行的诡异情况，通过日志看到supervisor进程挂掉之前出现以下异常：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/1.png)\n\n问题排查过程\n--\n\n很明显，是commons-io包的FileUtils工具类抛出的异常，原因是在调用commons-io包的FileUtils工具类做move directory操作时，目的文件夹已存在。\n\n查看调用代码（supervisor.clj的第374行），是调用download-storm-code方法从nimbus下载topology的代码，并且download-storm-code方法中做代码下载前加了锁避免并发写文件。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/2.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/3.png)\n\n果然，这里没有判断stormroot文件夹是否已存在，是个bug，具体可见这个issue：[https://issues.apache.org/jira/browse/STORM-805](https://issues.apache.org/jira/browse/STORM-805)。\n\n这个问题在0.9.5版本中随着STORM-130一起修复了，代码如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/4.png)\n\n但这里有三个问题：\n\n1. 在调用download-storm-code方法前，代码中已做判断是否已下载topology代码，若已下载就不会调用download-storm-code方法了。为何进入这个方法后，做move directory操作时，代码却已经下载好了呢？\n\n2. storm的历史发布版本有很多，为何0.9.4版本里会出现这个不该出现的问题，0.9.4相对老的版本是不是做了什么修改？\n\n3. 为何抛出异常后，supervisor进程就这么直接退出了？太弱了吧。。\n<!--more-->\n继续看0.9.4的源码发现，**supervisor中有以下两个事件线程，都会调用download-storm-code方法**：\n\n**一个是synchronize-supervisor，用于同步nimbus任务**，每隔10秒执行一次，会调用mk-synchronize-supervisor方法，以及时获取nimbus分配给该supervisor的新任务并移除已分配但不再需要执行的任务。\n\n**另一个是sync-processes，用于根据任务变化同步管理worker进程**，执行周期由SUPERVISOR-MONITOR-FREQUENCY-SECS（默认3秒）指定，会调用sync-processes方法，以关闭当前不处于valid状态的worker和启动新分配给该supervisor的worker。\n\n其中，mk-synchronize-supervisor方法和sync-processes方法都会调用download-storm-code方法。\n\n两个事件线程的定义：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/5.png)\n\nmk-synchronize-supervisor方法调用download-storm-code方法：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/6.png)\n\nsync-processes调用download-storm-code方法：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/7.png)\n\nmk-synchronize-supervisor方法和sync-processes方法在调用前都会判断topology代码是否已下载，所以，出现上述异常的原因很可能是两个线程再调用download-storm-code方法时不同步引起的，即同时判断到需要下载topology代码并进入了download-storm-code方法，从而产生两次move directory的操作引发异常。\n\n虽然download-storm-code方法内部通过加锁控制了写文件时的并发，但对进入download-storm-code方法并没有做好同步。\n\n再回过头看0.9.5版本的代码，虽然在move directory前判断了目的文件夹是否存在以避免问题，但实际上还是存在两个线程同时进入download-storm-code方法的问题。\n\n最后再比较了下0.9.3和0.9.4的代码（supervisor.clj），发现0.9.4的sync-processes方法中调用download-storm-code的逻辑是新加进去的，也就是说这个bug是0.9.4新引入的，以前的版本不会存在这个问题。\n\n左边为0.9.3，右边为0.9.4：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/8.png)\n\n关于第3个问题，再回看定义synchronize-supervisor事件线程的代码，是通过事件管理器event-manager来实现的，查看event.clj中的实现，event-manager会从一个LinkedBlockingQueue取出新事件并启动线程处理，线程若抛出非Interrupted异常，则直接退出进程了。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/9.png)\n\n至此，问题分析完毕。","source":"_posts/storm集群supervisor节点异常退出问题排查.md","raw":"---\ntitle: storm集群supervisor节点异常退出问题排查\ndate: 2015-07-03 20:48:50\ntags:\n- storm\n- supervisor\n- 异常排查\ncategories:\n- Storm\n---\n\n问题出现\n--\n\n测试storm集群为0.9.4版本，前段时间出现supervisor进程挂掉，而其上work进程仍然运行的诡异情况，通过日志看到supervisor进程挂掉之前出现以下异常：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/1.png)\n\n问题排查过程\n--\n\n很明显，是commons-io包的FileUtils工具类抛出的异常，原因是在调用commons-io包的FileUtils工具类做move directory操作时，目的文件夹已存在。\n\n查看调用代码（supervisor.clj的第374行），是调用download-storm-code方法从nimbus下载topology的代码，并且download-storm-code方法中做代码下载前加了锁避免并发写文件。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/2.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/3.png)\n\n果然，这里没有判断stormroot文件夹是否已存在，是个bug，具体可见这个issue：[https://issues.apache.org/jira/browse/STORM-805](https://issues.apache.org/jira/browse/STORM-805)。\n\n这个问题在0.9.5版本中随着STORM-130一起修复了，代码如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/4.png)\n\n但这里有三个问题：\n\n1. 在调用download-storm-code方法前，代码中已做判断是否已下载topology代码，若已下载就不会调用download-storm-code方法了。为何进入这个方法后，做move directory操作时，代码却已经下载好了呢？\n\n2. storm的历史发布版本有很多，为何0.9.4版本里会出现这个不该出现的问题，0.9.4相对老的版本是不是做了什么修改？\n\n3. 为何抛出异常后，supervisor进程就这么直接退出了？太弱了吧。。\n<!--more-->\n继续看0.9.4的源码发现，**supervisor中有以下两个事件线程，都会调用download-storm-code方法**：\n\n**一个是synchronize-supervisor，用于同步nimbus任务**，每隔10秒执行一次，会调用mk-synchronize-supervisor方法，以及时获取nimbus分配给该supervisor的新任务并移除已分配但不再需要执行的任务。\n\n**另一个是sync-processes，用于根据任务变化同步管理worker进程**，执行周期由SUPERVISOR-MONITOR-FREQUENCY-SECS（默认3秒）指定，会调用sync-processes方法，以关闭当前不处于valid状态的worker和启动新分配给该supervisor的worker。\n\n其中，mk-synchronize-supervisor方法和sync-processes方法都会调用download-storm-code方法。\n\n两个事件线程的定义：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/5.png)\n\nmk-synchronize-supervisor方法调用download-storm-code方法：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/6.png)\n\nsync-processes调用download-storm-code方法：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/7.png)\n\nmk-synchronize-supervisor方法和sync-processes方法在调用前都会判断topology代码是否已下载，所以，出现上述异常的原因很可能是两个线程再调用download-storm-code方法时不同步引起的，即同时判断到需要下载topology代码并进入了download-storm-code方法，从而产生两次move directory的操作引发异常。\n\n虽然download-storm-code方法内部通过加锁控制了写文件时的并发，但对进入download-storm-code方法并没有做好同步。\n\n再回过头看0.9.5版本的代码，虽然在move directory前判断了目的文件夹是否存在以避免问题，但实际上还是存在两个线程同时进入download-storm-code方法的问题。\n\n最后再比较了下0.9.3和0.9.4的代码（supervisor.clj），发现0.9.4的sync-processes方法中调用download-storm-code的逻辑是新加进去的，也就是说这个bug是0.9.4新引入的，以前的版本不会存在这个问题。\n\n左边为0.9.3，右边为0.9.4：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/8.png)\n\n关于第3个问题，再回看定义synchronize-supervisor事件线程的代码，是通过事件管理器event-manager来实现的，查看event.clj中的实现，event-manager会从一个LinkedBlockingQueue取出新事件并启动线程处理，线程若抛出非Interrupted异常，则直接退出进程了。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150701/9.png)\n\n至此，问题分析完毕。","slug":"storm集群supervisor节点异常退出问题排查","published":1,"updated":"2017-01-23T03:15:47.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxg0000sd968uxne1xs6","content":"<h2 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h2><p>测试storm集群为0.9.4版本，前段时间出现supervisor进程挂掉，而其上work进程仍然运行的诡异情况，通过日志看到supervisor进程挂掉之前出现以下异常：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/1.png\" alt=\"\"></p>\n<h2 id=\"问题排查过程\"><a href=\"#问题排查过程\" class=\"headerlink\" title=\"问题排查过程\"></a>问题排查过程</h2><p>很明显，是commons-io包的FileUtils工具类抛出的异常，原因是在调用commons-io包的FileUtils工具类做move directory操作时，目的文件夹已存在。</p>\n<p>查看调用代码（supervisor.clj的第374行），是调用download-storm-code方法从nimbus下载topology的代码，并且download-storm-code方法中做代码下载前加了锁避免并发写文件。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/2.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/3.png\" alt=\"\"></p>\n<p>果然，这里没有判断stormroot文件夹是否已存在，是个bug，具体可见这个issue：<a href=\"https://issues.apache.org/jira/browse/STORM-805\" target=\"_blank\" rel=\"external\">https://issues.apache.org/jira/browse/STORM-805</a>。</p>\n<p>这个问题在0.9.5版本中随着STORM-130一起修复了，代码如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/4.png\" alt=\"\"></p>\n<p>但这里有三个问题：</p>\n<ol>\n<li><p>在调用download-storm-code方法前，代码中已做判断是否已下载topology代码，若已下载就不会调用download-storm-code方法了。为何进入这个方法后，做move directory操作时，代码却已经下载好了呢？</p>\n</li>\n<li><p>storm的历史发布版本有很多，为何0.9.4版本里会出现这个不该出现的问题，0.9.4相对老的版本是不是做了什么修改？</p>\n</li>\n<li><p>为何抛出异常后，supervisor进程就这么直接退出了？太弱了吧。。</p>\n<a id=\"more\"></a>\n<p>继续看0.9.4的源码发现，<strong>supervisor中有以下两个事件线程，都会调用download-storm-code方法</strong>：</p>\n</li>\n</ol>\n<p><strong>一个是synchronize-supervisor，用于同步nimbus任务</strong>，每隔10秒执行一次，会调用mk-synchronize-supervisor方法，以及时获取nimbus分配给该supervisor的新任务并移除已分配但不再需要执行的任务。</p>\n<p><strong>另一个是sync-processes，用于根据任务变化同步管理worker进程</strong>，执行周期由SUPERVISOR-MONITOR-FREQUENCY-SECS（默认3秒）指定，会调用sync-processes方法，以关闭当前不处于valid状态的worker和启动新分配给该supervisor的worker。</p>\n<p>其中，mk-synchronize-supervisor方法和sync-processes方法都会调用download-storm-code方法。</p>\n<p>两个事件线程的定义：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/5.png\" alt=\"\"></p>\n<p>mk-synchronize-supervisor方法调用download-storm-code方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/6.png\" alt=\"\"></p>\n<p>sync-processes调用download-storm-code方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/7.png\" alt=\"\"></p>\n<p>mk-synchronize-supervisor方法和sync-processes方法在调用前都会判断topology代码是否已下载，所以，出现上述异常的原因很可能是两个线程再调用download-storm-code方法时不同步引起的，即同时判断到需要下载topology代码并进入了download-storm-code方法，从而产生两次move directory的操作引发异常。</p>\n<p>虽然download-storm-code方法内部通过加锁控制了写文件时的并发，但对进入download-storm-code方法并没有做好同步。</p>\n<p>再回过头看0.9.5版本的代码，虽然在move directory前判断了目的文件夹是否存在以避免问题，但实际上还是存在两个线程同时进入download-storm-code方法的问题。</p>\n<p>最后再比较了下0.9.3和0.9.4的代码（supervisor.clj），发现0.9.4的sync-processes方法中调用download-storm-code的逻辑是新加进去的，也就是说这个bug是0.9.4新引入的，以前的版本不会存在这个问题。</p>\n<p>左边为0.9.3，右边为0.9.4：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/8.png\" alt=\"\"></p>\n<p>关于第3个问题，再回看定义synchronize-supervisor事件线程的代码，是通过事件管理器event-manager来实现的，查看event.clj中的实现，event-manager会从一个LinkedBlockingQueue取出新事件并启动线程处理，线程若抛出非Interrupted异常，则直接退出进程了。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/9.png\" alt=\"\"></p>\n<p>至此，问题分析完毕。</p>\n","excerpt":"<h2 id=\"问题出现\"><a href=\"#问题出现\" class=\"headerlink\" title=\"问题出现\"></a>问题出现</h2><p>测试storm集群为0.9.4版本，前段时间出现supervisor进程挂掉，而其上work进程仍然运行的诡异情况，通过日志看到supervisor进程挂掉之前出现以下异常：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/1.png\" alt=\"\"></p>\n<h2 id=\"问题排查过程\"><a href=\"#问题排查过程\" class=\"headerlink\" title=\"问题排查过程\"></a>问题排查过程</h2><p>很明显，是commons-io包的FileUtils工具类抛出的异常，原因是在调用commons-io包的FileUtils工具类做move directory操作时，目的文件夹已存在。</p>\n<p>查看调用代码（supervisor.clj的第374行），是调用download-storm-code方法从nimbus下载topology的代码，并且download-storm-code方法中做代码下载前加了锁避免并发写文件。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/2.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/3.png\" alt=\"\"></p>\n<p>果然，这里没有判断stormroot文件夹是否已存在，是个bug，具体可见这个issue：<a href=\"https://issues.apache.org/jira/browse/STORM-805\">https://issues.apache.org/jira/browse/STORM-805</a>。</p>\n<p>这个问题在0.9.5版本中随着STORM-130一起修复了，代码如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/4.png\" alt=\"\"></p>\n<p>但这里有三个问题：</p>\n<ol>\n<li><p>在调用download-storm-code方法前，代码中已做判断是否已下载topology代码，若已下载就不会调用download-storm-code方法了。为何进入这个方法后，做move directory操作时，代码却已经下载好了呢？</p>\n</li>\n<li><p>storm的历史发布版本有很多，为何0.9.4版本里会出现这个不该出现的问题，0.9.4相对老的版本是不是做了什么修改？</p>\n</li>\n<li><p>为何抛出异常后，supervisor进程就这么直接退出了？太弱了吧。。</p>","more":"<p>继续看0.9.4的源码发现，<strong>supervisor中有以下两个事件线程，都会调用download-storm-code方法</strong>：</p>\n</li>\n</ol>\n<p><strong>一个是synchronize-supervisor，用于同步nimbus任务</strong>，每隔10秒执行一次，会调用mk-synchronize-supervisor方法，以及时获取nimbus分配给该supervisor的新任务并移除已分配但不再需要执行的任务。</p>\n<p><strong>另一个是sync-processes，用于根据任务变化同步管理worker进程</strong>，执行周期由SUPERVISOR-MONITOR-FREQUENCY-SECS（默认3秒）指定，会调用sync-processes方法，以关闭当前不处于valid状态的worker和启动新分配给该supervisor的worker。</p>\n<p>其中，mk-synchronize-supervisor方法和sync-processes方法都会调用download-storm-code方法。</p>\n<p>两个事件线程的定义：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/5.png\" alt=\"\"></p>\n<p>mk-synchronize-supervisor方法调用download-storm-code方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/6.png\" alt=\"\"></p>\n<p>sync-processes调用download-storm-code方法：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/7.png\" alt=\"\"></p>\n<p>mk-synchronize-supervisor方法和sync-processes方法在调用前都会判断topology代码是否已下载，所以，出现上述异常的原因很可能是两个线程再调用download-storm-code方法时不同步引起的，即同时判断到需要下载topology代码并进入了download-storm-code方法，从而产生两次move directory的操作引发异常。</p>\n<p>虽然download-storm-code方法内部通过加锁控制了写文件时的并发，但对进入download-storm-code方法并没有做好同步。</p>\n<p>再回过头看0.9.5版本的代码，虽然在move directory前判断了目的文件夹是否存在以避免问题，但实际上还是存在两个线程同时进入download-storm-code方法的问题。</p>\n<p>最后再比较了下0.9.3和0.9.4的代码（supervisor.clj），发现0.9.4的sync-processes方法中调用download-storm-code的逻辑是新加进去的，也就是说这个bug是0.9.4新引入的，以前的版本不会存在这个问题。</p>\n<p>左边为0.9.3，右边为0.9.4：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/8.png\" alt=\"\"></p>\n<p>关于第3个问题，再回看定义synchronize-supervisor事件线程的代码，是通过事件管理器event-manager来实现的，查看event.clj中的实现，event-manager会从一个LinkedBlockingQueue取出新事件并启动线程处理，线程若抛出非Interrupted异常，则直接退出进程了。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150701/9.png\" alt=\"\"></p>\n<p>至此，问题分析完毕。</p>"},{"title":"交换空间使用率过高问题分析","date":"2015-06-22T02:02:04.000Z","_content":"\n问题现象\n--\n\n线上两台java后台服务每次上线后再过段时间，就出现swap空间使用率较高的现象，而jvm内存使用和垃圾回收情况则很正常。相关图表如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/1.png)\n\n图中，每次上线后过一段时间，swap空间使用量会出现一个陡增，并随时间推移逐渐增加，期间会出现小幅度下降。\n\n首先，从操作系统层面分析，swap空间使用较高，说明是系统物理内存不够用从而发生内存页交换，将部分内存数据搬至虚拟内存空间，也就是swap空间。但究竟是什么原因引起物理内存不足呢？因为Jvm堆大小是固定的，所以推断是因堆外内存占用空间较大引起。\n\n于是，使用jmap -histo:live <pid>把进程中的对象信息dump出来，dump信息如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/2.png)\n\n确实发现存在大量DirectByteBuffer对象，这说明内存中确实有大量引用了堆外内存的对象没有被回收！\n\n同时，内存中也对应存在着大量的sun.misc.Cleaner和java.nio.DirectByteBuffer$Deallocator对象。这两个类是用于回收堆外内存的。Cleaner对象是在DirectByteBuffer的构造函数中创建，其中封装了回收堆外内存的逻辑，Cleaner执行clean资源的操作是通过启动Deallocator线程实现的，这个线程把DirectByteBuffer对象引用的堆外内存做回收。\n\n 那么问题来了：\n\n1. 为什么DirectByteBuffer对象没有被回收？\n\n2. 怎么做才能让DirectByteBuffer对象能被及时回收？\n\n问题分析\n--\n<!--more-->\n先看了下启动jvm参数为-Xmn8192M -Xms13312M -Xmx13312M -XX:PermSize=512m -XX:MaxPermSize=512m，很明显，新生代空间配的太大，同时，也没有指定堆外内存的最大空间（-XX:MaxDirectMemorySize），这个参数没设置则默认等于-Xmx，然而服务器总内存只有16G，所以时间长了很可能会发生堆外内存溢出！\n\n因为此服务是kafka集群的消费者，每天接收的报文量在1亿以上，这个过程中产生了大量的DirectByteBuffer对象，这些对象直接引用堆外内存，而同时，这些临时对象也会被回收，由于新生代空间配的很大，触发minor GC的频率不够高，从而不能及时释放已被占用的堆外内存，随着时间的推移，进程启动过一段时间后，堆外内存占用越来越多，最终被OS交换到swap空间。\n\n解决方案\n--\n\n调整jvm参数，减少新生代大小为jvm堆空间的3/8，并指定堆外内存大小，调整后的jvm参数为-Xmn3840M -Xms10240M -Xmx10240M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m\n\n调整后，swap空间占用情况有所好转，但依然占用2G左右！如下图所示。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/3.png)\n\n4月21日调整参数重启服务后，在相当长的一段时间内，swap空间占用率极低，但在5月2日又出现swap空间使用率上升的情况。继续看了下jvm堆空间使用情况和full gc情况，如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/4.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/5.png)\n\n结合上面两张图，可见young gc较多，jvm堆空间整体使用率稳步上升，在5月2日与5月8日发生了两次full gc，并且每次发生fullgc后，jvm堆空间使用率下降较多，swap空间使用量只有小范围下降。这说明有一部分DirectByteBuffer对象在fullgc阶段做了回收，但依然有很多DirectByteBuffer对象没有被回收，仍然占用着堆外内存。\n\n选择一台机器，继续减小其堆空间，jvm参数为-Xmn2048M -Xms6144M -Xmx6144M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m，经过一段时间观察，交换空间使用率很低，应该没再发生内存页交换了，同时gc频率变高，jvm堆空间的使用率在正常范围，说明DirectByteBuffer对象被更及时的回收了。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/6.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/7.png)\n\n<font color=red>由此可见，swap空间占用率高的原因主要还是JVM堆空间太高导致的堆外内存回收不及时。</font>\n\n遗留问题\n--\n\n看了下kafka-client的源码，接受消息时使用的是ByteBuffer，并没有使用DirectByteBuffer，所以很奇怪，这些大量的DirectByteBuffer对象是从哪生成的？哪里用到的？\n\n运行命令jmap -dump:live,format=b,file=/data/server.dump <pid>，dump出内存快照，并用eclipse mat分析后，发现是zkclient中的一个地方用的，由于dump出的这个快照是问题解决后的内存快照，所以并不能说明问题，如果要找到根本原因，还是需要复现swap空间过高的场景，再做内存快照的dump。\n\n\n","source":"_posts/交换空间使用率过高问题分析.md","raw":"---\ntitle: 交换空间使用率过高问题分析\ndate: 2015-06-22 10:02:04\ntags:\n- swap分区\n- 问题分析\n- jvm调优\ncategories:\n- 问题分析\n---\n\n问题现象\n--\n\n线上两台java后台服务每次上线后再过段时间，就出现swap空间使用率较高的现象，而jvm内存使用和垃圾回收情况则很正常。相关图表如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/1.png)\n\n图中，每次上线后过一段时间，swap空间使用量会出现一个陡增，并随时间推移逐渐增加，期间会出现小幅度下降。\n\n首先，从操作系统层面分析，swap空间使用较高，说明是系统物理内存不够用从而发生内存页交换，将部分内存数据搬至虚拟内存空间，也就是swap空间。但究竟是什么原因引起物理内存不足呢？因为Jvm堆大小是固定的，所以推断是因堆外内存占用空间较大引起。\n\n于是，使用jmap -histo:live <pid>把进程中的对象信息dump出来，dump信息如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/2.png)\n\n确实发现存在大量DirectByteBuffer对象，这说明内存中确实有大量引用了堆外内存的对象没有被回收！\n\n同时，内存中也对应存在着大量的sun.misc.Cleaner和java.nio.DirectByteBuffer$Deallocator对象。这两个类是用于回收堆外内存的。Cleaner对象是在DirectByteBuffer的构造函数中创建，其中封装了回收堆外内存的逻辑，Cleaner执行clean资源的操作是通过启动Deallocator线程实现的，这个线程把DirectByteBuffer对象引用的堆外内存做回收。\n\n 那么问题来了：\n\n1. 为什么DirectByteBuffer对象没有被回收？\n\n2. 怎么做才能让DirectByteBuffer对象能被及时回收？\n\n问题分析\n--\n<!--more-->\n先看了下启动jvm参数为-Xmn8192M -Xms13312M -Xmx13312M -XX:PermSize=512m -XX:MaxPermSize=512m，很明显，新生代空间配的太大，同时，也没有指定堆外内存的最大空间（-XX:MaxDirectMemorySize），这个参数没设置则默认等于-Xmx，然而服务器总内存只有16G，所以时间长了很可能会发生堆外内存溢出！\n\n因为此服务是kafka集群的消费者，每天接收的报文量在1亿以上，这个过程中产生了大量的DirectByteBuffer对象，这些对象直接引用堆外内存，而同时，这些临时对象也会被回收，由于新生代空间配的很大，触发minor GC的频率不够高，从而不能及时释放已被占用的堆外内存，随着时间的推移，进程启动过一段时间后，堆外内存占用越来越多，最终被OS交换到swap空间。\n\n解决方案\n--\n\n调整jvm参数，减少新生代大小为jvm堆空间的3/8，并指定堆外内存大小，调整后的jvm参数为-Xmn3840M -Xms10240M -Xmx10240M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m\n\n调整后，swap空间占用情况有所好转，但依然占用2G左右！如下图所示。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/3.png)\n\n4月21日调整参数重启服务后，在相当长的一段时间内，swap空间占用率极低，但在5月2日又出现swap空间使用率上升的情况。继续看了下jvm堆空间使用情况和full gc情况，如下：\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/4.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/5.png)\n\n结合上面两张图，可见young gc较多，jvm堆空间整体使用率稳步上升，在5月2日与5月8日发生了两次full gc，并且每次发生fullgc后，jvm堆空间使用率下降较多，swap空间使用量只有小范围下降。这说明有一部分DirectByteBuffer对象在fullgc阶段做了回收，但依然有很多DirectByteBuffer对象没有被回收，仍然占用着堆外内存。\n\n选择一台机器，继续减小其堆空间，jvm参数为-Xmn2048M -Xms6144M -Xmx6144M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m，经过一段时间观察，交换空间使用率很低，应该没再发生内存页交换了，同时gc频率变高，jvm堆空间的使用率在正常范围，说明DirectByteBuffer对象被更及时的回收了。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/6.png)\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/7.png)\n\n<font color=red>由此可见，swap空间占用率高的原因主要还是JVM堆空间太高导致的堆外内存回收不及时。</font>\n\n遗留问题\n--\n\n看了下kafka-client的源码，接受消息时使用的是ByteBuffer，并没有使用DirectByteBuffer，所以很奇怪，这些大量的DirectByteBuffer对象是从哪生成的？哪里用到的？\n\n运行命令jmap -dump:live,format=b,file=/data/server.dump <pid>，dump出内存快照，并用eclipse mat分析后，发现是zkclient中的一个地方用的，由于dump出的这个快照是问题解决后的内存快照，所以并不能说明问题，如果要找到根本原因，还是需要复现swap空间过高的场景，再做内存快照的dump。\n\n\n","slug":"交换空间使用率过高问题分析","published":1,"updated":"2017-01-23T03:16:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxg2000td968uftq0kkx","content":"<h2 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h2><p>线上两台java后台服务每次上线后再过段时间，就出现swap空间使用率较高的现象，而jvm内存使用和垃圾回收情况则很正常。相关图表如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/1.png\" alt=\"\"></p>\n<p>图中，每次上线后过一段时间，swap空间使用量会出现一个陡增，并随时间推移逐渐增加，期间会出现小幅度下降。</p>\n<p>首先，从操作系统层面分析，swap空间使用较高，说明是系统物理内存不够用从而发生内存页交换，将部分内存数据搬至虚拟内存空间，也就是swap空间。但究竟是什么原因引起物理内存不足呢？因为Jvm堆大小是固定的，所以推断是因堆外内存占用空间较大引起。</p>\n<p>于是，使用jmap -histo:live <pid>把进程中的对象信息dump出来，dump信息如下：</pid></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/2.png\" alt=\"\"></p>\n<p>确实发现存在大量DirectByteBuffer对象，这说明内存中确实有大量引用了堆外内存的对象没有被回收！</p>\n<p>同时，内存中也对应存在着大量的sun.misc.Cleaner和java.nio.DirectByteBuffer$Deallocator对象。这两个类是用于回收堆外内存的。Cleaner对象是在DirectByteBuffer的构造函数中创建，其中封装了回收堆外内存的逻辑，Cleaner执行clean资源的操作是通过启动Deallocator线程实现的，这个线程把DirectByteBuffer对象引用的堆外内存做回收。</p>\n<p> 那么问题来了：</p>\n<ol>\n<li><p>为什么DirectByteBuffer对象没有被回收？</p>\n</li>\n<li><p>怎么做才能让DirectByteBuffer对象能被及时回收？</p>\n</li>\n</ol>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2><a id=\"more\"></a>\n<p>先看了下启动jvm参数为-Xmn8192M -Xms13312M -Xmx13312M -XX:PermSize=512m -XX:MaxPermSize=512m，很明显，新生代空间配的太大，同时，也没有指定堆外内存的最大空间（-XX:MaxDirectMemorySize），这个参数没设置则默认等于-Xmx，然而服务器总内存只有16G，所以时间长了很可能会发生堆外内存溢出！</p>\n<p>因为此服务是kafka集群的消费者，每天接收的报文量在1亿以上，这个过程中产生了大量的DirectByteBuffer对象，这些对象直接引用堆外内存，而同时，这些临时对象也会被回收，由于新生代空间配的很大，触发minor GC的频率不够高，从而不能及时释放已被占用的堆外内存，随着时间的推移，进程启动过一段时间后，堆外内存占用越来越多，最终被OS交换到swap空间。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>调整jvm参数，减少新生代大小为jvm堆空间的3/8，并指定堆外内存大小，调整后的jvm参数为-Xmn3840M -Xms10240M -Xmx10240M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m</p>\n<p>调整后，swap空间占用情况有所好转，但依然占用2G左右！如下图所示。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/3.png\" alt=\"\"></p>\n<p>4月21日调整参数重启服务后，在相当长的一段时间内，swap空间占用率极低，但在5月2日又出现swap空间使用率上升的情况。继续看了下jvm堆空间使用情况和full gc情况，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/4.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/5.png\" alt=\"\"></p>\n<p>结合上面两张图，可见young gc较多，jvm堆空间整体使用率稳步上升，在5月2日与5月8日发生了两次full gc，并且每次发生fullgc后，jvm堆空间使用率下降较多，swap空间使用量只有小范围下降。这说明有一部分DirectByteBuffer对象在fullgc阶段做了回收，但依然有很多DirectByteBuffer对象没有被回收，仍然占用着堆外内存。</p>\n<p>选择一台机器，继续减小其堆空间，jvm参数为-Xmn2048M -Xms6144M -Xmx6144M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m，经过一段时间观察，交换空间使用率很低，应该没再发生内存页交换了，同时gc频率变高，jvm堆空间的使用率在正常范围，说明DirectByteBuffer对象被更及时的回收了。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/6.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/7.png\" alt=\"\"></p>\n<font color=\"red\">由此可见，swap空间占用率高的原因主要还是JVM堆空间太高导致的堆外内存回收不及时。</font>\n\n<h2 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h2><p>看了下kafka-client的源码，接受消息时使用的是ByteBuffer，并没有使用DirectByteBuffer，所以很奇怪，这些大量的DirectByteBuffer对象是从哪生成的？哪里用到的？</p>\n<p>运行命令jmap -dump:live,format=b,file=/data/server.dump <pid>，dump出内存快照，并用eclipse mat分析后，发现是zkclient中的一个地方用的，由于dump出的这个快照是问题解决后的内存快照，所以并不能说明问题，如果要找到根本原因，还是需要复现swap空间过高的场景，再做内存快照的dump。</pid></p>\n","excerpt":"<h2 id=\"问题现象\"><a href=\"#问题现象\" class=\"headerlink\" title=\"问题现象\"></a>问题现象</h2><p>线上两台java后台服务每次上线后再过段时间，就出现swap空间使用率较高的现象，而jvm内存使用和垃圾回收情况则很正常。相关图表如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/1.png\" alt=\"\"></p>\n<p>图中，每次上线后过一段时间，swap空间使用量会出现一个陡增，并随时间推移逐渐增加，期间会出现小幅度下降。</p>\n<p>首先，从操作系统层面分析，swap空间使用较高，说明是系统物理内存不够用从而发生内存页交换，将部分内存数据搬至虚拟内存空间，也就是swap空间。但究竟是什么原因引起物理内存不足呢？因为Jvm堆大小是固定的，所以推断是因堆外内存占用空间较大引起。</p>\n<p>于是，使用jmap -histo:live <pid>把进程中的对象信息dump出来，dump信息如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/2.png\" alt=\"\"></p>\n<p>确实发现存在大量DirectByteBuffer对象，这说明内存中确实有大量引用了堆外内存的对象没有被回收！</p>\n<p>同时，内存中也对应存在着大量的sun.misc.Cleaner和java.nio.DirectByteBuffer$Deallocator对象。这两个类是用于回收堆外内存的。Cleaner对象是在DirectByteBuffer的构造函数中创建，其中封装了回收堆外内存的逻辑，Cleaner执行clean资源的操作是通过启动Deallocator线程实现的，这个线程把DirectByteBuffer对象引用的堆外内存做回收。</p>\n<p> 那么问题来了：</p>\n<ol>\n<li><p>为什么DirectByteBuffer对象没有被回收？</p>\n</li>\n<li><p>怎么做才能让DirectByteBuffer对象能被及时回收？</p>\n</li>\n</ol>\n<h2 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h2>","more":"<p>先看了下启动jvm参数为-Xmn8192M -Xms13312M -Xmx13312M -XX:PermSize=512m -XX:MaxPermSize=512m，很明显，新生代空间配的太大，同时，也没有指定堆外内存的最大空间（-XX:MaxDirectMemorySize），这个参数没设置则默认等于-Xmx，然而服务器总内存只有16G，所以时间长了很可能会发生堆外内存溢出！</p>\n<p>因为此服务是kafka集群的消费者，每天接收的报文量在1亿以上，这个过程中产生了大量的DirectByteBuffer对象，这些对象直接引用堆外内存，而同时，这些临时对象也会被回收，由于新生代空间配的很大，触发minor GC的频率不够高，从而不能及时释放已被占用的堆外内存，随着时间的推移，进程启动过一段时间后，堆外内存占用越来越多，最终被OS交换到swap空间。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>调整jvm参数，减少新生代大小为jvm堆空间的3/8，并指定堆外内存大小，调整后的jvm参数为-Xmn3840M -Xms10240M -Xmx10240M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m</p>\n<p>调整后，swap空间占用情况有所好转，但依然占用2G左右！如下图所示。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/3.png\" alt=\"\"></p>\n<p>4月21日调整参数重启服务后，在相当长的一段时间内，swap空间占用率极低，但在5月2日又出现swap空间使用率上升的情况。继续看了下jvm堆空间使用情况和full gc情况，如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/4.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/5.png\" alt=\"\"></p>\n<p>结合上面两张图，可见young gc较多，jvm堆空间整体使用率稳步上升，在5月2日与5月8日发生了两次full gc，并且每次发生fullgc后，jvm堆空间使用率下降较多，swap空间使用量只有小范围下降。这说明有一部分DirectByteBuffer对象在fullgc阶段做了回收，但依然有很多DirectByteBuffer对象没有被回收，仍然占用着堆外内存。</p>\n<p>选择一台机器，继续减小其堆空间，jvm参数为-Xmn2048M -Xms6144M -Xmx6144M -XX:PermSize=512m -XX:MaxPermSize=512m -XX:MaxDirectMemorySize=4096m，经过一段时间观察，交换空间使用率很低，应该没再发生内存页交换了，同时gc频率变高，jvm堆空间的使用率在正常范围，说明DirectByteBuffer对象被更及时的回收了。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/6.png\" alt=\"\"></p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20150622%E4%BA%A4%E6%8D%A2%E7%A9%BA%E9%97%B4%E4%BD%BF%E7%94%A8%E7%8E%87%E8%BF%87%E9%AB%98%E9%97%AE%E9%A2%98/7.png\" alt=\"\"></p>\n<font color=red>由此可见，swap空间占用率高的原因主要还是JVM堆空间太高导致的堆外内存回收不及时。</font>\n\n<h2 id=\"遗留问题\"><a href=\"#遗留问题\" class=\"headerlink\" title=\"遗留问题\"></a>遗留问题</h2><p>看了下kafka-client的源码，接受消息时使用的是ByteBuffer，并没有使用DirectByteBuffer，所以很奇怪，这些大量的DirectByteBuffer对象是从哪生成的？哪里用到的？</p>\n<p>运行命令jmap -dump:live,format=b,file=/data/server.dump <pid>，dump出内存快照，并用eclipse mat分析后，发现是zkclient中的一个地方用的，由于dump出的这个快照是问题解决后的内存快照，所以并不能说明问题，如果要找到根本原因，还是需要复现swap空间过高的场景，再做内存快照的dump。</p>"},{"title":"使用shell切割文件","date":"2013-03-07T05:49:44.000Z","_content":"\n最近工作中需要使用shell，从远程rsync数据过来预处理后提交到hdfs中，再调用pig脚本在hadoop集群上处理数据，完了fs -get下来结果文件并进行进一步处理，再推送给其他系统使用。其间需要将pig作业的结果文件合并并且均分为10个文件推送给远程服务器上的应用加载。因为结果文件比较大，远程应用拿到结果文件后使用多线程加载，所以需均分为10个小文件。虽然mr作业出来的文件结果也是part-00000、part-00001，但若pig脚本中不指定reduce任务数，产生的结果文件个数是3个，而且下下来之后需要进行重命名。与其这样还不如自己处理。\n\n```java\nrm -rf $TODAY_ALL_INDUSKEY\n\tfor allName in `find $TODAY_ALL_TMP_DIR -name \"part-*\"`\n\t\tdo\n\t\t\tINFO \"Processing result file\" $allName\n\t\t\tcat $allName >> $TODAY_ALL_INDUSKEY   #把结果文件重定向到一个文件\n\tdone\n\n\tALL_INDUSKEY_FILE_NUM=10    #拆分的文件数量\n\tALL_KEY_LINES=0             #结果文件行数\n\tINFO \"Split $TODAY_ALL_INDUSKEY into $ALL_INDUSKEY_FILE_NUM files\"\n\tfor str in `wc -l $TODAY_ALL_INDUSKEY`;\tdo\n\t\tt=`expr match $str \"[1-9][0-9]*$\"`;\n\t\tif [ $t -gt 0 ]; then\n\t\t\tALL_KEY_LINES=$str         #获取结果文件行数\n\t\t\tINFO \"Line of $TODAY_ALL_INDUSKEY is $ALL_KEY_LINES\"\n\t\tfi\n\tdone\n\tif [ $ALL_KEY_LINES -ne 0 ]; then\n\t\ttmpLine=`echo \"scale=2;$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM\"|bc`    #每个小文件的行数，保留两位小数\n\t\tINFO \"$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM=$tmpLine\"\n\t\tsubFileLines=`echo $((${tmpLine//.*/+1}))`        #向上取整\n\t\tINFO \"Per subfile lines:$subFileLines\"\n\t\tsplit -l $subFileLines -a 1 -d $TODAY_ALL_INDUSKEY $TODAY_ALL_INDUSKEY\"_\"      #拆分文件\n\tfi\n\n\tif [ -f $TODAY_ALL_INDUSKEY ]; then\n\t\ttouch $TODAY_ALL_INDUSKEY.done       #创建done文件\n\t\trm -rf $TODAY_ALL_TMP_DIR\n\t\tINFO \"Process result file dir $TODAY_ALL_TMP_DIR done!\"\n\tfi\n```\n\n","source":"_posts/使用shell切割文件.md","raw":"---\ntitle: 使用shell切割文件\ndate: 2013-03-07 13:49:44\ntags:\n- shell\n- linux\n---\n\n最近工作中需要使用shell，从远程rsync数据过来预处理后提交到hdfs中，再调用pig脚本在hadoop集群上处理数据，完了fs -get下来结果文件并进行进一步处理，再推送给其他系统使用。其间需要将pig作业的结果文件合并并且均分为10个文件推送给远程服务器上的应用加载。因为结果文件比较大，远程应用拿到结果文件后使用多线程加载，所以需均分为10个小文件。虽然mr作业出来的文件结果也是part-00000、part-00001，但若pig脚本中不指定reduce任务数，产生的结果文件个数是3个，而且下下来之后需要进行重命名。与其这样还不如自己处理。\n\n```java\nrm -rf $TODAY_ALL_INDUSKEY\n\tfor allName in `find $TODAY_ALL_TMP_DIR -name \"part-*\"`\n\t\tdo\n\t\t\tINFO \"Processing result file\" $allName\n\t\t\tcat $allName >> $TODAY_ALL_INDUSKEY   #把结果文件重定向到一个文件\n\tdone\n\n\tALL_INDUSKEY_FILE_NUM=10    #拆分的文件数量\n\tALL_KEY_LINES=0             #结果文件行数\n\tINFO \"Split $TODAY_ALL_INDUSKEY into $ALL_INDUSKEY_FILE_NUM files\"\n\tfor str in `wc -l $TODAY_ALL_INDUSKEY`;\tdo\n\t\tt=`expr match $str \"[1-9][0-9]*$\"`;\n\t\tif [ $t -gt 0 ]; then\n\t\t\tALL_KEY_LINES=$str         #获取结果文件行数\n\t\t\tINFO \"Line of $TODAY_ALL_INDUSKEY is $ALL_KEY_LINES\"\n\t\tfi\n\tdone\n\tif [ $ALL_KEY_LINES -ne 0 ]; then\n\t\ttmpLine=`echo \"scale=2;$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM\"|bc`    #每个小文件的行数，保留两位小数\n\t\tINFO \"$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM=$tmpLine\"\n\t\tsubFileLines=`echo $((${tmpLine//.*/+1}))`        #向上取整\n\t\tINFO \"Per subfile lines:$subFileLines\"\n\t\tsplit -l $subFileLines -a 1 -d $TODAY_ALL_INDUSKEY $TODAY_ALL_INDUSKEY\"_\"      #拆分文件\n\tfi\n\n\tif [ -f $TODAY_ALL_INDUSKEY ]; then\n\t\ttouch $TODAY_ALL_INDUSKEY.done       #创建done文件\n\t\trm -rf $TODAY_ALL_TMP_DIR\n\t\tINFO \"Process result file dir $TODAY_ALL_TMP_DIR done!\"\n\tfi\n```\n\n","slug":"使用shell切割文件","published":1,"updated":"2016-07-04T15:51:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxg5000xd968tfvwa9fs","content":"<p>最近工作中需要使用shell，从远程rsync数据过来预处理后提交到hdfs中，再调用pig脚本在hadoop集群上处理数据，完了fs -get下来结果文件并进行进一步处理，再推送给其他系统使用。其间需要将pig作业的结果文件合并并且均分为10个文件推送给远程服务器上的应用加载。因为结果文件比较大，远程应用拿到结果文件后使用多线程加载，所以需均分为10个小文件。虽然mr作业出来的文件结果也是part-00000、part-00001，但若pig脚本中不指定reduce任务数，产生的结果文件个数是3个，而且下下来之后需要进行重命名。与其这样还不如自己处理。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf $TODAY_ALL_INDUSKEY</div><div class=\"line\">\tfor allName in `find $TODAY_ALL_TMP_DIR -name \"part-*\"`</div><div class=\"line\">\t\tdo</div><div class=\"line\">\t\t\tINFO \"Processing result file\" $allName</div><div class=\"line\">\t\t\tcat $allName &gt;&gt; $TODAY_ALL_INDUSKEY   #把结果文件重定向到一个文件</div><div class=\"line\">\tdone</div><div class=\"line\"></div><div class=\"line\">\tALL_INDUSKEY_FILE_NUM=10    #拆分的文件数量</div><div class=\"line\">\tALL_KEY_LINES=0             #结果文件行数</div><div class=\"line\">\tINFO \"Split $TODAY_ALL_INDUSKEY into $ALL_INDUSKEY_FILE_NUM files\"</div><div class=\"line\">\tfor str in `wc -l $TODAY_ALL_INDUSKEY`;\tdo</div><div class=\"line\">\t\tt=`expr match $str \"[1-9][0-9]*$\"`;</div><div class=\"line\">\t\tif [ $t -gt 0 ]; then</div><div class=\"line\">\t\t\tALL_KEY_LINES=$str         #获取结果文件行数</div><div class=\"line\">\t\t\tINFO \"Line of $TODAY_ALL_INDUSKEY is $ALL_KEY_LINES\"</div><div class=\"line\">\t\tfi</div><div class=\"line\">\tdone</div><div class=\"line\">\tif [ $ALL_KEY_LINES -ne 0 ]; then</div><div class=\"line\">\t\ttmpLine=`echo \"scale=2;$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM\"|bc`    #每个小文件的行数，保留两位小数</div><div class=\"line\">\t\tINFO \"$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM=$tmpLine\"</div><div class=\"line\">\t\tsubFileLines=`echo $(($&#123;tmpLine//.*/+1&#125;))`        #向上取整</div><div class=\"line\">\t\tINFO \"Per subfile lines:$subFileLines\"</div><div class=\"line\">\t\tsplit -l $subFileLines -a 1 -d $TODAY_ALL_INDUSKEY $TODAY_ALL_INDUSKEY\"_\"      #拆分文件</div><div class=\"line\">\tfi</div><div class=\"line\"></div><div class=\"line\">\tif [ -f $TODAY_ALL_INDUSKEY ]; then</div><div class=\"line\">\t\ttouch $TODAY_ALL_INDUSKEY.done       #创建done文件</div><div class=\"line\">\t\trm -rf $TODAY_ALL_TMP_DIR</div><div class=\"line\">\t\tINFO \"Process result file dir $TODAY_ALL_TMP_DIR done!\"</div><div class=\"line\">\tfi</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>最近工作中需要使用shell，从远程rsync数据过来预处理后提交到hdfs中，再调用pig脚本在hadoop集群上处理数据，完了fs -get下来结果文件并进行进一步处理，再推送给其他系统使用。其间需要将pig作业的结果文件合并并且均分为10个文件推送给远程服务器上的应用加载。因为结果文件比较大，远程应用拿到结果文件后使用多线程加载，所以需均分为10个小文件。虽然mr作业出来的文件结果也是part-00000、part-00001，但若pig脚本中不指定reduce任务数，产生的结果文件个数是3个，而且下下来之后需要进行重命名。与其这样还不如自己处理。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">rm -rf $TODAY_ALL_INDUSKEY</div><div class=\"line\">\tfor allName in `find $TODAY_ALL_TMP_DIR -name \"part-*\"`</div><div class=\"line\">\t\tdo</div><div class=\"line\">\t\t\tINFO \"Processing result file\" $allName</div><div class=\"line\">\t\t\tcat $allName &gt;&gt; $TODAY_ALL_INDUSKEY   #把结果文件重定向到一个文件</div><div class=\"line\">\tdone</div><div class=\"line\"></div><div class=\"line\">\tALL_INDUSKEY_FILE_NUM=10    #拆分的文件数量</div><div class=\"line\">\tALL_KEY_LINES=0             #结果文件行数</div><div class=\"line\">\tINFO \"Split $TODAY_ALL_INDUSKEY into $ALL_INDUSKEY_FILE_NUM files\"</div><div class=\"line\">\tfor str in `wc -l $TODAY_ALL_INDUSKEY`;\tdo</div><div class=\"line\">\t\tt=`expr match $str \"[1-9][0-9]*$\"`;</div><div class=\"line\">\t\tif [ $t -gt 0 ]; then</div><div class=\"line\">\t\t\tALL_KEY_LINES=$str         #获取结果文件行数</div><div class=\"line\">\t\t\tINFO \"Line of $TODAY_ALL_INDUSKEY is $ALL_KEY_LINES\"</div><div class=\"line\">\t\tfi</div><div class=\"line\">\tdone</div><div class=\"line\">\tif [ $ALL_KEY_LINES -ne 0 ]; then</div><div class=\"line\">\t\ttmpLine=`echo \"scale=2;$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM\"|bc`    #每个小文件的行数，保留两位小数</div><div class=\"line\">\t\tINFO \"$ALL_KEY_LINES/$ALL_INDUSKEY_FILE_NUM=$tmpLine\"</div><div class=\"line\">\t\tsubFileLines=`echo $(($&#123;tmpLine//.*/+1&#125;))`        #向上取整</div><div class=\"line\">\t\tINFO \"Per subfile lines:$subFileLines\"</div><div class=\"line\">\t\tsplit -l $subFileLines -a 1 -d $TODAY_ALL_INDUSKEY $TODAY_ALL_INDUSKEY\"_\"      #拆分文件</div><div class=\"line\">\tfi</div><div class=\"line\"></div><div class=\"line\">\tif [ -f $TODAY_ALL_INDUSKEY ]; then</div><div class=\"line\">\t\ttouch $TODAY_ALL_INDUSKEY.done       #创建done文件</div><div class=\"line\">\t\trm -rf $TODAY_ALL_TMP_DIR</div><div class=\"line\">\t\tINFO \"Process result file dir $TODAY_ALL_TMP_DIR done!\"</div><div class=\"line\">\tfi</div></pre></td></tr></table></figure>\n"},{"title":"使用hexo+gitpage搭建博客","date":"2014-09-02T11:50:40.000Z","_content":"\n环境准备\n--\n系统：mac osx  \n软件：Node.js，npm，git，hexo  \n具体安装以及git与github打通的配置就不详述了，可以google到各种方法。  \n\nhexo命令\n--\nhexo init &lt;folder&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #表示执行init命令初始化hexo到你指定的目录  \n<font color=\"red\">以下命令需要在&lt;folder&gt;目录下执行：</font>  \nhexo generate  &nbsp;&nbsp;&nbsp;#自动根据当前目录下文件,生成静态网页  \nhexo server &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#运行本地服务  \n  \n启动服务后，就可以通过访问 http://localhost:4000 来看看效果了。  \n接下来，可以使用以下命令来创建一篇新博文：  \nhexo new \"test blog 1\"  \n创建一个名为test blog 1的博客页面，对应的md文件路径是&lt;folder&gt;/source/_posts\\test blog 1.md  \n  \n接下来就可以在这个md文件中写文章了，我使用的是MacDown来编辑md文件，支持实时查看页面效果，还是挺好用的。\n\n发布博客\n--\n文章写好后，通过以下方式发布到github上。  \n1.编辑./_config.yml文件，修改以下部分，配置本地内容同步至github：  \n\n>  deploy:  \n>  &nbsp;&nbsp;type: git  \n>  &nbsp;&nbsp;repository: git@github.com:maohong/maohong.github.io.git  \n>  &nbsp;&nbsp;branch: master  \n\n2.执行hexo generate(hexo g)生成html内容  \n3.执行hexo deploy(hexo d)讲更新内容发布至guthub  \n  \n然后就可以访问主页查看效果了，可以使用github帐户名.github.io进行访问, 也可以设置个性域名。\n","source":"_posts/使用hexo-gitpage搭建博客.md","raw":"---\ntitle: 使用hexo+gitpage搭建博客\ndate: 2014-09-02 19:50:40\ntags: \n- hexo\n- gitpage\ncategories: \n- 工具\n---\n\n环境准备\n--\n系统：mac osx  \n软件：Node.js，npm，git，hexo  \n具体安装以及git与github打通的配置就不详述了，可以google到各种方法。  \n\nhexo命令\n--\nhexo init &lt;folder&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #表示执行init命令初始化hexo到你指定的目录  \n<font color=\"red\">以下命令需要在&lt;folder&gt;目录下执行：</font>  \nhexo generate  &nbsp;&nbsp;&nbsp;#自动根据当前目录下文件,生成静态网页  \nhexo server &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#运行本地服务  \n  \n启动服务后，就可以通过访问 http://localhost:4000 来看看效果了。  \n接下来，可以使用以下命令来创建一篇新博文：  \nhexo new \"test blog 1\"  \n创建一个名为test blog 1的博客页面，对应的md文件路径是&lt;folder&gt;/source/_posts\\test blog 1.md  \n  \n接下来就可以在这个md文件中写文章了，我使用的是MacDown来编辑md文件，支持实时查看页面效果，还是挺好用的。\n\n发布博客\n--\n文章写好后，通过以下方式发布到github上。  \n1.编辑./_config.yml文件，修改以下部分，配置本地内容同步至github：  \n\n>  deploy:  \n>  &nbsp;&nbsp;type: git  \n>  &nbsp;&nbsp;repository: git@github.com:maohong/maohong.github.io.git  \n>  &nbsp;&nbsp;branch: master  \n\n2.执行hexo generate(hexo g)生成html内容  \n3.执行hexo deploy(hexo d)讲更新内容发布至guthub  \n  \n然后就可以访问主页查看效果了，可以使用github帐户名.github.io进行访问, 也可以设置个性域名。\n","slug":"使用hexo-gitpage搭建博客","published":1,"updated":"2016-07-03T13:31:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxg7000zd968mt653kgp","content":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>系统：mac osx<br>软件：Node.js，npm，git，hexo<br>具体安装以及git与github打通的配置就不详述了，可以google到各种方法。  </p>\n<h2 id=\"hexo命令\"><a href=\"#hexo命令\" class=\"headerlink\" title=\"hexo命令\"></a>hexo命令</h2><p>hexo init &lt;folder&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #表示执行init命令初始化hexo到你指定的目录  </p>\n<p><font color=\"red\">以下命令需要在&lt;folder&gt;目录下执行：</font><br>hexo generate  &nbsp;&nbsp;&nbsp;#自动根据当前目录下文件,生成静态网页<br>hexo server &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#运行本地服务  </p>\n<p>启动服务后，就可以通过访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 来看看效果了。<br>接下来，可以使用以下命令来创建一篇新博文：<br>hexo new “test blog 1”<br>创建一个名为test blog 1的博客页面，对应的md文件路径是&lt;folder&gt;/source/_posts\\test blog 1.md  </p>\n<p>接下来就可以在这个md文件中写文章了，我使用的是MacDown来编辑md文件，支持实时查看页面效果，还是挺好用的。</p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>文章写好后，通过以下方式发布到github上。<br>1.编辑./_config.yml文件，修改以下部分，配置本地内容同步至github：  </p>\n<blockquote>\n<p> deploy:<br> &nbsp;&nbsp;type: git<br> &nbsp;&nbsp;repository: git@github.com:maohong/maohong.github.io.git<br> &nbsp;&nbsp;branch: master  </p>\n</blockquote>\n<p>2.执行hexo generate(hexo g)生成html内容<br>3.执行hexo deploy(hexo d)讲更新内容发布至guthub  </p>\n<p>然后就可以访问主页查看效果了，可以使用github帐户名.github.io进行访问, 也可以设置个性域名。</p>\n","excerpt":"","more":"<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><p>系统：mac osx<br>软件：Node.js，npm，git，hexo<br>具体安装以及git与github打通的配置就不详述了，可以google到各种方法。  </p>\n<h2 id=\"hexo命令\"><a href=\"#hexo命令\" class=\"headerlink\" title=\"hexo命令\"></a>hexo命令</h2><p>hexo init &lt;folder&gt;  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #表示执行init命令初始化hexo到你指定的目录  </p>\n<p><font color=\"red\">以下命令需要在&lt;folder&gt;目录下执行：</font><br>hexo generate  &nbsp;&nbsp;&nbsp;#自动根据当前目录下文件,生成静态网页<br>hexo server &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#运行本地服务  </p>\n<p>启动服务后，就可以通过访问 <a href=\"http://localhost:4000\">http://localhost:4000</a> 来看看效果了。<br>接下来，可以使用以下命令来创建一篇新博文：<br>hexo new “test blog 1”<br>创建一个名为test blog 1的博客页面，对应的md文件路径是&lt;folder&gt;/source/_posts\\test blog 1.md  </p>\n<p>接下来就可以在这个md文件中写文章了，我使用的是MacDown来编辑md文件，支持实时查看页面效果，还是挺好用的。</p>\n<h2 id=\"发布博客\"><a href=\"#发布博客\" class=\"headerlink\" title=\"发布博客\"></a>发布博客</h2><p>文章写好后，通过以下方式发布到github上。<br>1.编辑./_config.yml文件，修改以下部分，配置本地内容同步至github：  </p>\n<blockquote>\n<p> deploy:<br> &nbsp;&nbsp;type: git<br> &nbsp;&nbsp;repository: git@github.com:maohong/maohong.github.io.git<br> &nbsp;&nbsp;branch: master  </p>\n</blockquote>\n<p>2.执行hexo generate(hexo g)生成html内容<br>3.执行hexo deploy(hexo d)讲更新内容发布至guthub  </p>\n<p>然后就可以访问主页查看效果了，可以使用github帐户名.github.io进行访问, 也可以设置个性域名。</p>\n"},{"title":"基于zookeeper的分布式独占锁实现","date":"2014-05-13T13:05:01.000Z","_content":"\n背景\n--\n\n在分布式系统中，经常遇到这样一种场景：选举一个节点执行某一个任务，当此节点宕机后，其他节点可以接管并继续执行这个任务。由于各个节点运行的代码是一样的，彼此之间也是平等的，各个节点如何可以知道自己是否可以执行这个任务呢？当有节点宕机时，又如何判断自己是否可以接管任务呢？在我们的分布式任务调度系统中，需要选取调度器集群中的一个节点进行轮询任务状态，这里使用了zookeeper来实现一个统一的分布式锁，从而选出轮询节点。\n\n原理\n--\n\n如图所示，每台服务器启动后，都在同一目录下建一个临时顺序节点（EPHEMERAL_SEQUENTIAL），并获取此目录下的所有节点信息，如果自己的序号是最小的，就认为获取到了锁，可以执行任务。若自己的节点不是最小的，就认为自己没有获取到锁，不执行任务，同时，在比自己小1个序号的节点上增加监听。当比自己小1个序号的节点发生变化的时候，再次检查自己是否是最小序号的节点，如果是则获取锁，否则继续监听比自己小1个序号的节点。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140502-%E5%9F%BA%E4%BA%8Ezookeeper%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%8B%AC%E5%8D%A0%E9%94%81%E5%AE%9E%E7%8E%B0/1.jpg)\n\n实现\n--\n\n以下是一个demo实现程序：\n\n```java\npublic class DistributedExclusiveLock implements Watcher\n{\n\tprivate ZooKeeper zk;\n\tprivate String lockDir = \"/testlock\";//锁节点所在zk的目录\n\tprivate String lockSymbol = \"_lock_\";//锁节点标志\n\tprivate String lockName;//锁节点前缀，构造锁时由外部传入\n\tprivate String waitNodePath;//等待的前一个锁的节点名称\n\tprivate String myNodePath;//当前锁\n\tprivate CountDownLatch latch;//计数器\n\tprivate String threadId;\n\n\t/**\n\t * 创建分布式锁\n\t * @param lockName 竞争资源标志,lockName中不能包含单词lock\n\t * @throws Exception\n\t */\n\tpublic DistributedExclusiveLock(String zkServers, String lockName) throws Exception\n\t{\n\t\t//简单校验lockDir路径\n\t\tif (!lockDir.startsWith(\"/\"))\n\t\t\tthrow new Exception(\"LockDir Path must start with / character! lockDir=\" + lockDir);\n\t\tif (lockDir.endsWith(\"/\"))\n\t\t\tthrow new Exception(\"LockDir Path must not end with / character! lockDir=\" + lockDir);\n\n\t\tthis.lockName = lockName;\n\t\tthis.threadId = getThreadId();\n\t\t// 创建一个与服务器的连接\n\t\ttry\n\t\t{\n\t\t\tzk = new ZooKeeper(zkServers, 3000, this);\n\t\t\tcreateLockDirIfNecessary(lockDir);\n\t\t} catch (Exception e) {\n\t\t\tthrow new Exception(\"Error while initializing DistributedExclusiveLock!\" + e.getMessage(), e);\n\t\t}\n\t}\n\n\tprivate String getThreadId()\n\t{\n\t\treturn \"Thread-\" + Thread.currentThread().getId();\n\t}\n\n\t/**\n\t * 在zk上建立lock目录，如果目录不存在，逐级创建节点\n\t */\n\tprivate synchronized void createLockDirIfNecessary(String zkDir) throws KeeperException, InterruptedException\n\t{\n\t\t//zkDir是一级节点，如/cloudscheduler\n\t\tif (zkDir.indexOf(\"/\") == zkDir.lastIndexOf(\"/\"))\n\t\t{\n\t\t\tStat stat = zk.exists(zkDir, false);\n\t\t\tif(stat == null){\n\t\t\t\t// 创建一级节点\n\t\t\t\tzk.create(zkDir, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t}\n\t\t}\n\t\telse\t//zkDir非一级节点\n\t\t{\n\t\t\tString parentDir = zkDir.substring(0, zkDir.lastIndexOf(\"/\"));\n\t\t\tif (zk.exists(parentDir, false) != null)\n\t\t\t{\t//如果父节点存在，建当前节点\n\t\t\t\tStat stat = zk.exists(zkDir, false);\n\t\t\t\tif(stat == null){\n\t\t\t\t\t// 创建非一级节点\n\t\t\t\t\tzk.create(zkDir, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\t//否则，先建父节点，再建当前节点\n\t\t\t\tcreateLockDirIfNecessary(parentDir);\n\t\t\t\tcreateLockDirIfNecessary(zkDir);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * zookeeper节点的监视器\n\t */\n\t@Override\n\tpublic void process(WatchedEvent event)\n\t{\n\t\tif (event.getType() == EventType.NodeDeleted)\n\t\t{\n\t\t\tif (this.latch!=null)\n\t\t\t\tthis.latch.countDown();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tList<String> childrenNodes = zk.getChildren(lockDir, false);\n\t\t\t\t// 排序\n\t\t\t\tCollections.sort(childrenNodes);\n\t\t\t\tSystem.out.println(\"Node: \" + event.getPath()\n\t\t\t\t\t\t+ \" change event is deleted! Current locked nodes:\\n\\t\"\n\t\t\t\t\t\t+ StringUtils.join(childrenNodes,\"\\n\\t\"));\n\t\t\t}\n\t\t\tcatch (KeeperException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n    }\n\n\tpublic boolean tryLock()\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(tryLockInner())\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn waitForLockInner(waitNodePath);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate boolean tryLockInner() throws Exception\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(lockName.contains(lockSymbol))\n\t\t\t\tthrow new Exception(\"lockName can not contains \" + lockSymbol);\n\t\t\t//创建临时子节点\n\t\t\tmyNodePath = zk.create(lockDir + \"/\" + lockName + lockSymbol, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);\n\t\t\tSystem.out.println(threadId + \" created \" + myNodePath);\n\t\t\t//取出所有子节点\n\t\t\tList<String> subNodes = zk.getChildren(lockDir, false);\n\t\t\t//取出所有lockName的锁\n\t\t\tList<String> lockedNodes = new ArrayList<String>();\n\t\t\tfor (String node : subNodes) {\n\t\t\t\tString nodePrefix = node.split(lockSymbol)[0];\n\t\t\t\tif(nodePrefix.equals(lockName)){//对锁名做个判断，前缀相同即为同一组锁\n\t\t\t\t\tlockedNodes.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(lockedNodes);\n\t\t\tSystem.out.println(\"Current locked nodes: \\n\\t\" + StringUtils.join(lockedNodes, \"\\n\\t\"));\n\t\t\tif(myNodePath.equals(lockDir + \"/\" + lockedNodes.get(0))){\n\t\t\t\t//如果是最小的节点,则表示取得锁\n\t            return true;\n\t        }\n\t\t\t//如果不是最小的节点，找到比自己小1的节点，在List中的位置是自己的前一位\n\t\t\tString myZnodeName = myNodePath.substring(myNodePath.lastIndexOf(\"/\") + 1);\n\t\t\twaitNodePath = lockDir + \"/\" + lockedNodes.get(lockedNodes.indexOf(myZnodeName)-1);\n\t\t}\n\t\tcatch (KeeperException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\tcatch (InterruptedException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean waitForLockInner(String waitPath) throws InterruptedException, KeeperException {\n        Stat stat = zk.exists(waitPath, true);\n        //判断比自己小一个数的节点是否存在,如果存在则需等待锁,同时注册监听\n        if (stat != null)\n        {\n        \tSystem.out.println(threadId + \" waiting for \" + waitPath);\n        \tthis.latch = new CountDownLatch(1);\n        \tthis.latch.await(); //不加超时时间，无限等待\n        \t//\n        \t//waiting\n        \t//Zzzzz...\n        \t//still waiting\n        \t//\n        \t// 探测到节点变化，刷新节点信息\n        \tthis.latch = null;\n        \ttry\n\t\t\t{\n\t\t\t\t// 确认myNodePath是否真的是列表中的最小节点\n\t\t\t\tList<String> childrenNodes = zk.getChildren(lockDir, false);\n\t\t\t\t// 排序\n\t\t\t\tCollections.sort(childrenNodes);\n\t\t\t\tif(myNodePath.equals(lockDir + \"/\" + childrenNodes.get(0)))\n\t\t\t\t\treturn true;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t    // 说明waitNodePath是由于出现异常而挂掉的 , 更新waitNodePath\n\t\t\t\t\tString thisNodeName = myNodePath.substring(myNodePath.lastIndexOf(\"/\") + 1);\n\t\t\t\t\tint index = childrenNodes.indexOf(thisNodeName);\n\t\t\t\t\twaitNodePath = lockDir + \"/\" + childrenNodes.get(index - 1);\n\t\t\t\t\t//重新等待锁\n\t\t\t\t\treturn waitForLockInner(waitNodePath);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (KeeperException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn false;\n\t\t\t}\n        }\n        return true;\n    }\n\n\tpublic void unlock() throws Exception\n\t{\n\t\ttry\n\t\t{\n\t\t\tSystem.out.println(threadId + \" unlock \" + myNodePath);\n\t\t\tzk.delete(myNodePath,-1);\n\t\t\tmyNodePath = null;\n\t\t\tzk.close();\n\t\t}\n\t\tcatch (InterruptedException e)\n\t\t{\n\t\t\tthrow new Exception(\"Error while releasing lock! \" + e.getMessage(), e);\n\t\t}\n\t\tcatch (KeeperException e)\n\t\t{\n\t\t\tthrow new Exception(\"Error while releasing lock! \" + e.getMessage(), e);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t        //一个简单的测试\n\t\tList<Thread> workers = new ArrayList<Thread>(10);\n\t\tfor (int i=1; i<10; ++i)\n\t\t{\n\t\t\tThread thread = new Thread(new Runnable()\n\t\t\t{\n\t\t\t\tString zk = \"10.12.10.169:2181,10.12.139.141:2181\";\n\t\t\t\t@Override\n\t\t\t\tpublic void run()\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tDistributedExclusiveLock lock = new DistributedExclusiveLock(zk, \"zkLock\");\n\t\t\t\t\t\tif (lock.tryLock());\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tString tid = \"Thread-\" + Thread.currentThread().getId();\n\t\t\t\t\t\t\tint time = new Random().nextInt(5000);\n\t\t\t\t\t\t\tSystem.out.println(tid + \" gets lock and is working, sleep for \" + time + \" ms\");\n\t\t\t\t\t\t\tThread.sleep(time);\n\t\t\t\t\t\t\tlock.unlock();\n\t\t\t\t\t\t\tSystem.out.println(tid + \" releases lock\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthread.setDaemon(true);\n\t\t\tworkers.add(thread);\n\t\t}\n\n\t\tfor (Thread t : workers)\n\t\t{\n\t\t\tt.start();\n\t\t}\n\t\tThread.sleep(100000);\n\t}\n}\n```\n\n","source":"_posts/基于zookeeper的分布式独占锁实现.md","raw":"---\ntitle: 基于zookeeper的分布式独占锁实现\ndate: 2014-05-13 21:05:01\ntags:\n- zookeeper\n- 分布式应用\n- 分布式协调\ncategories:\n- 分布式应用\n---\n\n背景\n--\n\n在分布式系统中，经常遇到这样一种场景：选举一个节点执行某一个任务，当此节点宕机后，其他节点可以接管并继续执行这个任务。由于各个节点运行的代码是一样的，彼此之间也是平等的，各个节点如何可以知道自己是否可以执行这个任务呢？当有节点宕机时，又如何判断自己是否可以接管任务呢？在我们的分布式任务调度系统中，需要选取调度器集群中的一个节点进行轮询任务状态，这里使用了zookeeper来实现一个统一的分布式锁，从而选出轮询节点。\n\n原理\n--\n\n如图所示，每台服务器启动后，都在同一目录下建一个临时顺序节点（EPHEMERAL_SEQUENTIAL），并获取此目录下的所有节点信息，如果自己的序号是最小的，就认为获取到了锁，可以执行任务。若自己的节点不是最小的，就认为自己没有获取到锁，不执行任务，同时，在比自己小1个序号的节点上增加监听。当比自己小1个序号的节点发生变化的时候，再次检查自己是否是最小序号的节点，如果是则获取锁，否则继续监听比自己小1个序号的节点。\n\n![](https://raw.githubusercontent.com/maohong/picture/master/20140502-%E5%9F%BA%E4%BA%8Ezookeeper%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%8B%AC%E5%8D%A0%E9%94%81%E5%AE%9E%E7%8E%B0/1.jpg)\n\n实现\n--\n\n以下是一个demo实现程序：\n\n```java\npublic class DistributedExclusiveLock implements Watcher\n{\n\tprivate ZooKeeper zk;\n\tprivate String lockDir = \"/testlock\";//锁节点所在zk的目录\n\tprivate String lockSymbol = \"_lock_\";//锁节点标志\n\tprivate String lockName;//锁节点前缀，构造锁时由外部传入\n\tprivate String waitNodePath;//等待的前一个锁的节点名称\n\tprivate String myNodePath;//当前锁\n\tprivate CountDownLatch latch;//计数器\n\tprivate String threadId;\n\n\t/**\n\t * 创建分布式锁\n\t * @param lockName 竞争资源标志,lockName中不能包含单词lock\n\t * @throws Exception\n\t */\n\tpublic DistributedExclusiveLock(String zkServers, String lockName) throws Exception\n\t{\n\t\t//简单校验lockDir路径\n\t\tif (!lockDir.startsWith(\"/\"))\n\t\t\tthrow new Exception(\"LockDir Path must start with / character! lockDir=\" + lockDir);\n\t\tif (lockDir.endsWith(\"/\"))\n\t\t\tthrow new Exception(\"LockDir Path must not end with / character! lockDir=\" + lockDir);\n\n\t\tthis.lockName = lockName;\n\t\tthis.threadId = getThreadId();\n\t\t// 创建一个与服务器的连接\n\t\ttry\n\t\t{\n\t\t\tzk = new ZooKeeper(zkServers, 3000, this);\n\t\t\tcreateLockDirIfNecessary(lockDir);\n\t\t} catch (Exception e) {\n\t\t\tthrow new Exception(\"Error while initializing DistributedExclusiveLock!\" + e.getMessage(), e);\n\t\t}\n\t}\n\n\tprivate String getThreadId()\n\t{\n\t\treturn \"Thread-\" + Thread.currentThread().getId();\n\t}\n\n\t/**\n\t * 在zk上建立lock目录，如果目录不存在，逐级创建节点\n\t */\n\tprivate synchronized void createLockDirIfNecessary(String zkDir) throws KeeperException, InterruptedException\n\t{\n\t\t//zkDir是一级节点，如/cloudscheduler\n\t\tif (zkDir.indexOf(\"/\") == zkDir.lastIndexOf(\"/\"))\n\t\t{\n\t\t\tStat stat = zk.exists(zkDir, false);\n\t\t\tif(stat == null){\n\t\t\t\t// 创建一级节点\n\t\t\t\tzk.create(zkDir, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t}\n\t\t}\n\t\telse\t//zkDir非一级节点\n\t\t{\n\t\t\tString parentDir = zkDir.substring(0, zkDir.lastIndexOf(\"/\"));\n\t\t\tif (zk.exists(parentDir, false) != null)\n\t\t\t{\t//如果父节点存在，建当前节点\n\t\t\t\tStat stat = zk.exists(zkDir, false);\n\t\t\t\tif(stat == null){\n\t\t\t\t\t// 创建非一级节点\n\t\t\t\t\tzk.create(zkDir, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\t//否则，先建父节点，再建当前节点\n\t\t\t\tcreateLockDirIfNecessary(parentDir);\n\t\t\t\tcreateLockDirIfNecessary(zkDir);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * zookeeper节点的监视器\n\t */\n\t@Override\n\tpublic void process(WatchedEvent event)\n\t{\n\t\tif (event.getType() == EventType.NodeDeleted)\n\t\t{\n\t\t\tif (this.latch!=null)\n\t\t\t\tthis.latch.countDown();\n\t\t\ttry\n\t\t\t{\n\t\t\t\tList<String> childrenNodes = zk.getChildren(lockDir, false);\n\t\t\t\t// 排序\n\t\t\t\tCollections.sort(childrenNodes);\n\t\t\t\tSystem.out.println(\"Node: \" + event.getPath()\n\t\t\t\t\t\t+ \" change event is deleted! Current locked nodes:\\n\\t\"\n\t\t\t\t\t\t+ StringUtils.join(childrenNodes,\"\\n\\t\"));\n\t\t\t}\n\t\t\tcatch (KeeperException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n    }\n\n\tpublic boolean tryLock()\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(tryLockInner())\n\t\t\t\treturn true;\n\t\t\telse\n\t\t\t\treturn waitForLockInner(waitNodePath);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate boolean tryLockInner() throws Exception\n\t{\n\t\ttry\n\t\t{\n\t\t\tif(lockName.contains(lockSymbol))\n\t\t\t\tthrow new Exception(\"lockName can not contains \" + lockSymbol);\n\t\t\t//创建临时子节点\n\t\t\tmyNodePath = zk.create(lockDir + \"/\" + lockName + lockSymbol, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);\n\t\t\tSystem.out.println(threadId + \" created \" + myNodePath);\n\t\t\t//取出所有子节点\n\t\t\tList<String> subNodes = zk.getChildren(lockDir, false);\n\t\t\t//取出所有lockName的锁\n\t\t\tList<String> lockedNodes = new ArrayList<String>();\n\t\t\tfor (String node : subNodes) {\n\t\t\t\tString nodePrefix = node.split(lockSymbol)[0];\n\t\t\t\tif(nodePrefix.equals(lockName)){//对锁名做个判断，前缀相同即为同一组锁\n\t\t\t\t\tlockedNodes.add(node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tCollections.sort(lockedNodes);\n\t\t\tSystem.out.println(\"Current locked nodes: \\n\\t\" + StringUtils.join(lockedNodes, \"\\n\\t\"));\n\t\t\tif(myNodePath.equals(lockDir + \"/\" + lockedNodes.get(0))){\n\t\t\t\t//如果是最小的节点,则表示取得锁\n\t            return true;\n\t        }\n\t\t\t//如果不是最小的节点，找到比自己小1的节点，在List中的位置是自己的前一位\n\t\t\tString myZnodeName = myNodePath.substring(myNodePath.lastIndexOf(\"/\") + 1);\n\t\t\twaitNodePath = lockDir + \"/\" + lockedNodes.get(lockedNodes.indexOf(myZnodeName)-1);\n\t\t}\n\t\tcatch (KeeperException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\tcatch (InterruptedException e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate boolean waitForLockInner(String waitPath) throws InterruptedException, KeeperException {\n        Stat stat = zk.exists(waitPath, true);\n        //判断比自己小一个数的节点是否存在,如果存在则需等待锁,同时注册监听\n        if (stat != null)\n        {\n        \tSystem.out.println(threadId + \" waiting for \" + waitPath);\n        \tthis.latch = new CountDownLatch(1);\n        \tthis.latch.await(); //不加超时时间，无限等待\n        \t//\n        \t//waiting\n        \t//Zzzzz...\n        \t//still waiting\n        \t//\n        \t// 探测到节点变化，刷新节点信息\n        \tthis.latch = null;\n        \ttry\n\t\t\t{\n\t\t\t\t// 确认myNodePath是否真的是列表中的最小节点\n\t\t\t\tList<String> childrenNodes = zk.getChildren(lockDir, false);\n\t\t\t\t// 排序\n\t\t\t\tCollections.sort(childrenNodes);\n\t\t\t\tif(myNodePath.equals(lockDir + \"/\" + childrenNodes.get(0)))\n\t\t\t\t\treturn true;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t    // 说明waitNodePath是由于出现异常而挂掉的 , 更新waitNodePath\n\t\t\t\t\tString thisNodeName = myNodePath.substring(myNodePath.lastIndexOf(\"/\") + 1);\n\t\t\t\t\tint index = childrenNodes.indexOf(thisNodeName);\n\t\t\t\t\twaitNodePath = lockDir + \"/\" + childrenNodes.get(index - 1);\n\t\t\t\t\t//重新等待锁\n\t\t\t\t\treturn waitForLockInner(waitNodePath);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (KeeperException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tcatch (InterruptedException e)\n\t\t\t{\n\t\t\t\te.printStackTrace();\n\t\t\t\treturn false;\n\t\t\t}\n        }\n        return true;\n    }\n\n\tpublic void unlock() throws Exception\n\t{\n\t\ttry\n\t\t{\n\t\t\tSystem.out.println(threadId + \" unlock \" + myNodePath);\n\t\t\tzk.delete(myNodePath,-1);\n\t\t\tmyNodePath = null;\n\t\t\tzk.close();\n\t\t}\n\t\tcatch (InterruptedException e)\n\t\t{\n\t\t\tthrow new Exception(\"Error while releasing lock! \" + e.getMessage(), e);\n\t\t}\n\t\tcatch (KeeperException e)\n\t\t{\n\t\t\tthrow new Exception(\"Error while releasing lock! \" + e.getMessage(), e);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) throws Exception\n\t{\n\t        //一个简单的测试\n\t\tList<Thread> workers = new ArrayList<Thread>(10);\n\t\tfor (int i=1; i<10; ++i)\n\t\t{\n\t\t\tThread thread = new Thread(new Runnable()\n\t\t\t{\n\t\t\t\tString zk = \"10.12.10.169:2181,10.12.139.141:2181\";\n\t\t\t\t@Override\n\t\t\t\tpublic void run()\n\t\t\t\t{\n\t\t\t\t\ttry\n\t\t\t\t\t{\n\t\t\t\t\t\tDistributedExclusiveLock lock = new DistributedExclusiveLock(zk, \"zkLock\");\n\t\t\t\t\t\tif (lock.tryLock());\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tString tid = \"Thread-\" + Thread.currentThread().getId();\n\t\t\t\t\t\t\tint time = new Random().nextInt(5000);\n\t\t\t\t\t\t\tSystem.out.println(tid + \" gets lock and is working, sleep for \" + time + \" ms\");\n\t\t\t\t\t\t\tThread.sleep(time);\n\t\t\t\t\t\t\tlock.unlock();\n\t\t\t\t\t\t\tSystem.out.println(tid + \" releases lock\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e)\n\t\t\t\t\t{\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tthread.setDaemon(true);\n\t\t\tworkers.add(thread);\n\t\t}\n\n\t\tfor (Thread t : workers)\n\t\t{\n\t\t\tt.start();\n\t\t}\n\t\tThread.sleep(100000);\n\t}\n}\n```\n\n","slug":"基于zookeeper的分布式独占锁实现","published":1,"updated":"2016-07-04T15:59:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxga0012d968mnnhduyj","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在分布式系统中，经常遇到这样一种场景：选举一个节点执行某一个任务，当此节点宕机后，其他节点可以接管并继续执行这个任务。由于各个节点运行的代码是一样的，彼此之间也是平等的，各个节点如何可以知道自己是否可以执行这个任务呢？当有节点宕机时，又如何判断自己是否可以接管任务呢？在我们的分布式任务调度系统中，需要选取调度器集群中的一个节点进行轮询任务状态，这里使用了zookeeper来实现一个统一的分布式锁，从而选出轮询节点。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>如图所示，每台服务器启动后，都在同一目录下建一个临时顺序节点（EPHEMERAL_SEQUENTIAL），并获取此目录下的所有节点信息，如果自己的序号是最小的，就认为获取到了锁，可以执行任务。若自己的节点不是最小的，就认为自己没有获取到锁，不执行任务，同时，在比自己小1个序号的节点上增加监听。当比自己小1个序号的节点发生变化的时候，再次检查自己是否是最小序号的节点，如果是则获取锁，否则继续监听比自己小1个序号的节点。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140502-%E5%9F%BA%E4%BA%8Ezookeeper%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%8B%AC%E5%8D%A0%E9%94%81%E5%AE%9E%E7%8E%B0/1.jpg\" alt=\"\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>以下是一个demo实现程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributedExclusiveLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ZooKeeper zk;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String lockDir = <span class=\"string\">\"/testlock\"</span>;<span class=\"comment\">//锁节点所在zk的目录</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String lockSymbol = <span class=\"string\">\"_lock_\"</span>;<span class=\"comment\">//锁节点标志</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String lockName;<span class=\"comment\">//锁节点前缀，构造锁时由外部传入</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String waitNodePath;<span class=\"comment\">//等待的前一个锁的节点名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String myNodePath;<span class=\"comment\">//当前锁</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> CountDownLatch latch;<span class=\"comment\">//计数器</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String threadId;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 创建分布式锁</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> lockName 竞争资源标志,lockName中不能包含单词lock</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DistributedExclusiveLock</span><span class=\"params\">(String zkServers, String lockName)</span> <span class=\"keyword\">throws</span> Exception</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//简单校验lockDir路径</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!lockDir.startsWith(<span class=\"string\">\"/\"</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"LockDir Path must start with / character! lockDir=\"</span> + lockDir);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lockDir.endsWith(<span class=\"string\">\"/\"</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"LockDir Path must not end with / character! lockDir=\"</span> + lockDir);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.lockName = lockName;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.threadId = getThreadId();</div><div class=\"line\">\t\t<span class=\"comment\">// 创建一个与服务器的连接</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tzk = <span class=\"keyword\">new</span> ZooKeeper(zkServers, <span class=\"number\">3000</span>, <span class=\"keyword\">this</span>);</div><div class=\"line\">\t\t\tcreateLockDirIfNecessary(lockDir);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Error while initializing DistributedExclusiveLock!\"</span> + e.getMessage(), e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getThreadId</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Thread-\"</span> + Thread.currentThread().getId();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * 在zk上建立lock目录，如果目录不存在，逐级创建节点</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">createLockDirIfNecessary</span><span class=\"params\">(String zkDir)</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//zkDir是一级节点，如/cloudscheduler</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (zkDir.indexOf(<span class=\"string\">\"/\"</span>) == zkDir.lastIndexOf(<span class=\"string\">\"/\"</span>))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tStat stat = zk.exists(zkDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(stat == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 创建一级节点</span></div><div class=\"line\">\t\t\t\tzk.create(zkDir, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>\t<span class=\"comment\">//zkDir非一级节点</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tString parentDir = zkDir.substring(<span class=\"number\">0</span>, zkDir.lastIndexOf(<span class=\"string\">\"/\"</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (zk.exists(parentDir, <span class=\"keyword\">false</span>) != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t&#123;\t<span class=\"comment\">//如果父节点存在，建当前节点</span></div><div class=\"line\">\t\t\t\tStat stat = zk.exists(zkDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(stat == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 创建非一级节点</span></div><div class=\"line\">\t\t\t\t\tzk.create(zkDir, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;\t<span class=\"comment\">//否则，先建父节点，再建当前节点</span></div><div class=\"line\">\t\t\t\tcreateLockDirIfNecessary(parentDir);</div><div class=\"line\">\t\t\t\tcreateLockDirIfNecessary(zkDir);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</span></div><div class=\"line\">\t * zookeeper节点的监视器</div><div class=\"line\">\t */</div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (event.getType() == EventType.NodeDeleted)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.latch!=<span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.latch.countDown();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tList&lt;String&gt; childrenNodes = zk.getChildren(lockDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 排序</span></div><div class=\"line\">\t\t\t\tCollections.sort(childrenNodes);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Node: \"</span> + event.getPath()</div><div class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">\" change event is deleted! Current locked nodes:\\n\\t\"</span></div><div class=\"line\">\t\t\t\t\t\t+ StringUtils.join(childrenNodes,<span class=\"string\">\"\\n\\t\"</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span></span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tryLockInner())</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> waitForLockInner(waitNodePath);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLockInner</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lockName.contains(lockSymbol))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"lockName can not contains \"</span> + lockSymbol);</div><div class=\"line\">\t\t\t<span class=\"comment\">//创建临时子节点</span></div><div class=\"line\">\t\t\tmyNodePath = zk.create(lockDir + <span class=\"string\">\"/\"</span> + lockName + lockSymbol, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class=\"line\">\t\t\tSystem.out.println(threadId + <span class=\"string\">\" created \"</span> + myNodePath);</div><div class=\"line\">\t\t\t<span class=\"comment\">//取出所有子节点</span></div><div class=\"line\">\t\t\tList&lt;String&gt; subNodes = zk.getChildren(lockDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//取出所有lockName的锁</span></div><div class=\"line\">\t\t\tList&lt;String&gt; lockedNodes = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String node : subNodes) &#123;</div><div class=\"line\">\t\t\t\tString nodePrefix = node.split(lockSymbol)[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(nodePrefix.equals(lockName))&#123;<span class=\"comment\">//对锁名做个判断，前缀相同即为同一组锁</span></div><div class=\"line\">\t\t\t\t\tlockedNodes.add(node);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tCollections.sort(lockedNodes);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Current locked nodes: \\n\\t\"</span> + StringUtils.join(lockedNodes, <span class=\"string\">\"\\n\\t\"</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(myNodePath.equals(lockDir + <span class=\"string\">\"/\"</span> + lockedNodes.get(<span class=\"number\">0</span>)))&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//如果是最小的节点,则表示取得锁</span></div><div class=\"line\">\t            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果不是最小的节点，找到比自己小1的节点，在List中的位置是自己的前一位</span></div><div class=\"line\">\t\t\tString myZnodeName = myNodePath.substring(myNodePath.lastIndexOf(<span class=\"string\">\"/\"</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\twaitNodePath = lockDir + <span class=\"string\">\"/\"</span> + lockedNodes.get(lockedNodes.indexOf(myZnodeName)-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">waitForLockInner</span><span class=\"params\">(String waitPath)</span> <span class=\"keyword\">throws</span> InterruptedException, KeeperException </span>&#123;</div><div class=\"line\">        Stat stat = zk.exists(waitPath, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">//判断比自己小一个数的节点是否存在,如果存在则需等待锁,同时注册监听</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (stat != <span class=\"keyword\">null</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">        \tSystem.out.println(threadId + <span class=\"string\">\" waiting for \"</span> + waitPath);</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.latch.await(); <span class=\"comment\">//不加超时时间，无限等待</span></div><div class=\"line\">        \t<span class=\"comment\">//</span></div><div class=\"line\">        \t<span class=\"comment\">//waiting</span></div><div class=\"line\">        \t<span class=\"comment\">//Zzzzz...</span></div><div class=\"line\">        \t<span class=\"comment\">//still waiting</span></div><div class=\"line\">        \t<span class=\"comment\">//</span></div><div class=\"line\">        \t<span class=\"comment\">// 探测到节点变化，刷新节点信息</span></div><div class=\"line\">        \t<span class=\"keyword\">this</span>.latch = <span class=\"keyword\">null</span>;</div><div class=\"line\">        \t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 确认myNodePath是否真的是列表中的最小节点</span></div><div class=\"line\">\t\t\t\tList&lt;String&gt; childrenNodes = zk.getChildren(lockDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 排序</span></div><div class=\"line\">\t\t\t\tCollections.sort(childrenNodes);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(myNodePath.equals(lockDir + <span class=\"string\">\"/\"</span> + childrenNodes.get(<span class=\"number\">0</span>)))</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t    <span class=\"comment\">// 说明waitNodePath是由于出现异常而挂掉的 , 更新waitNodePath</span></div><div class=\"line\">\t\t\t\t\tString thisNodeName = myNodePath.substring(myNodePath.lastIndexOf(<span class=\"string\">\"/\"</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> index = childrenNodes.indexOf(thisNodeName);</div><div class=\"line\">\t\t\t\t\twaitNodePath = lockDir + <span class=\"string\">\"/\"</span> + childrenNodes.get(index - <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//重新等待锁</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> waitForLockInner(waitNodePath);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tSystem.out.println(threadId + <span class=\"string\">\" unlock \"</span> + myNodePath);</div><div class=\"line\">\t\t\tzk.delete(myNodePath,-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tmyNodePath = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\tzk.close();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Error while releasing lock! \"</span> + e.getMessage(), e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Error while releasing lock! \"</span> + e.getMessage(), e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span></div><div class=\"line\">\t&#123;</div><div class=\"line\">\t        <span class=\"comment\">//一个简单的测试</span></div><div class=\"line\">\t\tList&lt;Thread&gt; workers = <span class=\"keyword\">new</span> ArrayList&lt;Thread&gt;(<span class=\"number\">10</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">10</span>; ++i)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tThread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable()</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tString zk = <span class=\"string\">\"10.12.10.169:2181,10.12.139.141:2181\"</span>;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\tDistributedExclusiveLock lock = <span class=\"keyword\">new</span> DistributedExclusiveLock(zk, <span class=\"string\">\"zkLock\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (lock.tryLock());</div><div class=\"line\">\t\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\t\tString tid = <span class=\"string\">\"Thread-\"</span> + Thread.currentThread().getId();</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">int</span> time = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(tid + <span class=\"string\">\" gets lock and is working, sleep for \"</span> + time + <span class=\"string\">\" ms\"</span>);</div><div class=\"line\">\t\t\t\t\t\t\tThread.sleep(time);</div><div class=\"line\">\t\t\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(tid + <span class=\"string\">\" releases lock\"</span>);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">catch</span> (Exception e)</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\tthread.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\tworkers.add(thread);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Thread t : workers)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">100000</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在分布式系统中，经常遇到这样一种场景：选举一个节点执行某一个任务，当此节点宕机后，其他节点可以接管并继续执行这个任务。由于各个节点运行的代码是一样的，彼此之间也是平等的，各个节点如何可以知道自己是否可以执行这个任务呢？当有节点宕机时，又如何判断自己是否可以接管任务呢？在我们的分布式任务调度系统中，需要选取调度器集群中的一个节点进行轮询任务状态，这里使用了zookeeper来实现一个统一的分布式锁，从而选出轮询节点。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>如图所示，每台服务器启动后，都在同一目录下建一个临时顺序节点（EPHEMERAL_SEQUENTIAL），并获取此目录下的所有节点信息，如果自己的序号是最小的，就认为获取到了锁，可以执行任务。若自己的节点不是最小的，就认为自己没有获取到锁，不执行任务，同时，在比自己小1个序号的节点上增加监听。当比自己小1个序号的节点发生变化的时候，再次检查自己是否是最小序号的节点，如果是则获取锁，否则继续监听比自己小1个序号的节点。</p>\n<p><img src=\"https://raw.githubusercontent.com/maohong/picture/master/20140502-%E5%9F%BA%E4%BA%8Ezookeeper%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E7%8B%AC%E5%8D%A0%E9%94%81%E5%AE%9E%E7%8E%B0/1.jpg\" alt=\"\"></p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>以下是一个demo实现程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DistributedExclusiveLock</span> <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">private</span> ZooKeeper zk;</div><div class=\"line\">\t<span class=\"keyword\">private</span> String lockDir = <span class=\"string\">\"/testlock\"</span>;<span class=\"comment\">//锁节点所在zk的目录</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String lockSymbol = <span class=\"string\">\"_lock_\"</span>;<span class=\"comment\">//锁节点标志</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String lockName;<span class=\"comment\">//锁节点前缀，构造锁时由外部传入</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String waitNodePath;<span class=\"comment\">//等待的前一个锁的节点名称</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String myNodePath;<span class=\"comment\">//当前锁</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> CountDownLatch latch;<span class=\"comment\">//计数器</span></div><div class=\"line\">\t<span class=\"keyword\">private</span> String threadId;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 创建分布式锁</div><div class=\"line\">\t * <span class=\"doctag\">@param</span> lockName 竞争资源标志,lockName中不能包含单词lock</div><div class=\"line\">\t * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">DistributedExclusiveLock</span><span class=\"params\">(String zkServers, String lockName)</span> <span class=\"keyword\">throws</span> Exception</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//简单校验lockDir路径</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!lockDir.startsWith(<span class=\"string\">\"/\"</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"LockDir Path must start with / character! lockDir=\"</span> + lockDir);</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (lockDir.endsWith(<span class=\"string\">\"/\"</span>))</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"LockDir Path must not end with / character! lockDir=\"</span> + lockDir);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.lockName = lockName;</div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.threadId = getThreadId();</div><div class=\"line\">\t\t<span class=\"comment\">// 创建一个与服务器的连接</span></div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tzk = <span class=\"keyword\">new</span> ZooKeeper(zkServers, <span class=\"number\">3000</span>, <span class=\"keyword\">this</span>);</div><div class=\"line\">\t\t\tcreateLockDirIfNecessary(lockDir);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Error while initializing DistributedExclusiveLock!\"</span> + e.getMessage(), e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> String <span class=\"title\">getThreadId</span><span class=\"params\">()</span></div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Thread-\"</span> + Thread.currentThread().getId();</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * 在zk上建立lock目录，如果目录不存在，逐级创建节点</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">createLockDirIfNecessary</span><span class=\"params\">(String zkDir)</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">//zkDir是一级节点，如/cloudscheduler</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (zkDir.indexOf(<span class=\"string\">\"/\"</span>) == zkDir.lastIndexOf(<span class=\"string\">\"/\"</span>))</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tStat stat = zk.exists(zkDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(stat == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 创建一级节点</span></div><div class=\"line\">\t\t\t\tzk.create(zkDir, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span>\t<span class=\"comment\">//zkDir非一级节点</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tString parentDir = zkDir.substring(<span class=\"number\">0</span>, zkDir.lastIndexOf(<span class=\"string\">\"/\"</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (zk.exists(parentDir, <span class=\"keyword\">false</span>) != <span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t&#123;\t<span class=\"comment\">//如果父节点存在，建当前节点</span></div><div class=\"line\">\t\t\t\tStat stat = zk.exists(zkDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(stat == <span class=\"keyword\">null</span>)&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">// 创建非一级节点</span></div><div class=\"line\">\t\t\t\t\tzk.create(zkDir, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t&#123;\t<span class=\"comment\">//否则，先建父节点，再建当前节点</span></div><div class=\"line\">\t\t\t\tcreateLockDirIfNecessary(parentDir);</div><div class=\"line\">\t\t\t\tcreateLockDirIfNecessary(zkDir);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">/**</div><div class=\"line\">\t * zookeeper节点的监视器</div><div class=\"line\">\t */</span></div><div class=\"line\">\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span></div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (event.getType() == EventType.NodeDeleted)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.latch!=<span class=\"keyword\">null</span>)</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.latch.countDown();</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tList&lt;String&gt; childrenNodes = zk.getChildren(lockDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 排序</span></div><div class=\"line\">\t\t\t\tCollections.sort(childrenNodes);</div><div class=\"line\">\t\t\t\tSystem.out.println(<span class=\"string\">\"Node: \"</span> + event.getPath()</div><div class=\"line\">\t\t\t\t\t\t+ <span class=\"string\">\" change event is deleted! Current locked nodes:\\n\\t\"</span></div><div class=\"line\">\t\t\t\t\t\t+ StringUtils.join(childrenNodes,<span class=\"string\">\"\\n\\t\"</span>));</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLock</span><span class=\"params\">()</span></div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(tryLockInner())</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> waitForLockInner(waitNodePath);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (Exception e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryLockInner</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(lockName.contains(lockSymbol))</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"lockName can not contains \"</span> + lockSymbol);</div><div class=\"line\">\t\t\t<span class=\"comment\">//创建临时子节点</span></div><div class=\"line\">\t\t\tmyNodePath = zk.create(lockDir + <span class=\"string\">\"/\"</span> + lockName + lockSymbol, <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">0</span>], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</div><div class=\"line\">\t\t\tSystem.out.println(threadId + <span class=\"string\">\" created \"</span> + myNodePath);</div><div class=\"line\">\t\t\t<span class=\"comment\">//取出所有子节点</span></div><div class=\"line\">\t\t\tList&lt;String&gt; subNodes = zk.getChildren(lockDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t<span class=\"comment\">//取出所有lockName的锁</span></div><div class=\"line\">\t\t\tList&lt;String&gt; lockedNodes = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String node : subNodes) &#123;</div><div class=\"line\">\t\t\t\tString nodePrefix = node.split(lockSymbol)[<span class=\"number\">0</span>];</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(nodePrefix.equals(lockName))&#123;<span class=\"comment\">//对锁名做个判断，前缀相同即为同一组锁</span></div><div class=\"line\">\t\t\t\t\tlockedNodes.add(node);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\tCollections.sort(lockedNodes);</div><div class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">\"Current locked nodes: \\n\\t\"</span> + StringUtils.join(lockedNodes, <span class=\"string\">\"\\n\\t\"</span>));</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span>(myNodePath.equals(lockDir + <span class=\"string\">\"/\"</span> + lockedNodes.get(<span class=\"number\">0</span>)))&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//如果是最小的节点,则表示取得锁</span></div><div class=\"line\">\t            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t        &#125;</div><div class=\"line\">\t\t\t<span class=\"comment\">//如果不是最小的节点，找到比自己小1的节点，在List中的位置是自己的前一位</span></div><div class=\"line\">\t\t\tString myZnodeName = myNodePath.substring(myNodePath.lastIndexOf(<span class=\"string\">\"/\"</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\twaitNodePath = lockDir + <span class=\"string\">\"/\"</span> + lockedNodes.get(lockedNodes.indexOf(myZnodeName)-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\te.printStackTrace();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> <span class=\"title\">waitForLockInner</span><span class=\"params\">(String waitPath)</span> <span class=\"keyword\">throws</span> InterruptedException, KeeperException </span>&#123;</div><div class=\"line\">        Stat stat = zk.exists(waitPath, <span class=\"keyword\">true</span>);</div><div class=\"line\">        <span class=\"comment\">//判断比自己小一个数的节点是否存在,如果存在则需等待锁,同时注册监听</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (stat != <span class=\"keyword\">null</span>)</div><div class=\"line\">        &#123;</div><div class=\"line\">        \tSystem.out.println(threadId + <span class=\"string\">\" waiting for \"</span> + waitPath);</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">1</span>);</div><div class=\"line\">        \t<span class=\"keyword\">this</span>.latch.await(); <span class=\"comment\">//不加超时时间，无限等待</span></div><div class=\"line\">        \t<span class=\"comment\">//</span></div><div class=\"line\">        \t<span class=\"comment\">//waiting</span></div><div class=\"line\">        \t<span class=\"comment\">//Zzzzz...</span></div><div class=\"line\">        \t<span class=\"comment\">//still waiting</span></div><div class=\"line\">        \t<span class=\"comment\">//</span></div><div class=\"line\">        \t<span class=\"comment\">// 探测到节点变化，刷新节点信息</span></div><div class=\"line\">        \t<span class=\"keyword\">this</span>.latch = <span class=\"keyword\">null</span>;</div><div class=\"line\">        \t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 确认myNodePath是否真的是列表中的最小节点</span></div><div class=\"line\">\t\t\t\tList&lt;String&gt; childrenNodes = zk.getChildren(lockDir, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 排序</span></div><div class=\"line\">\t\t\t\tCollections.sort(childrenNodes);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(myNodePath.equals(lockDir + <span class=\"string\">\"/\"</span> + childrenNodes.get(<span class=\"number\">0</span>)))</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t    <span class=\"comment\">// 说明waitNodePath是由于出现异常而挂掉的 , 更新waitNodePath</span></div><div class=\"line\">\t\t\t\t\tString thisNodeName = myNodePath.substring(myNodePath.lastIndexOf(<span class=\"string\">\"/\"</span>) + <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> index = childrenNodes.indexOf(thisNodeName);</div><div class=\"line\">\t\t\t\t\twaitNodePath = lockDir + <span class=\"string\">\"/\"</span> + childrenNodes.get(index - <span class=\"number\">1</span>);</div><div class=\"line\">\t\t\t\t\t<span class=\"comment\">//重新等待锁</span></div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> waitForLockInner(waitNodePath);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tSystem.out.println(threadId + <span class=\"string\">\" unlock \"</span> + myNodePath);</div><div class=\"line\">\t\t\tzk.delete(myNodePath,-<span class=\"number\">1</span>);</div><div class=\"line\">\t\t\tmyNodePath = <span class=\"keyword\">null</span>;</div><div class=\"line\">\t\t\tzk.close();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Error while releasing lock! \"</span> + e.getMessage(), e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"Error while releasing lock! \"</span> + e.getMessage(), e);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</div><div class=\"line\">\t</span>&#123;</div><div class=\"line\">\t        <span class=\"comment\">//一个简单的测试</span></div><div class=\"line\">\t\tList&lt;Thread&gt; workers = <span class=\"keyword\">new</span> ArrayList&lt;Thread&gt;(<span class=\"number\">10</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;<span class=\"number\">10</span>; ++i)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tThread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable()</div><div class=\"line\">\t\t\t&#123;</div><div class=\"line\">\t\t\t\tString zk = <span class=\"string\">\"10.12.10.169:2181,10.12.139.141:2181\"</span>;</div><div class=\"line\">\t\t\t\t<span class=\"meta\">@Override</span></div><div class=\"line\">\t\t\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></div><div class=\"line\">\t\t\t\t</span>&#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">try</span></div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\tDistributedExclusiveLock lock = <span class=\"keyword\">new</span> DistributedExclusiveLock(zk, <span class=\"string\">\"zkLock\"</span>);</div><div class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span> (lock.tryLock());</div><div class=\"line\">\t\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\t\tString tid = <span class=\"string\">\"Thread-\"</span> + Thread.currentThread().getId();</div><div class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">int</span> time = <span class=\"keyword\">new</span> Random().nextInt(<span class=\"number\">5000</span>);</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(tid + <span class=\"string\">\" gets lock and is working, sleep for \"</span> + time + <span class=\"string\">\" ms\"</span>);</div><div class=\"line\">\t\t\t\t\t\t\tThread.sleep(time);</div><div class=\"line\">\t\t\t\t\t\t\tlock.unlock();</div><div class=\"line\">\t\t\t\t\t\t\tSystem.out.println(tid + <span class=\"string\">\" releases lock\"</span>);</div><div class=\"line\">\t\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">catch</span> (Exception e)</div><div class=\"line\">\t\t\t\t\t&#123;</div><div class=\"line\">\t\t\t\t\t\te.printStackTrace();</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;);</div><div class=\"line\">\t\t\tthread.setDaemon(<span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\tworkers.add(thread);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (Thread t : workers)</div><div class=\"line\">\t\t&#123;</div><div class=\"line\">\t\t\tt.start();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tThread.sleep(<span class=\"number\">100000</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"使用zookeeper协调多服务器的任务处理","date":"2012-11-13T08:16:43.000Z","_content":"\n背景\n--\n**Zookeeper**是hadoop的子项目，是google的chubby的开源实现，是一个针对大规模分布式系统的可靠的分布式协调系统。Zookeeper一般部署在一个集群上，通过在集群间维护一个数据树，使得连接到集群的client能够获得统一的数据信息，比如系统公共配置信息、节点存活状态等等。因此，在互联网公司中，zookeeper被广泛运用于统一配置管理、名字服务、分布式同步等。\n问题\n--\n我们看下这样一种场景：  \n前台系统每时每刻都生成大量数据，这些原生数据由后台系统处理完毕后再作他用，我们暂且不谈这些数据的存储形式，只关注如何能够尽可能高效的处理。举个例子，前台系统可能是微博的前端发布系统、搜索引擎上的广告投放系统，或者是任务发布系统，后台系统则可能是对微博和广告信息的审查系统，比如用户发的微博如果包含近期敏感信息则不予显示，若是任务，后台系统则负责处理任务具体的执行。  \n若数据量和任务量较小，单节点的后台系统或许可以处理得过来，但是如果数据量和任务量很大（比如新浪微博，龙年正月初一0点0分0秒，共有32312条微博同时发布），单节点的后台系统肯定吃不消，这时候，可想而知的是多节点同时处理前台过来的数据。  \n最简单的方法是，按消息id对后台节点数取模（msgid%server_num=mod），每个后台节点取自己那份数据进行处理，这就需要每个节点都知晓当前有多少个后台节点以及本节点所应取的mod数。但是，当某个节点宕机时，这个节点所应处理的数据无法被继续处理了，势必会造成阻塞，除非重新配置各节点上的参数，将节点数server_num减1，并修改各节点取数据的mod数。  \n毋庸置疑，这样非常麻烦！如果能够将这种配置信息（实际上是数据在节点间分配的控制信息）统一管理起来，在配置信息发生变化时，各个后台节点能够及时知晓其变化，就可以避免上述情况的发生。  \n因此，采用多节点处理数据时，有两个问题：  \n1.避免多个节点重复处理同一条数据，否则造成资源浪费。  \n2.不能有数据被遗漏处理，尤其是在有后台节点down掉的时候。  \n也就是说，采用多节点同时处理数据时，需要将数据隔离开，分别给不同的节点处理，而且在有节点宕机的情况下，所有数据也必须可以无误的被其他可用节点处理。如何做到这一点呢，使用zookeeper吧！  \n<!--more-->\n解决方案\n--\n我们通过zookeeper维护一个目录（比如/app/config），服务器启动时连接zookeeper集群并在该目录下创建表示自己的临时节点（CreateMode.EPHEMERAL），相当于注册一个节点，节点名可以是本服务器的ip，节点的值为该服务器的mod值，按注册顺序从0递增，即第一个注册的节点值为0，第二个为1，依次下去，因此/app/config的子节点数就是注册到zookeeper的服务器数。同时，各服务器监听/app/config目录，当其发生变化（新加入子节点、子节点失效等）时，每个服务器都将获取到这个事件并进行相应的处理。  \ndemo\n--\n下面针对以上场景给出一个示例demo。  \n**Server类**：服务器  \n**ClientThread类**：服务器上的单个线程  \n**NodeStateWatcher类**：服务器监听zookeeper集群的监听器  \n**ZkOperationImpl类**：zookeeper的操作封装（实现ZkOperation接口）  \nServer.java\n```java\npublic class Server extends Thread\n{\n private ClientThread[] clients = new ClientThread[Constant.THREAD_COUNT]; // 数据处理线程\n private ZkOperation operationCient = null; // 与zookeeper的连接\n private Watcher nodeWatcher = null;  // 向zookeeper注册的监听器\n private String name; // 服务器名\n private String ip; // 服务器ip\n \n public Server(String name, String ip) throws IOException, KeeperException, InterruptedException\n {\n  this.name = name;\n  this.ip = ip;\n  this.operationCient = new ZkOperationImpl();\n  this.nodeWatcher = new NodeStateWatcher(this);\n  this.operationCient.init(Constant.ZK_ADDRESS, nodeWatcher);\n \n  for (int i=0; i<Constant.THREAD_COUNT; ++i)\n  {\n   ClientThread c = new ClientThread(i, ip, name);\n   this.clients[i]= c;\n  }\n \n  initialize();\n }\n \n /**\n  * 向zookeeper集群注册\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n private void registerServer() throws KeeperException, InterruptedException\n {\n  List<String> children = operationCient.getChilds(Constant.ROOT_PATH);\n  int max = -1;\n  for (String childName : children)\n  {\n   String childPath = Constant.ROOT_PATH + \"/\" + childName;\n   int mod = Integer.parseInt(operationCient.getData(childPath));\n   if (mod > max)\n    max = mod;\n  }\n  String path = Constant.ROOT_PATH + \"/\" + ip;\n  operationCient.apendTempNode(path, String.valueOf(max<0 ? 0 : ++max));\n }\n \n /**\n  * 启动数据处理线程\n  * @throws Exception\n  */\n public void run()\n {\n  for (ClientThread c : clients)\n  {\n   CommonUtil.log(\"Start thread-\" + c);\n   c.start();\n  }\n }\n \n /**\n  * 服务器初始化\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n private void initialize() throws KeeperException, InterruptedException\n {\n  CommonUtil.log(\"================\");\n  CommonUtil.log(this + \" initializing...\");\n \n  // 配置信息的上级目录不存在\n  if (!operationCient.exist(Constant.ROOT_PATH))\n  {\n   System.err.println(\"Root path \" + Constant.ROOT_PATH + \"does not exist!!! Create root path...\");\n   operationCient.apendPresistentNode(Constant.ROOT_PATH, \"1\");\n   CommonUtil.log(\"Create root path \" + Constant.ROOT_PATH + \" successfully!\");\n  }\n \n  registerServer();\n \n  refreshConfig();\n \n  CommonUtil.log(this + \" finish initializing...\");\n  CommonUtil.log(\"================\");\n }\n \n /**\n  * watch到节点变化后，刷新节点数和模数\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n public void refresh() throws KeeperException, InterruptedException\n {\n  CommonUtil.log(\"================\");\n  CommonUtil.log(this + \":freshing...\");\n \n  refreshConfig();\n \n  CommonUtil.log(this + \":end freshing...\");\n  CommonUtil.log(\"================\");\n }\n \n private void refreshConfig() throws KeeperException, InterruptedException\n {\n  String version = operationCient.getData(Constant.ROOT_PATH);\n  CommonUtil.log(\"SYSTEM VERSION: \" + version);\n  List<String> children = operationCient.getChilds(Constant.ROOT_PATH);\n \n  // 1. 服务器数量为子节点的个数\n  int nodeCount = children.size();\n  CommonUtil.log(\"Server count:\" + nodeCount);\n  synchronized (CommonUtil.BASE)\n  {\n   CommonUtil.BASE = nodeCount * Constant.THREAD_COUNT;\n  }\n \n  if (CommonUtil.BASE.intValue() == 0)\n   return;\n \n  Integer mod = null;\n \n  for (String childName : children)\n  {\n   // 2. 获取本服务器的模数\n   if (childName.equals(ip))\n   {\n    String childPath = Constant.ROOT_PATH + \"/\" + childName;\n    mod = Integer.parseInt(operationCient.getData(childPath));\n    break;\n   }\n  }\n  // 3. 刷新数据处理线程的取模数\n  if (mod == null)\n  {\n   System.err.println(\"Did not get the mod number for \" + this);\n  }\n  else\n  {\n   CommonUtil.log(this + \", mod=\" + mod + \",base=\" + CommonUtil.BASE);\n   for (ClientThread c : clients)\n   {\n    c.refresh(mod);\n   }\n  }\n }\n \n public String toString()\n {\n  return this.name + \"@\" + this.ip + \"\";\n }\n \n public ClientThread[] getClients()\n {\n  return clients;\n }\n \n public ZkOperation getOperationCient()\n {\n  return operationCient;\n }\n \n public Watcher getNodeWatcher()\n {\n  return nodeWatcher;\n }\n \n public String getIp()\n {\n  return ip;\n }\n}\n```\nClientThread.java\n```java\npublic class ClientThread extends Thread\n{\n \n private Integer modNum = -1;\n private Integer threadId;\n private String ip;\n private String clientName;\n \n public ClientThread(Integer threadId, String ip, String clientName) throws IOException, KeeperException, InterruptedException\n {\n  this.threadId = threadId;\n  this.ip = ip;\n  this.clientName = clientName;\n }\n \n /**\n  * watch到节点变化后，调用刷新节点数和模数\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n public void refresh(int mod) throws KeeperException, InterruptedException\n {\n//  CommonUtil.log(\"================\");\n//  CommonUtil.log(this + \":freshing...\");\n \n  synchronized (this.modNum)\n  {\n   this.modNum = threadId + mod * Constant.THREAD_COUNT;\n  }\n \n  CommonUtil.log(this + \":\" + modNum + \"/\" + CommonUtil.BASE);\n \n//  CommonUtil.log(this + \":end freshing...\");\n//  CommonUtil.log(\"================\");\n }\n \n @Override\n public void run()\n {\n  long start = System.currentTimeMillis();\n  while (System.currentTimeMillis() - start < Constant.DURATION)\n  {\n   // 处理数据\n   processData();\n   try\n   {\n    Thread.sleep(5000); //等待2秒\n   }\n   catch (InterruptedException e)\n   {\n    e.printStackTrace();\n   }\n  }\n \n }\n \n /**\n  * 模拟处理数据逻辑：打印属于本线程的数据\n  */\n private void processData()\n {\n  if (CommonUtil.BASE.equals(0) || modNum.equals(-1))\n  {\n   CommonUtil.err(this + \": did not get server_count and modNum!!!\");\n   return;\n  }\n \n  StringBuilder sb = new StringBuilder(this + \"-\" + modNum + \"/\" + CommonUtil.BASE + \":\");\n  for (int i=0; i<Constant.NUMBERS.length; ++i)\n  {\n   int n = Constant.NUMBERS[i];\n   if (n % CommonUtil.BASE == modNum)\n   {\n    sb.append(n).append(\" \");\n   }\n  }\n  CommonUtil.log(sb.toString());\n }\n \n @Override\n public String toString()\n {\n  return \"ClientThread_\" + this.clientName + \"@\" + this.ip + \"-thread_\" + this.threadId;\n }\n \n public Integer getModNum()\n {\n  return modNum;\n }\n \n public synchronized void setModNum(Integer modNum)\n {\n  this.modNum = modNum;\n }\n \n public String getClientName()\n {\n  return clientName;\n }\n}\n```\nNodeStateWatcher.java\n```java\npublic class NodeStateWatcher implements Watcher\n{\n private Server server;\n \n public NodeStateWatcher(Server server)\n {\n  this.server = server;\n }\n \n @Override\n public void process(WatchedEvent event)\n {\n  StringBuilder outputStr = new StringBuilder();\n  if (server.getName() != null)\n  {\n   outputStr.append(server.getName() + \" get an event.\");\n  }\n  outputStr.append(\"Path:\" + event.getPath());\n  outputStr.append(\",state:\" + event.getState());\n  outputStr.append(\",type:\" + event.getType());\n  CommonUtil.log(outputStr.toString());\n \n  // 发现子节点有变化\n  if (event.getType() == EventType.NodeChildrenChanged\n    || event.getType() == EventType.NodeDataChanged\n    || event.getType() == EventType.NodeDeleted)\n  {\n   CommonUtil.log(\"In event: \" + event.getType());\n   try\n   {\n    server.refresh();\n   }\n   catch (KeeperException e)\n   {\n    e.printStackTrace();\n   }\n   catch (InterruptedException e)\n   {\n    e.printStackTrace();\n   }\n   CommonUtil.log(\"End event: \" + event.getType());\n  }\n }\n}\n```\nZkOperationImpl.java 部分zk操作代码\n```java\n@Override\n public void apendPresistentNode(String path, String data)\n   throws KeeperException, InterruptedException\n {\n  if (zk != null)\n  {\n   zk.create(path, data.getBytes(), Ids.OPEN_ACL_UNSAFE,\n     CreateMode.PERSISTENT);\n  }\n }\n \n @Override\n public void delNode(String path) throws KeeperException,\n   InterruptedException\n {\n  if (zk != null)\n  {\n   zk.delete(path, -1);\n  }\n }\n \n @Override\n public boolean exist(String path) throws KeeperException,\n   InterruptedException\n {\n  if (zk != null)\n  {\n   return zk.exists(path, true) != null;\n  }\n  return false;\n }\n}\n```\n\nMain.java：主类，启动demo\n\n```java\npublic class Main\n{\n public static void main(String[] args) throws Exception\n {\n  Server c1 = new Server(\"ServerA\", \"1.1.1.1\");\n  Server c2 = new Server(\"ServerB\", \"1.1.1.2\");\n  Server c3 = new Server(\"ServerC\", \"1.1.1.3\");\n \n  c1.start();\n  c2.start();\n  c3.start();\n }\n}\n```\n\n\n验证\n--\n由于Server的3个实例在同一台机器上运行，连接到zookeeper时，用的是一个session，所以demo中没有通过程序断开server与zookeeper的连接，如果serverA断开，那么serverB和serverC与zookeeper的session连接也会失效，达不到演示效果，所以我们只能暂时在zookeeper客户端手工更改zookeeper上的配置信息，用于模拟server与zookeeper集群断开连接和增加server的情形。server启动后，会先向zookeeper注册节点，因此我们先手工删除节点，再手工添加节点。  \n手工执行的命令如下：  \n> [zk: localhost:2181(CONNECTED) 141] delete /demo/1.1.1.3\n> [zk: localhost:2181(CONNECTED) 142] delete /demo/1.1.1.2\n> [zk: localhost:2181(CONNECTED) 143] delete /demo/1.1.1.1\n> [zk: localhost:2181(CONNECTED) 144] create -e /demo/1.1.1.1 0\n> [zk: localhost:2181(CONNECTED) 145] create -e /demo/1.1.1.2 1\n> [zk: localhost:2181(CONNECTED) 146] create -e /demo/1.1.1.3 2  \n\n可以通过程序打印信息发现，在节点配置信息每个服务器(Server)上的线程会动态的获取属于自己的数据并打印。当然，这里对数据的处理逻辑很简单，仅仅是打印出来，处理的数据也只是内存中的一个数组，对于类似这样的但是更复杂的应用场景，zookeeper同样适用，但是需要更多的考虑服务器与zookeeper集群连接的可靠性（比如session超时重连）、权限机制等等。  \n上面的demo程序打印信息如下：  \n\n> [2012-11-14 15:18:42] New zk connection session: 0\n> [2012-11-14 15:18:42] ================\n> [2012-11-14 15:18:42] ServerA@1.1.1.1 initializing…\n> [2012-11-14 15:18:47] Thread-0 get an event.Path:null,state:SyncConnected,type:None\n> [2012-11-14 15:18:47] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:47] In event: NodeChildrenChanged\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:18:47] SYSTEM VERSION: 1\n> [2012-11-14 15:18:47] SYSTEM VERSION: 1\n> [2012-11-14 15:18:47] Server count:1\n> [2012-11-14 15:18:47] Server count:1\n> [2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5\n> [2012-11-14 15:18:47] ServerA@1.1.1.1 finish initializing…\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5\n> [2012-11-14 15:18:47] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] End event: NodeChildrenChanged\n> [2012-11-14 15:18:47] New zk connection session: 0\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] ServerB@1.1.1.2 initializing…\n> [2012-11-14 15:18:51] Thread-6 get an event.Path:null,state:SyncConnected,type:None\n> [2012-11-14 15:18:51] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:51] In event: NodeChildrenChanged\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:18:51] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:51] In event: NodeChildrenChanged\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:18:51] SYSTEM VERSION: 1\n> [2012-11-14 15:18:51] SYSTEM VERSION: 1\n> [2012-11-14 15:18:51] Server count:2\n> [2012-11-14 15:18:51] SYSTEM VERSION: 1\n> [2012-11-14 15:18:51] ServerA@1.1.1.1, mod=0,base=10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_0:0/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_1:1/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_2:2/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_3:3/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_4:4/10\n> [2012-11-14 15:18:51] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:18:51] Server count:2\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] End event: NodeChildrenChanged\n> [2012-11-14 15:18:51] Server count:2\n> [2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:18:51] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] End event: NodeChildrenChanged\n> [2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:18:51] ServerB@1.1.1.2 finish initializing…\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] New zk connection session: 0\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] ServerC@1.1.1.3 initializing…\n> [2012-11-14 15:18:56] Thread-12 get an event.Path:null,state:SyncConnected,type:None\n> [2012-11-14 15:18:56] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:56] In event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:18:56] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:56] In event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:18:56] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:56] In event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ServerA@1.1.1.1, mod=0,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0:0/15\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1:1/15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2:2/15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3:3/15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4:4/15\n> [2012-11-14 15:18:56] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] End event: NodeChildrenChanged\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ServerB@1.1.1.2, mod=1,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0:5/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1:6/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2:7/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3:8/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4:9/15\n> [2012-11-14 15:18:56] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] End event: NodeChildrenChanged\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15\n> [2012-11-14 15:18:56] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] End event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15\n> [2012-11-14 15:18:56] ServerC@1.1.1.3 finish initializing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_0\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_0\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_0\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_1\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_1\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_2\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_3\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_4\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_2\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_3\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_1\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_4\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_2\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_3\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_4\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:02] Thread-0 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:02] In event: NodeDeleted\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:02] Thread-12 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:02] In event: NodeDeleted\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:02] Thread-6 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:02] In event: NodeDeleted\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] Server count:2\n> Did not get the mod number for ServerA@1.1.1.1\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeDeleted\n> [2012-11-14 15:19:02] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:02] In event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeDeleted\n> [2012-11-14 15:19:02] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:02] In event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeDeleted\n> [2012-11-14 15:19:02] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:02] In event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeChildrenChanged\n> Did not get the mod number for ServerA@1.1.1.1\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10\n> [2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeChildrenChanged\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_0-10/10:\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_1-11/10:\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_2-12/10:\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_3-13/10:\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_4-14/10:\n> [2012-11-14 15:19:07] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:07] In event: NodeChildrenChanged\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:07] Thread-12 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:07] In event: NodeDeleted\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:07] Thread-6 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:07] In event: NodeDeleted\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> Did not get the mod number for ServerA@1.1.1.1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeChildrenChanged\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeDeleted\n> [2012-11-14 15:19:07] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:07] In event: NodeChildrenChanged\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…\n> Did not get the mod number for ServerB@1.1.1.2\n> [2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeDeleted\n> [2012-11-14 15:19:07] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:07] In event: NodeChildrenChanged\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> Did not get the mod number for ServerB@1.1.1.2\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeChildrenChanged\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeChildrenChanged\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_1-6/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_0-10/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_0-5/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_1-11/5:\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_3-8/5:\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_2-7/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_4-9/5:\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_2-12/5:\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_4-14/5:\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_3-13/5:\n> [2012-11-14 15:19:12] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:12] In event: NodeChildrenChanged\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:12] Thread-12 get an event.Path:/demo/1.1.1.3,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:12] In event: NodeDeleted\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:12] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:12] In event: NodeChildrenChanged\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeChildrenChanged\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeChildrenChanged\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeDeleted\n> [2012-11-14 15:19:12] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:12] In event: NodeChildrenChanged\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeChildrenChanged\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_1: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_2: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_0: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_1: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_0: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_3: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_0: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_4: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_3: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_1: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_2: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_4: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_2: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_3: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_4: did not get server_count and modNum!!!\n> [2012-11-14 15:19:20] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:20] In event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:20] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:20] In event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:20] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:20] In event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:20] SYSTEM VERSION: 1\n> [2012-11-14 15:19:20] SYSTEM VERSION: 1\n> [2012-11-14 15:19:20] SYSTEM VERSION: 1\n> [2012-11-14 15:19:20] Server count:1\n> Did not get the mod number for ServerC@1.1.1.3\n> [2012-11-14 15:19:20] Server count:1\n> [2012-11-14 15:19:20] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] End event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ServerA@1.1.1.1, mod=0,base=5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_0:0/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_1:1/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_2:2/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_3:3/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_4:4/5\n> [2012-11-14 15:19:20] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] End event: NodeChildrenChanged\n> Did not get the mod number for ServerB@1.1.1.2\n> [2012-11-14 15:19:20] Server count:1\n> [2012-11-14 15:19:20] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] End event: NodeChildrenChanged\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_1-6/5:\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_0-10/5:\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_0-5/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_1-11/5:\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_3-8/5:\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_2-7/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_2-12/5:\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_4-9/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_4-14/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_3-13/5:\n> [2012-11-14 15:19:25] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:25] In event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:25] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:25] In event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:25] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:25] In event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:25] SYSTEM VERSION: 1\n> [2012-11-14 15:19:25] SYSTEM VERSION: 1\n> [2012-11-14 15:19:25] SYSTEM VERSION: 1\n> [2012-11-14 15:19:25] Server count:2\n> [2012-11-14 15:19:25] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:25] ================\n> Did not get the mod number for ServerC@1.1.1.3\n> [2012-11-14 15:19:25] End event: NodeChildrenChanged\n> [2012-11-14 15:19:25] Server count:2\n> [2012-11-14 15:19:25] Server count:2\n> [2012-11-14 15:19:25] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:19:25] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] End event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ServerA@1.1.1.1, mod=0,base=10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_0:0/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_1:1/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_2:2/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_3:3/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_4:4/10\n> [2012-11-14 15:19:25] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] End event: NodeChildrenChanged\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_0-10/10:\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_1-11/10:\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_2-12/10:\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_4-14/10:\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_3-13/10:\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0-10/10:\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1-11/10:\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2-12/10:\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3-13/10:\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4-14/10:\n> [2012-11-14 15:19:31] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:31] In event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:31] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:31] In event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:31] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:31] In event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:31] SYSTEM VERSION: 1\n> [2012-11-14 15:19:31] SYSTEM VERSION: 1\n> [2012-11-14 15:19:31] SYSTEM VERSION: 1\n> [2012-11-14 15:19:31] Server count:3\n> [2012-11-14 15:19:31] Server count:3\n> [2012-11-14 15:19:31] ServerA@1.1.1.1, mod=0,base=15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0:0/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1:1/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2:2/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3:3/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4:4/15\n> [2012-11-14 15:19:31] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] End event: NodeChildrenChanged\n> [2012-11-14 15:19:31] Server count:3\n> [2012-11-14 15:19:31] ServerC@1.1.1.3, mod=2,base=15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0:10/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1:11/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2:12/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3:13/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4:14/15\n> [2012-11-14 15:19:31] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] End event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ServerB@1.1.1.2, mod=1,base=15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0:5/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1:6/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2:7/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3:8/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4:9/15\n> [2012-11-14 15:19:31] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] End event: NodeChildrenChanged\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n","source":"_posts/使用zookeeper协调多服务器的任务处理.md","raw":"---\ntitle: 使用zookeeper协调多服务器的任务处理\ndate: 2012-11-13 16:16:43\ntags: \n- zookeeper\n- 横向扩展\n- 分布式协调\ncategories: \n- 分布式应用\n---\n\n背景\n--\n**Zookeeper**是hadoop的子项目，是google的chubby的开源实现，是一个针对大规模分布式系统的可靠的分布式协调系统。Zookeeper一般部署在一个集群上，通过在集群间维护一个数据树，使得连接到集群的client能够获得统一的数据信息，比如系统公共配置信息、节点存活状态等等。因此，在互联网公司中，zookeeper被广泛运用于统一配置管理、名字服务、分布式同步等。\n问题\n--\n我们看下这样一种场景：  \n前台系统每时每刻都生成大量数据，这些原生数据由后台系统处理完毕后再作他用，我们暂且不谈这些数据的存储形式，只关注如何能够尽可能高效的处理。举个例子，前台系统可能是微博的前端发布系统、搜索引擎上的广告投放系统，或者是任务发布系统，后台系统则可能是对微博和广告信息的审查系统，比如用户发的微博如果包含近期敏感信息则不予显示，若是任务，后台系统则负责处理任务具体的执行。  \n若数据量和任务量较小，单节点的后台系统或许可以处理得过来，但是如果数据量和任务量很大（比如新浪微博，龙年正月初一0点0分0秒，共有32312条微博同时发布），单节点的后台系统肯定吃不消，这时候，可想而知的是多节点同时处理前台过来的数据。  \n最简单的方法是，按消息id对后台节点数取模（msgid%server_num=mod），每个后台节点取自己那份数据进行处理，这就需要每个节点都知晓当前有多少个后台节点以及本节点所应取的mod数。但是，当某个节点宕机时，这个节点所应处理的数据无法被继续处理了，势必会造成阻塞，除非重新配置各节点上的参数，将节点数server_num减1，并修改各节点取数据的mod数。  \n毋庸置疑，这样非常麻烦！如果能够将这种配置信息（实际上是数据在节点间分配的控制信息）统一管理起来，在配置信息发生变化时，各个后台节点能够及时知晓其变化，就可以避免上述情况的发生。  \n因此，采用多节点处理数据时，有两个问题：  \n1.避免多个节点重复处理同一条数据，否则造成资源浪费。  \n2.不能有数据被遗漏处理，尤其是在有后台节点down掉的时候。  \n也就是说，采用多节点同时处理数据时，需要将数据隔离开，分别给不同的节点处理，而且在有节点宕机的情况下，所有数据也必须可以无误的被其他可用节点处理。如何做到这一点呢，使用zookeeper吧！  \n<!--more-->\n解决方案\n--\n我们通过zookeeper维护一个目录（比如/app/config），服务器启动时连接zookeeper集群并在该目录下创建表示自己的临时节点（CreateMode.EPHEMERAL），相当于注册一个节点，节点名可以是本服务器的ip，节点的值为该服务器的mod值，按注册顺序从0递增，即第一个注册的节点值为0，第二个为1，依次下去，因此/app/config的子节点数就是注册到zookeeper的服务器数。同时，各服务器监听/app/config目录，当其发生变化（新加入子节点、子节点失效等）时，每个服务器都将获取到这个事件并进行相应的处理。  \ndemo\n--\n下面针对以上场景给出一个示例demo。  \n**Server类**：服务器  \n**ClientThread类**：服务器上的单个线程  \n**NodeStateWatcher类**：服务器监听zookeeper集群的监听器  \n**ZkOperationImpl类**：zookeeper的操作封装（实现ZkOperation接口）  \nServer.java\n```java\npublic class Server extends Thread\n{\n private ClientThread[] clients = new ClientThread[Constant.THREAD_COUNT]; // 数据处理线程\n private ZkOperation operationCient = null; // 与zookeeper的连接\n private Watcher nodeWatcher = null;  // 向zookeeper注册的监听器\n private String name; // 服务器名\n private String ip; // 服务器ip\n \n public Server(String name, String ip) throws IOException, KeeperException, InterruptedException\n {\n  this.name = name;\n  this.ip = ip;\n  this.operationCient = new ZkOperationImpl();\n  this.nodeWatcher = new NodeStateWatcher(this);\n  this.operationCient.init(Constant.ZK_ADDRESS, nodeWatcher);\n \n  for (int i=0; i<Constant.THREAD_COUNT; ++i)\n  {\n   ClientThread c = new ClientThread(i, ip, name);\n   this.clients[i]= c;\n  }\n \n  initialize();\n }\n \n /**\n  * 向zookeeper集群注册\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n private void registerServer() throws KeeperException, InterruptedException\n {\n  List<String> children = operationCient.getChilds(Constant.ROOT_PATH);\n  int max = -1;\n  for (String childName : children)\n  {\n   String childPath = Constant.ROOT_PATH + \"/\" + childName;\n   int mod = Integer.parseInt(operationCient.getData(childPath));\n   if (mod > max)\n    max = mod;\n  }\n  String path = Constant.ROOT_PATH + \"/\" + ip;\n  operationCient.apendTempNode(path, String.valueOf(max<0 ? 0 : ++max));\n }\n \n /**\n  * 启动数据处理线程\n  * @throws Exception\n  */\n public void run()\n {\n  for (ClientThread c : clients)\n  {\n   CommonUtil.log(\"Start thread-\" + c);\n   c.start();\n  }\n }\n \n /**\n  * 服务器初始化\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n private void initialize() throws KeeperException, InterruptedException\n {\n  CommonUtil.log(\"================\");\n  CommonUtil.log(this + \" initializing...\");\n \n  // 配置信息的上级目录不存在\n  if (!operationCient.exist(Constant.ROOT_PATH))\n  {\n   System.err.println(\"Root path \" + Constant.ROOT_PATH + \"does not exist!!! Create root path...\");\n   operationCient.apendPresistentNode(Constant.ROOT_PATH, \"1\");\n   CommonUtil.log(\"Create root path \" + Constant.ROOT_PATH + \" successfully!\");\n  }\n \n  registerServer();\n \n  refreshConfig();\n \n  CommonUtil.log(this + \" finish initializing...\");\n  CommonUtil.log(\"================\");\n }\n \n /**\n  * watch到节点变化后，刷新节点数和模数\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n public void refresh() throws KeeperException, InterruptedException\n {\n  CommonUtil.log(\"================\");\n  CommonUtil.log(this + \":freshing...\");\n \n  refreshConfig();\n \n  CommonUtil.log(this + \":end freshing...\");\n  CommonUtil.log(\"================\");\n }\n \n private void refreshConfig() throws KeeperException, InterruptedException\n {\n  String version = operationCient.getData(Constant.ROOT_PATH);\n  CommonUtil.log(\"SYSTEM VERSION: \" + version);\n  List<String> children = operationCient.getChilds(Constant.ROOT_PATH);\n \n  // 1. 服务器数量为子节点的个数\n  int nodeCount = children.size();\n  CommonUtil.log(\"Server count:\" + nodeCount);\n  synchronized (CommonUtil.BASE)\n  {\n   CommonUtil.BASE = nodeCount * Constant.THREAD_COUNT;\n  }\n \n  if (CommonUtil.BASE.intValue() == 0)\n   return;\n \n  Integer mod = null;\n \n  for (String childName : children)\n  {\n   // 2. 获取本服务器的模数\n   if (childName.equals(ip))\n   {\n    String childPath = Constant.ROOT_PATH + \"/\" + childName;\n    mod = Integer.parseInt(operationCient.getData(childPath));\n    break;\n   }\n  }\n  // 3. 刷新数据处理线程的取模数\n  if (mod == null)\n  {\n   System.err.println(\"Did not get the mod number for \" + this);\n  }\n  else\n  {\n   CommonUtil.log(this + \", mod=\" + mod + \",base=\" + CommonUtil.BASE);\n   for (ClientThread c : clients)\n   {\n    c.refresh(mod);\n   }\n  }\n }\n \n public String toString()\n {\n  return this.name + \"@\" + this.ip + \"\";\n }\n \n public ClientThread[] getClients()\n {\n  return clients;\n }\n \n public ZkOperation getOperationCient()\n {\n  return operationCient;\n }\n \n public Watcher getNodeWatcher()\n {\n  return nodeWatcher;\n }\n \n public String getIp()\n {\n  return ip;\n }\n}\n```\nClientThread.java\n```java\npublic class ClientThread extends Thread\n{\n \n private Integer modNum = -1;\n private Integer threadId;\n private String ip;\n private String clientName;\n \n public ClientThread(Integer threadId, String ip, String clientName) throws IOException, KeeperException, InterruptedException\n {\n  this.threadId = threadId;\n  this.ip = ip;\n  this.clientName = clientName;\n }\n \n /**\n  * watch到节点变化后，调用刷新节点数和模数\n  * @throws InterruptedException\n  * @throws KeeperException\n  */\n public void refresh(int mod) throws KeeperException, InterruptedException\n {\n//  CommonUtil.log(\"================\");\n//  CommonUtil.log(this + \":freshing...\");\n \n  synchronized (this.modNum)\n  {\n   this.modNum = threadId + mod * Constant.THREAD_COUNT;\n  }\n \n  CommonUtil.log(this + \":\" + modNum + \"/\" + CommonUtil.BASE);\n \n//  CommonUtil.log(this + \":end freshing...\");\n//  CommonUtil.log(\"================\");\n }\n \n @Override\n public void run()\n {\n  long start = System.currentTimeMillis();\n  while (System.currentTimeMillis() - start < Constant.DURATION)\n  {\n   // 处理数据\n   processData();\n   try\n   {\n    Thread.sleep(5000); //等待2秒\n   }\n   catch (InterruptedException e)\n   {\n    e.printStackTrace();\n   }\n  }\n \n }\n \n /**\n  * 模拟处理数据逻辑：打印属于本线程的数据\n  */\n private void processData()\n {\n  if (CommonUtil.BASE.equals(0) || modNum.equals(-1))\n  {\n   CommonUtil.err(this + \": did not get server_count and modNum!!!\");\n   return;\n  }\n \n  StringBuilder sb = new StringBuilder(this + \"-\" + modNum + \"/\" + CommonUtil.BASE + \":\");\n  for (int i=0; i<Constant.NUMBERS.length; ++i)\n  {\n   int n = Constant.NUMBERS[i];\n   if (n % CommonUtil.BASE == modNum)\n   {\n    sb.append(n).append(\" \");\n   }\n  }\n  CommonUtil.log(sb.toString());\n }\n \n @Override\n public String toString()\n {\n  return \"ClientThread_\" + this.clientName + \"@\" + this.ip + \"-thread_\" + this.threadId;\n }\n \n public Integer getModNum()\n {\n  return modNum;\n }\n \n public synchronized void setModNum(Integer modNum)\n {\n  this.modNum = modNum;\n }\n \n public String getClientName()\n {\n  return clientName;\n }\n}\n```\nNodeStateWatcher.java\n```java\npublic class NodeStateWatcher implements Watcher\n{\n private Server server;\n \n public NodeStateWatcher(Server server)\n {\n  this.server = server;\n }\n \n @Override\n public void process(WatchedEvent event)\n {\n  StringBuilder outputStr = new StringBuilder();\n  if (server.getName() != null)\n  {\n   outputStr.append(server.getName() + \" get an event.\");\n  }\n  outputStr.append(\"Path:\" + event.getPath());\n  outputStr.append(\",state:\" + event.getState());\n  outputStr.append(\",type:\" + event.getType());\n  CommonUtil.log(outputStr.toString());\n \n  // 发现子节点有变化\n  if (event.getType() == EventType.NodeChildrenChanged\n    || event.getType() == EventType.NodeDataChanged\n    || event.getType() == EventType.NodeDeleted)\n  {\n   CommonUtil.log(\"In event: \" + event.getType());\n   try\n   {\n    server.refresh();\n   }\n   catch (KeeperException e)\n   {\n    e.printStackTrace();\n   }\n   catch (InterruptedException e)\n   {\n    e.printStackTrace();\n   }\n   CommonUtil.log(\"End event: \" + event.getType());\n  }\n }\n}\n```\nZkOperationImpl.java 部分zk操作代码\n```java\n@Override\n public void apendPresistentNode(String path, String data)\n   throws KeeperException, InterruptedException\n {\n  if (zk != null)\n  {\n   zk.create(path, data.getBytes(), Ids.OPEN_ACL_UNSAFE,\n     CreateMode.PERSISTENT);\n  }\n }\n \n @Override\n public void delNode(String path) throws KeeperException,\n   InterruptedException\n {\n  if (zk != null)\n  {\n   zk.delete(path, -1);\n  }\n }\n \n @Override\n public boolean exist(String path) throws KeeperException,\n   InterruptedException\n {\n  if (zk != null)\n  {\n   return zk.exists(path, true) != null;\n  }\n  return false;\n }\n}\n```\n\nMain.java：主类，启动demo\n\n```java\npublic class Main\n{\n public static void main(String[] args) throws Exception\n {\n  Server c1 = new Server(\"ServerA\", \"1.1.1.1\");\n  Server c2 = new Server(\"ServerB\", \"1.1.1.2\");\n  Server c3 = new Server(\"ServerC\", \"1.1.1.3\");\n \n  c1.start();\n  c2.start();\n  c3.start();\n }\n}\n```\n\n\n验证\n--\n由于Server的3个实例在同一台机器上运行，连接到zookeeper时，用的是一个session，所以demo中没有通过程序断开server与zookeeper的连接，如果serverA断开，那么serverB和serverC与zookeeper的session连接也会失效，达不到演示效果，所以我们只能暂时在zookeeper客户端手工更改zookeeper上的配置信息，用于模拟server与zookeeper集群断开连接和增加server的情形。server启动后，会先向zookeeper注册节点，因此我们先手工删除节点，再手工添加节点。  \n手工执行的命令如下：  \n> [zk: localhost:2181(CONNECTED) 141] delete /demo/1.1.1.3\n> [zk: localhost:2181(CONNECTED) 142] delete /demo/1.1.1.2\n> [zk: localhost:2181(CONNECTED) 143] delete /demo/1.1.1.1\n> [zk: localhost:2181(CONNECTED) 144] create -e /demo/1.1.1.1 0\n> [zk: localhost:2181(CONNECTED) 145] create -e /demo/1.1.1.2 1\n> [zk: localhost:2181(CONNECTED) 146] create -e /demo/1.1.1.3 2  \n\n可以通过程序打印信息发现，在节点配置信息每个服务器(Server)上的线程会动态的获取属于自己的数据并打印。当然，这里对数据的处理逻辑很简单，仅仅是打印出来，处理的数据也只是内存中的一个数组，对于类似这样的但是更复杂的应用场景，zookeeper同样适用，但是需要更多的考虑服务器与zookeeper集群连接的可靠性（比如session超时重连）、权限机制等等。  \n上面的demo程序打印信息如下：  \n\n> [2012-11-14 15:18:42] New zk connection session: 0\n> [2012-11-14 15:18:42] ================\n> [2012-11-14 15:18:42] ServerA@1.1.1.1 initializing…\n> [2012-11-14 15:18:47] Thread-0 get an event.Path:null,state:SyncConnected,type:None\n> [2012-11-14 15:18:47] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:47] In event: NodeChildrenChanged\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:18:47] SYSTEM VERSION: 1\n> [2012-11-14 15:18:47] SYSTEM VERSION: 1\n> [2012-11-14 15:18:47] Server count:1\n> [2012-11-14 15:18:47] Server count:1\n> [2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5\n> [2012-11-14 15:18:47] ServerA@1.1.1.1 finish initializing…\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5\n> [2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5\n> [2012-11-14 15:18:47] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] End event: NodeChildrenChanged\n> [2012-11-14 15:18:47] New zk connection session: 0\n> [2012-11-14 15:18:47] ================\n> [2012-11-14 15:18:47] ServerB@1.1.1.2 initializing…\n> [2012-11-14 15:18:51] Thread-6 get an event.Path:null,state:SyncConnected,type:None\n> [2012-11-14 15:18:51] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:51] In event: NodeChildrenChanged\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:18:51] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:51] In event: NodeChildrenChanged\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:18:51] SYSTEM VERSION: 1\n> [2012-11-14 15:18:51] SYSTEM VERSION: 1\n> [2012-11-14 15:18:51] Server count:2\n> [2012-11-14 15:18:51] SYSTEM VERSION: 1\n> [2012-11-14 15:18:51] ServerA@1.1.1.1, mod=0,base=10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_0:0/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_1:1/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_2:2/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_3:3/10\n> [2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_4:4/10\n> [2012-11-14 15:18:51] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:18:51] Server count:2\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] End event: NodeChildrenChanged\n> [2012-11-14 15:18:51] Server count:2\n> [2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:18:51] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] End event: NodeChildrenChanged\n> [2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:18:51] ServerB@1.1.1.2 finish initializing…\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] New zk connection session: 0\n> [2012-11-14 15:18:51] ================\n> [2012-11-14 15:18:51] ServerC@1.1.1.3 initializing…\n> [2012-11-14 15:18:56] Thread-12 get an event.Path:null,state:SyncConnected,type:None\n> [2012-11-14 15:18:56] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:56] In event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:18:56] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:56] In event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:18:56] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:18:56] In event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ServerA@1.1.1.1, mod=0,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0:0/15\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1:1/15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2:2/15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3:3/15\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4:4/15\n> [2012-11-14 15:18:56] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] End event: NodeChildrenChanged\n> [2012-11-14 15:18:56] SYSTEM VERSION: 1\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ServerB@1.1.1.2, mod=1,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0:5/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1:6/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2:7/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3:8/15\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4:9/15\n> [2012-11-14 15:18:56] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] End event: NodeChildrenChanged\n> [2012-11-14 15:18:56] Server count:3\n> [2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15\n> [2012-11-14 15:18:56] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] End event: NodeChildrenChanged\n> [2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15\n> [2012-11-14 15:18:56] ServerC@1.1.1.3 finish initializing…\n> [2012-11-14 15:18:56] ================\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_0\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_0\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_0\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_1\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_1\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_2\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_3\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_4\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_2\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_3\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_1\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_4\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_2\n> [2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_3\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_4\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n> [2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n> [2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:02] Thread-0 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:02] In event: NodeDeleted\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:02] Thread-12 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:02] In event: NodeDeleted\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:02] Thread-6 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:02] In event: NodeDeleted\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] Server count:2\n> Did not get the mod number for ServerA@1.1.1.1\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeDeleted\n> [2012-11-14 15:19:02] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:02] In event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeDeleted\n> [2012-11-14 15:19:02] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:02] In event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeDeleted\n> [2012-11-14 15:19:02] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:02] In event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeChildrenChanged\n> Did not get the mod number for ServerA@1.1.1.1\n> [2012-11-14 15:19:02] SYSTEM VERSION: 1\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] Server count:2\n> [2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10\n> [2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeChildrenChanged\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:02] ================\n> [2012-11-14 15:19:02] End event: NodeChildrenChanged\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_0-10/10:\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30\n> [2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_1-11/10:\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_2-12/10:\n> [2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_3-13/10:\n> [2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_4-14/10:\n> [2012-11-14 15:19:07] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:07] In event: NodeChildrenChanged\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:07] Thread-12 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:07] In event: NodeDeleted\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:07] Thread-6 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:07] In event: NodeDeleted\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> Did not get the mod number for ServerA@1.1.1.1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeChildrenChanged\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeDeleted\n> [2012-11-14 15:19:07] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:07] In event: NodeChildrenChanged\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…\n> Did not get the mod number for ServerB@1.1.1.2\n> [2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeDeleted\n> [2012-11-14 15:19:07] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:07] In event: NodeChildrenChanged\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> Did not get the mod number for ServerB@1.1.1.2\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeChildrenChanged\n> [2012-11-14 15:19:07] SYSTEM VERSION: 1\n> [2012-11-14 15:19:07] Server count:1\n> [2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5\n> [2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5\n> [2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:07] ================\n> [2012-11-14 15:19:07] End event: NodeChildrenChanged\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_1-6/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_0-10/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_0-5/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_1-11/5:\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_3-8/5:\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_2-7/5:\n> [2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29\n> [2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_4-9/5:\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_2-12/5:\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_4-14/5:\n> [2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_3-13/5:\n> [2012-11-14 15:19:12] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:12] In event: NodeChildrenChanged\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:12] Thread-12 get an event.Path:/demo/1.1.1.3,state:SyncConnected,type:NodeDeleted\n> [2012-11-14 15:19:12] In event: NodeDeleted\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:12] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:12] In event: NodeChildrenChanged\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeChildrenChanged\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeChildrenChanged\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeDeleted\n> [2012-11-14 15:19:12] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:12] In event: NodeChildrenChanged\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:12] SYSTEM VERSION: 1\n> [2012-11-14 15:19:12] Server count:0\n> [2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:12] ================\n> [2012-11-14 15:19:12] End event: NodeChildrenChanged\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_1: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_2: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_0: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_1: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_0: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_3: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_0: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_4: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_3: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_1: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_2: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_4: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_2: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_3: did not get server_count and modNum!!!\n> [2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_4: did not get server_count and modNum!!!\n> [2012-11-14 15:19:20] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:20] In event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:20] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:20] In event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:20] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:20] In event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:20] SYSTEM VERSION: 1\n> [2012-11-14 15:19:20] SYSTEM VERSION: 1\n> [2012-11-14 15:19:20] SYSTEM VERSION: 1\n> [2012-11-14 15:19:20] Server count:1\n> Did not get the mod number for ServerC@1.1.1.3\n> [2012-11-14 15:19:20] Server count:1\n> [2012-11-14 15:19:20] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] End event: NodeChildrenChanged\n> [2012-11-14 15:19:20] ServerA@1.1.1.1, mod=0,base=5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_0:0/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_1:1/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_2:2/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_3:3/5\n> [2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_4:4/5\n> [2012-11-14 15:19:20] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] End event: NodeChildrenChanged\n> Did not get the mod number for ServerB@1.1.1.2\n> [2012-11-14 15:19:20] Server count:1\n> [2012-11-14 15:19:20] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:20] ================\n> [2012-11-14 15:19:20] End event: NodeChildrenChanged\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_1-6/5:\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_0-10/5:\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_0-5/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_1-11/5:\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_3-8/5:\n> [2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_2-7/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_2-12/5:\n> [2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_4-9/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_4-14/5:\n> [2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_3-13/5:\n> [2012-11-14 15:19:25] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:25] In event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:25] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:25] In event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:25] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:25] In event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:25] SYSTEM VERSION: 1\n> [2012-11-14 15:19:25] SYSTEM VERSION: 1\n> [2012-11-14 15:19:25] SYSTEM VERSION: 1\n> [2012-11-14 15:19:25] Server count:2\n> [2012-11-14 15:19:25] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:25] ================\n> Did not get the mod number for ServerC@1.1.1.3\n> [2012-11-14 15:19:25] End event: NodeChildrenChanged\n> [2012-11-14 15:19:25] Server count:2\n> [2012-11-14 15:19:25] Server count:2\n> [2012-11-14 15:19:25] ServerB@1.1.1.2, mod=1,base=10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_0:5/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_1:6/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_2:7/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_3:8/10\n> [2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_4:9/10\n> [2012-11-14 15:19:25] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] End event: NodeChildrenChanged\n> [2012-11-14 15:19:25] ServerA@1.1.1.1, mod=0,base=10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_0:0/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_1:1/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_2:2/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_3:3/10\n> [2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_4:4/10\n> [2012-11-14 15:19:25] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:25] ================\n> [2012-11-14 15:19:25] End event: NodeChildrenChanged\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_0-10/10:\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26\n> [2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_1-11/10:\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27\n> [2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_2-12/10:\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_4-14/10:\n> [2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_3-13/10:\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0-10/10:\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1-11/10:\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2-12/10:\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3-13/10:\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4-14/10:\n> [2012-11-14 15:19:31] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:31] In event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] ServerA@1.1.1.1:freshing…\n> [2012-11-14 15:19:31] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:31] In event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] ServerC@1.1.1.3:freshing…\n> [2012-11-14 15:19:31] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged\n> [2012-11-14 15:19:31] In event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] ServerB@1.1.1.2:freshing…\n> [2012-11-14 15:19:31] SYSTEM VERSION: 1\n> [2012-11-14 15:19:31] SYSTEM VERSION: 1\n> [2012-11-14 15:19:31] SYSTEM VERSION: 1\n> [2012-11-14 15:19:31] Server count:3\n> [2012-11-14 15:19:31] Server count:3\n> [2012-11-14 15:19:31] ServerA@1.1.1.1, mod=0,base=15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0:0/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1:1/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2:2/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3:3/15\n> [2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4:4/15\n> [2012-11-14 15:19:31] ServerA@1.1.1.1:end freshing…\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] End event: NodeChildrenChanged\n> [2012-11-14 15:19:31] Server count:3\n> [2012-11-14 15:19:31] ServerC@1.1.1.3, mod=2,base=15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0:10/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1:11/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2:12/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3:13/15\n> [2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4:14/15\n> [2012-11-14 15:19:31] ServerC@1.1.1.3:end freshing…\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] End event: NodeChildrenChanged\n> [2012-11-14 15:19:31] ServerB@1.1.1.2, mod=1,base=15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0:5/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1:6/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2:7/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3:8/15\n> [2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4:9/15\n> [2012-11-14 15:19:31] ServerB@1.1.1.2:end freshing…\n> [2012-11-14 15:19:31] ================\n> [2012-11-14 15:19:31] End event: NodeChildrenChanged\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22\n> [2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27\n> [2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29\n> [2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28\n","slug":"使用zookeeper协调多服务器的任务处理","published":1,"updated":"2016-07-09T08:47:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxgd0015d968ph1s32v4","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><strong>Zookeeper</strong>是hadoop的子项目，是google的chubby的开源实现，是一个针对大规模分布式系统的可靠的分布式协调系统。Zookeeper一般部署在一个集群上，通过在集群间维护一个数据树，使得连接到集群的client能够获得统一的数据信息，比如系统公共配置信息、节点存活状态等等。因此，在互联网公司中，zookeeper被广泛运用于统一配置管理、名字服务、分布式同步等。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我们看下这样一种场景：<br>前台系统每时每刻都生成大量数据，这些原生数据由后台系统处理完毕后再作他用，我们暂且不谈这些数据的存储形式，只关注如何能够尽可能高效的处理。举个例子，前台系统可能是微博的前端发布系统、搜索引擎上的广告投放系统，或者是任务发布系统，后台系统则可能是对微博和广告信息的审查系统，比如用户发的微博如果包含近期敏感信息则不予显示，若是任务，后台系统则负责处理任务具体的执行。<br>若数据量和任务量较小，单节点的后台系统或许可以处理得过来，但是如果数据量和任务量很大（比如新浪微博，龙年正月初一0点0分0秒，共有32312条微博同时发布），单节点的后台系统肯定吃不消，这时候，可想而知的是多节点同时处理前台过来的数据。<br>最简单的方法是，按消息id对后台节点数取模（msgid%server_num=mod），每个后台节点取自己那份数据进行处理，这就需要每个节点都知晓当前有多少个后台节点以及本节点所应取的mod数。但是，当某个节点宕机时，这个节点所应处理的数据无法被继续处理了，势必会造成阻塞，除非重新配置各节点上的参数，将节点数server_num减1，并修改各节点取数据的mod数。<br>毋庸置疑，这样非常麻烦！如果能够将这种配置信息（实际上是数据在节点间分配的控制信息）统一管理起来，在配置信息发生变化时，各个后台节点能够及时知晓其变化，就可以避免上述情况的发生。<br>因此，采用多节点处理数据时，有两个问题：<br>1.避免多个节点重复处理同一条数据，否则造成资源浪费。<br>2.不能有数据被遗漏处理，尤其是在有后台节点down掉的时候。<br>也就是说，采用多节点同时处理数据时，需要将数据隔离开，分别给不同的节点处理，而且在有节点宕机的情况下，所有数据也必须可以无误的被其他可用节点处理。如何做到这一点呢，使用zookeeper吧！<br><a id=\"more\"></a></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>我们通过zookeeper维护一个目录（比如/app/config），服务器启动时连接zookeeper集群并在该目录下创建表示自己的临时节点（CreateMode.EPHEMERAL），相当于注册一个节点，节点名可以是本服务器的ip，节点的值为该服务器的mod值，按注册顺序从0递增，即第一个注册的节点值为0，第二个为1，依次下去，因此/app/config的子节点数就是注册到zookeeper的服务器数。同时，各服务器监听/app/config目录，当其发生变化（新加入子节点、子节点失效等）时，每个服务器都将获取到这个事件并进行相应的处理。  </p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>下面针对以上场景给出一个示例demo。<br><strong>Server类</strong>：服务器<br><strong>ClientThread类</strong>：服务器上的单个线程<br><strong>NodeStateWatcher类</strong>：服务器监听zookeeper集群的监听器<br><strong>ZkOperationImpl类</strong>：zookeeper的操作封装（实现ZkOperation接口）<br>Server.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> ClientThread[] clients = <span class=\"keyword\">new</span> ClientThread[Constant.THREAD_COUNT]; <span class=\"comment\">// 数据处理线程</span></div><div class=\"line\"> <span class=\"keyword\">private</span> ZkOperation operationCient = <span class=\"keyword\">null</span>; <span class=\"comment\">// 与zookeeper的连接</span></div><div class=\"line\"> <span class=\"keyword\">private</span> Watcher nodeWatcher = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 向zookeeper注册的监听器</span></div><div class=\"line\"> <span class=\"keyword\">private</span> String name; <span class=\"comment\">// 服务器名</span></div><div class=\"line\"> <span class=\"keyword\">private</span> String ip; <span class=\"comment\">// 服务器ip</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Server</span><span class=\"params\">(String name, String ip)</span> <span class=\"keyword\">throws</span> IOException, KeeperException, InterruptedException</span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  <span class=\"keyword\">this</span>.ip = ip;</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationCient = <span class=\"keyword\">new</span> ZkOperationImpl();</div><div class=\"line\">  <span class=\"keyword\">this</span>.nodeWatcher = <span class=\"keyword\">new</span> NodeStateWatcher(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationCient.init(Constant.ZK_ADDRESS, nodeWatcher);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;Constant.THREAD_COUNT; ++i)</div><div class=\"line\">  &#123;</div><div class=\"line\">   ClientThread c = <span class=\"keyword\">new</span> ClientThread(i, ip, name);</div><div class=\"line\">   <span class=\"keyword\">this</span>.clients[i]= c;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  initialize();</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 向zookeeper集群注册</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">registerServer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</span></div><div class=\"line\"> &#123;</div><div class=\"line\">  List&lt;String&gt; children = operationCient.getChilds(Constant.ROOT_PATH);</div><div class=\"line\">  <span class=\"keyword\">int</span> max = -<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (String childName : children)</div><div class=\"line\">  &#123;</div><div class=\"line\">   String childPath = Constant.ROOT_PATH + <span class=\"string\">\"/\"</span> + childName;</div><div class=\"line\">   <span class=\"keyword\">int</span> mod = Integer.parseInt(operationCient.getData(childPath));</div><div class=\"line\">   <span class=\"keyword\">if</span> (mod &gt; max)</div><div class=\"line\">    max = mod;</div><div class=\"line\">  &#125;</div><div class=\"line\">  String path = Constant.ROOT_PATH + <span class=\"string\">\"/\"</span> + ip;</div><div class=\"line\">  operationCient.apendTempNode(path, String.valueOf(max&lt;<span class=\"number\">0</span> ? <span class=\"number\">0</span> : ++max));</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 启动数据处理线程</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (ClientThread c : clients)</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"Start thread-\"</span> + c);</div><div class=\"line\">   c.start();</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 服务器初始化</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</span></div><div class=\"line\"> &#123;</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\" initializing...\"</span>);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 配置信息的上级目录不存在</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!operationCient.exist(Constant.ROOT_PATH))</div><div class=\"line\">  &#123;</div><div class=\"line\">   System.err.println(<span class=\"string\">\"Root path \"</span> + Constant.ROOT_PATH + <span class=\"string\">\"does not exist!!! Create root path...\"</span>);</div><div class=\"line\">   operationCient.apendPresistentNode(Constant.ROOT_PATH, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"Create root path \"</span> + Constant.ROOT_PATH + <span class=\"string\">\" successfully!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  registerServer();</div><div class=\"line\"> </div><div class=\"line\">  refreshConfig();</div><div class=\"line\"> </div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\" finish initializing...\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * watch到节点变化后，刷新节点数和模数</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</span></div><div class=\"line\"> &#123;</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\":freshing...\"</span>);</div><div class=\"line\"> </div><div class=\"line\">  refreshConfig();</div><div class=\"line\"> </div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\":end freshing...\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshConfig</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</span></div><div class=\"line\"> &#123;</div><div class=\"line\">  String version = operationCient.getData(Constant.ROOT_PATH);</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"SYSTEM VERSION: \"</span> + version);</div><div class=\"line\">  List&lt;String&gt; children = operationCient.getChilds(Constant.ROOT_PATH);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 1. 服务器数量为子节点的个数</span></div><div class=\"line\">  <span class=\"keyword\">int</span> nodeCount = children.size();</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"Server count:\"</span> + nodeCount);</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (CommonUtil.BASE)</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.BASE = nodeCount * Constant.THREAD_COUNT;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (CommonUtil.BASE.intValue() == <span class=\"number\">0</span>)</div><div class=\"line\">   <span class=\"keyword\">return</span>;</div><div class=\"line\"> </div><div class=\"line\">  Integer mod = <span class=\"keyword\">null</span>;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">for</span> (String childName : children)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"comment\">// 2. 获取本服务器的模数</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (childName.equals(ip))</div><div class=\"line\">   &#123;</div><div class=\"line\">    String childPath = Constant.ROOT_PATH + <span class=\"string\">\"/\"</span> + childName;</div><div class=\"line\">    mod = Integer.parseInt(operationCient.getData(childPath));</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 3. 刷新数据处理线程的取模数</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (mod == <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   System.err.println(<span class=\"string\">\"Did not get the mod number for \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\", mod=\"</span> + mod + <span class=\"string\">\",base=\"</span> + CommonUtil.BASE);</div><div class=\"line\">   <span class=\"keyword\">for</span> (ClientThread c : clients)</div><div class=\"line\">   &#123;</div><div class=\"line\">    c.refresh(mod);</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\"@\"</span> + <span class=\"keyword\">this</span>.ip + <span class=\"string\">\"\"</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">public</span> ClientThread[] getClients()</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> clients;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> ZkOperation <span class=\"title\">getOperationCient</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> operationCient;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Watcher <span class=\"title\">getNodeWatcher</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> nodeWatcher;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIp</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> ip;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ClientThread.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">private</span> Integer modNum = -<span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> Integer threadId;</div><div class=\"line\"> <span class=\"keyword\">private</span> String ip;</div><div class=\"line\"> <span class=\"keyword\">private</span> String clientName;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClientThread</span><span class=\"params\">(Integer threadId, String ip, String clientName)</span> <span class=\"keyword\">throws</span> IOException, KeeperException, InterruptedException</span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.threadId = threadId;</div><div class=\"line\">  <span class=\"keyword\">this</span>.ip = ip;</div><div class=\"line\">  <span class=\"keyword\">this</span>.clientName = clientName;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * watch到节点变化后，调用刷新节点数和模数</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(<span class=\"keyword\">int</span> mod)</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</span></div><div class=\"line\"> &#123;</div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(\"================\");</span></div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(this + \":freshing...\");</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.modNum)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.modNum = threadId + mod * Constant.THREAD_COUNT;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\":\"</span> + modNum + <span class=\"string\">\"/\"</span> + CommonUtil.BASE);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(this + \":end freshing...\");</span></div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(\"================\");</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">  <span class=\"keyword\">while</span> (System.currentTimeMillis() - start &lt; Constant.DURATION)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"comment\">// 处理数据</span></div><div class=\"line\">   processData();</div><div class=\"line\">   <span class=\"keyword\">try</span></div><div class=\"line\">   &#123;</div><div class=\"line\">    Thread.sleep(<span class=\"number\">5000</span>); <span class=\"comment\">//等待2秒</span></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">   &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</span></div><div class=\"line\">  * 模拟处理数据逻辑：打印属于本线程的数据</div><div class=\"line\">  */</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processData</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (CommonUtil.BASE.equals(<span class=\"number\">0</span>) || modNum.equals(-<span class=\"number\">1</span>))</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.err(<span class=\"keyword\">this</span> + <span class=\"string\">\": did not get server_count and modNum!!!\"</span>);</div><div class=\"line\">   <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"keyword\">this</span> + <span class=\"string\">\"-\"</span> + modNum + <span class=\"string\">\"/\"</span> + CommonUtil.BASE + <span class=\"string\">\":\"</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;Constant.NUMBERS.length; ++i)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> n = Constant.NUMBERS[i];</div><div class=\"line\">   <span class=\"keyword\">if</span> (n % CommonUtil.BASE == modNum)</div><div class=\"line\">   &#123;</div><div class=\"line\">    sb.append(n).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  CommonUtil.log(sb.toString());</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"ClientThread_\"</span> + <span class=\"keyword\">this</span>.clientName + <span class=\"string\">\"@\"</span> + <span class=\"keyword\">this</span>.ip + <span class=\"string\">\"-thread_\"</span> + <span class=\"keyword\">this</span>.threadId;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getModNum</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> modNum;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setModNum</span><span class=\"params\">(Integer modNum)</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.modNum = modNum;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClientName</span><span class=\"params\">()</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> clientName;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>NodeStateWatcher.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeStateWatcher</span> <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> Server server;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NodeStateWatcher</span><span class=\"params\">(Server server)</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.server = server;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span></span></div><div class=\"line\"> &#123;</div><div class=\"line\">  StringBuilder outputStr = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">  <span class=\"keyword\">if</span> (server.getName() != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   outputStr.append(server.getName() + <span class=\"string\">\" get an event.\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  outputStr.append(<span class=\"string\">\"Path:\"</span> + event.getPath());</div><div class=\"line\">  outputStr.append(<span class=\"string\">\",state:\"</span> + event.getState());</div><div class=\"line\">  outputStr.append(<span class=\"string\">\",type:\"</span> + event.getType());</div><div class=\"line\">  CommonUtil.log(outputStr.toString());</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 发现子节点有变化</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (event.getType() == EventType.NodeChildrenChanged</div><div class=\"line\">    || event.getType() == EventType.NodeDataChanged</div><div class=\"line\">    || event.getType() == EventType.NodeDeleted)</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"In event: \"</span> + event.getType());</div><div class=\"line\">   <span class=\"keyword\">try</span></div><div class=\"line\">   &#123;</div><div class=\"line\">    server.refresh();</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">   &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">   &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"End event: \"</span> + event.getType());</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ZkOperationImpl.java 部分zk操作代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apendPresistentNode</span><span class=\"params\">(String path, String data)</span></span></div><div class=\"line\">   <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (zk != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   zk.create(path, data.getBytes(), Ids.OPEN_ACL_UNSAFE,</div><div class=\"line\">     CreateMode.PERSISTENT);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> KeeperException,</span></div><div class=\"line\">   InterruptedException</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (zk != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   zk.delete(path, -<span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exist</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> KeeperException,</span></div><div class=\"line\">   InterruptedException</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (zk != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> zk.exists(path, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Main.java：主类，启动demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</span></div><div class=\"line\"> &#123;</div><div class=\"line\">  Server c1 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"ServerA\"</span>, <span class=\"string\">\"1.1.1.1\"</span>);</div><div class=\"line\">  Server c2 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"ServerB\"</span>, <span class=\"string\">\"1.1.1.2\"</span>);</div><div class=\"line\">  Server c3 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"ServerC\"</span>, <span class=\"string\">\"1.1.1.3\"</span>);</div><div class=\"line\"> </div><div class=\"line\">  c1.start();</div><div class=\"line\">  c2.start();</div><div class=\"line\">  c3.start();</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>由于Server的3个实例在同一台机器上运行，连接到zookeeper时，用的是一个session，所以demo中没有通过程序断开server与zookeeper的连接，如果serverA断开，那么serverB和serverC与zookeeper的session连接也会失效，达不到演示效果，所以我们只能暂时在zookeeper客户端手工更改zookeeper上的配置信息，用于模拟server与zookeeper集群断开连接和增加server的情形。server启动后，会先向zookeeper注册节点，因此我们先手工删除节点，再手工添加节点。<br>手工执行的命令如下：  </p>\n<blockquote>\n<p>[zk: localhost:2181(CONNECTED) 141] delete /demo/1.1.1.3<br>[zk: localhost:2181(CONNECTED) 142] delete /demo/1.1.1.2<br>[zk: localhost:2181(CONNECTED) 143] delete /demo/1.1.1.1<br>[zk: localhost:2181(CONNECTED) 144] create -e /demo/1.1.1.1 0<br>[zk: localhost:2181(CONNECTED) 145] create -e /demo/1.1.1.2 1<br>[zk: localhost:2181(CONNECTED) 146] create -e /demo/1.1.1.3 2  </p>\n</blockquote>\n<p>可以通过程序打印信息发现，在节点配置信息每个服务器(Server)上的线程会动态的获取属于自己的数据并打印。当然，这里对数据的处理逻辑很简单，仅仅是打印出来，处理的数据也只是内存中的一个数组，对于类似这样的但是更复杂的应用场景，zookeeper同样适用，但是需要更多的考虑服务器与zookeeper集群连接的可靠性（比如session超时重连）、权限机制等等。<br>上面的demo程序打印信息如下：  </p>\n<blockquote>\n<p>[2012-11-14 15:18:42] New zk connection session: 0<br>[2012-11-14 15:18:42] ================<br>[2012-11-14 15:18:42] ServerA@1.1.1.1 initializing…<br>[2012-11-14 15:18:47] Thread-0 get an event.Path:null,state:SyncConnected,type:None<br>[2012-11-14 15:18:47] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:47] In event: NodeChildrenChanged<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:18:47] SYSTEM VERSION: 1<br>[2012-11-14 15:18:47] SYSTEM VERSION: 1<br>[2012-11-14 15:18:47] Server count:1<br>[2012-11-14 15:18:47] Server count:1<br>[2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5<br>[2012-11-14 15:18:47] ServerA@1.1.1.1 finish initializing…<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5<br>[2012-11-14 15:18:47] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] End event: NodeChildrenChanged<br>[2012-11-14 15:18:47] New zk connection session: 0<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] ServerB@1.1.1.2 initializing…<br>[2012-11-14 15:18:51] Thread-6 get an event.Path:null,state:SyncConnected,type:None<br>[2012-11-14 15:18:51] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:51] In event: NodeChildrenChanged<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:18:51] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:51] In event: NodeChildrenChanged<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:18:51] SYSTEM VERSION: 1<br>[2012-11-14 15:18:51] SYSTEM VERSION: 1<br>[2012-11-14 15:18:51] Server count:2<br>[2012-11-14 15:18:51] SYSTEM VERSION: 1<br>[2012-11-14 15:18:51] ServerA@1.1.1.1, mod=0,base=10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_0:0/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_1:1/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_2:2/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_3:3/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_4:4/10<br>[2012-11-14 15:18:51] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:18:51] Server count:2<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] End event: NodeChildrenChanged<br>[2012-11-14 15:18:51] Server count:2<br>[2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:18:51] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] End event: NodeChildrenChanged<br>[2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:18:51] ServerB@1.1.1.2 finish initializing…<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] New zk connection session: 0<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] ServerC@1.1.1.3 initializing…<br>[2012-11-14 15:18:56] Thread-12 get an event.Path:null,state:SyncConnected,type:None<br>[2012-11-14 15:18:56] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:56] In event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:18:56] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:56] In event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:18:56] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:56] In event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ServerA@1.1.1.1, mod=0,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0:0/15<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1:1/15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2:2/15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3:3/15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4:4/15<br>[2012-11-14 15:18:56] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] End event: NodeChildrenChanged<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ServerB@1.1.1.2, mod=1,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0:5/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1:6/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2:7/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3:8/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4:9/15<br>[2012-11-14 15:18:56] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] End event: NodeChildrenChanged<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15<br>[2012-11-14 15:18:56] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] End event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15<br>[2012-11-14 15:18:56] ServerC@1.1.1.3 finish initializing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_0<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_0<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_0<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_1<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_1<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_2<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_3<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_4<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_2<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_3<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_1<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_4<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_2<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_3<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_4<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:02] Thread-0 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:02] In event: NodeDeleted<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:02] Thread-12 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:02] In event: NodeDeleted<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:02] Thread-6 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:02] In event: NodeDeleted<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] Server count:2<br>Did not get the mod number for ServerA@1.1.1.1<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeDeleted<br>[2012-11-14 15:19:02] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:02] In event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeDeleted<br>[2012-11-14 15:19:02] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:02] In event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeDeleted<br>[2012-11-14 15:19:02] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:02] In event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeChildrenChanged<br>Did not get the mod number for ServerA@1.1.1.1<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10<br>[2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeChildrenChanged<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_0-10/10:<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_1-11/10:<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_2-12/10:<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_3-13/10:<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_4-14/10:<br>[2012-11-14 15:19:07] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:07] In event: NodeChildrenChanged<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:07] Thread-12 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:07] In event: NodeDeleted<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:07] Thread-6 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:07] In event: NodeDeleted<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>Did not get the mod number for ServerA@1.1.1.1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeChildrenChanged<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeDeleted<br>[2012-11-14 15:19:07] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:07] In event: NodeChildrenChanged<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…<br>Did not get the mod number for ServerB@1.1.1.2<br>[2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeDeleted<br>[2012-11-14 15:19:07] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:07] In event: NodeChildrenChanged<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>Did not get the mod number for ServerB@1.1.1.2<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeChildrenChanged<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeChildrenChanged<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_1-6/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_0-10/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_0-5/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_1-11/5:<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_3-8/5:<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_2-7/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_4-9/5:<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_2-12/5:<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_4-14/5:<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_3-13/5:<br>[2012-11-14 15:19:12] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:12] In event: NodeChildrenChanged<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:12] Thread-12 get an event.Path:/demo/1.1.1.3,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:12] In event: NodeDeleted<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:12] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:12] In event: NodeChildrenChanged<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeChildrenChanged<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeChildrenChanged<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeDeleted<br>[2012-11-14 15:19:12] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:12] In event: NodeChildrenChanged<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeChildrenChanged<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_1: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_2: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_0: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_1: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_0: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_3: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_0: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_4: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_3: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_1: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_2: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_4: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_2: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_3: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_4: did not get server_count and modNum!!!<br>[2012-11-14 15:19:20] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:20] In event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:20] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:20] In event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:20] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:20] In event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:20] SYSTEM VERSION: 1<br>[2012-11-14 15:19:20] SYSTEM VERSION: 1<br>[2012-11-14 15:19:20] SYSTEM VERSION: 1<br>[2012-11-14 15:19:20] Server count:1<br>Did not get the mod number for ServerC@1.1.1.3<br>[2012-11-14 15:19:20] Server count:1<br>[2012-11-14 15:19:20] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] End event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ServerA@1.1.1.1, mod=0,base=5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_0:0/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_1:1/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_2:2/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_3:3/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_4:4/5<br>[2012-11-14 15:19:20] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] End event: NodeChildrenChanged<br>Did not get the mod number for ServerB@1.1.1.2<br>[2012-11-14 15:19:20] Server count:1<br>[2012-11-14 15:19:20] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] End event: NodeChildrenChanged<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_1-6/5:<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_0-10/5:<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_0-5/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_1-11/5:<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_3-8/5:<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_2-7/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_2-12/5:<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_4-9/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_4-14/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_3-13/5:<br>[2012-11-14 15:19:25] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:25] In event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:25] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:25] In event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:25] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:25] In event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:25] SYSTEM VERSION: 1<br>[2012-11-14 15:19:25] SYSTEM VERSION: 1<br>[2012-11-14 15:19:25] SYSTEM VERSION: 1<br>[2012-11-14 15:19:25] Server count:2<br>[2012-11-14 15:19:25] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:25] ================<br>Did not get the mod number for ServerC@1.1.1.3<br>[2012-11-14 15:19:25] End event: NodeChildrenChanged<br>[2012-11-14 15:19:25] Server count:2<br>[2012-11-14 15:19:25] Server count:2<br>[2012-11-14 15:19:25] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:19:25] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] End event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ServerA@1.1.1.1, mod=0,base=10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_0:0/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_1:1/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_2:2/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_3:3/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_4:4/10<br>[2012-11-14 15:19:25] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] End event: NodeChildrenChanged<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_0-10/10:<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_1-11/10:<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_2-12/10:<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_4-14/10:<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_3-13/10:<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0-10/10:<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1-11/10:<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2-12/10:<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3-13/10:<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4-14/10:<br>[2012-11-14 15:19:31] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:31] In event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:31] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:31] In event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:31] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:31] In event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:31] SYSTEM VERSION: 1<br>[2012-11-14 15:19:31] SYSTEM VERSION: 1<br>[2012-11-14 15:19:31] SYSTEM VERSION: 1<br>[2012-11-14 15:19:31] Server count:3<br>[2012-11-14 15:19:31] Server count:3<br>[2012-11-14 15:19:31] ServerA@1.1.1.1, mod=0,base=15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0:0/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1:1/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2:2/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3:3/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4:4/15<br>[2012-11-14 15:19:31] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] End event: NodeChildrenChanged<br>[2012-11-14 15:19:31] Server count:3<br>[2012-11-14 15:19:31] ServerC@1.1.1.3, mod=2,base=15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0:10/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1:11/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2:12/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3:13/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4:14/15<br>[2012-11-14 15:19:31] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] End event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ServerB@1.1.1.2, mod=1,base=15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0:5/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1:6/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2:7/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3:8/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4:9/15<br>[2012-11-14 15:19:31] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] End event: NodeChildrenChanged<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28</p>\n</blockquote>\n","excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p><strong>Zookeeper</strong>是hadoop的子项目，是google的chubby的开源实现，是一个针对大规模分布式系统的可靠的分布式协调系统。Zookeeper一般部署在一个集群上，通过在集群间维护一个数据树，使得连接到集群的client能够获得统一的数据信息，比如系统公共配置信息、节点存活状态等等。因此，在互联网公司中，zookeeper被广泛运用于统一配置管理、名字服务、分布式同步等。</p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>我们看下这样一种场景：<br>前台系统每时每刻都生成大量数据，这些原生数据由后台系统处理完毕后再作他用，我们暂且不谈这些数据的存储形式，只关注如何能够尽可能高效的处理。举个例子，前台系统可能是微博的前端发布系统、搜索引擎上的广告投放系统，或者是任务发布系统，后台系统则可能是对微博和广告信息的审查系统，比如用户发的微博如果包含近期敏感信息则不予显示，若是任务，后台系统则负责处理任务具体的执行。<br>若数据量和任务量较小，单节点的后台系统或许可以处理得过来，但是如果数据量和任务量很大（比如新浪微博，龙年正月初一0点0分0秒，共有32312条微博同时发布），单节点的后台系统肯定吃不消，这时候，可想而知的是多节点同时处理前台过来的数据。<br>最简单的方法是，按消息id对后台节点数取模（msgid%server_num=mod），每个后台节点取自己那份数据进行处理，这就需要每个节点都知晓当前有多少个后台节点以及本节点所应取的mod数。但是，当某个节点宕机时，这个节点所应处理的数据无法被继续处理了，势必会造成阻塞，除非重新配置各节点上的参数，将节点数server_num减1，并修改各节点取数据的mod数。<br>毋庸置疑，这样非常麻烦！如果能够将这种配置信息（实际上是数据在节点间分配的控制信息）统一管理起来，在配置信息发生变化时，各个后台节点能够及时知晓其变化，就可以避免上述情况的发生。<br>因此，采用多节点处理数据时，有两个问题：<br>1.避免多个节点重复处理同一条数据，否则造成资源浪费。<br>2.不能有数据被遗漏处理，尤其是在有后台节点down掉的时候。<br>也就是说，采用多节点同时处理数据时，需要将数据隔离开，分别给不同的节点处理，而且在有节点宕机的情况下，所有数据也必须可以无误的被其他可用节点处理。如何做到这一点呢，使用zookeeper吧！<br>","more":"</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>我们通过zookeeper维护一个目录（比如/app/config），服务器启动时连接zookeeper集群并在该目录下创建表示自己的临时节点（CreateMode.EPHEMERAL），相当于注册一个节点，节点名可以是本服务器的ip，节点的值为该服务器的mod值，按注册顺序从0递增，即第一个注册的节点值为0，第二个为1，依次下去，因此/app/config的子节点数就是注册到zookeeper的服务器数。同时，各服务器监听/app/config目录，当其发生变化（新加入子节点、子节点失效等）时，每个服务器都将获取到这个事件并进行相应的处理。  </p>\n<h2 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h2><p>下面针对以上场景给出一个示例demo。<br><strong>Server类</strong>：服务器<br><strong>ClientThread类</strong>：服务器上的单个线程<br><strong>NodeStateWatcher类</strong>：服务器监听zookeeper集群的监听器<br><strong>ZkOperationImpl类</strong>：zookeeper的操作封装（实现ZkOperation接口）<br>Server.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Server</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> ClientThread[] clients = <span class=\"keyword\">new</span> ClientThread[Constant.THREAD_COUNT]; <span class=\"comment\">// 数据处理线程</span></div><div class=\"line\"> <span class=\"keyword\">private</span> ZkOperation operationCient = <span class=\"keyword\">null</span>; <span class=\"comment\">// 与zookeeper的连接</span></div><div class=\"line\"> <span class=\"keyword\">private</span> Watcher nodeWatcher = <span class=\"keyword\">null</span>;  <span class=\"comment\">// 向zookeeper注册的监听器</span></div><div class=\"line\"> <span class=\"keyword\">private</span> String name; <span class=\"comment\">// 服务器名</span></div><div class=\"line\"> <span class=\"keyword\">private</span> String ip; <span class=\"comment\">// 服务器ip</span></div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Server</span><span class=\"params\">(String name, String ip)</span> <span class=\"keyword\">throws</span> IOException, KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">  <span class=\"keyword\">this</span>.ip = ip;</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationCient = <span class=\"keyword\">new</span> ZkOperationImpl();</div><div class=\"line\">  <span class=\"keyword\">this</span>.nodeWatcher = <span class=\"keyword\">new</span> NodeStateWatcher(<span class=\"keyword\">this</span>);</div><div class=\"line\">  <span class=\"keyword\">this</span>.operationCient.init(Constant.ZK_ADDRESS, nodeWatcher);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;Constant.THREAD_COUNT; ++i)</div><div class=\"line\">  &#123;</div><div class=\"line\">   ClientThread c = <span class=\"keyword\">new</span> ClientThread(i, ip, name);</div><div class=\"line\">   <span class=\"keyword\">this</span>.clients[i]= c;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  initialize();</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 向zookeeper集群注册</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">registerServer</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  List&lt;String&gt; children = operationCient.getChilds(Constant.ROOT_PATH);</div><div class=\"line\">  <span class=\"keyword\">int</span> max = -<span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">for</span> (String childName : children)</div><div class=\"line\">  &#123;</div><div class=\"line\">   String childPath = Constant.ROOT_PATH + <span class=\"string\">\"/\"</span> + childName;</div><div class=\"line\">   <span class=\"keyword\">int</span> mod = Integer.parseInt(operationCient.getData(childPath));</div><div class=\"line\">   <span class=\"keyword\">if</span> (mod &gt; max)</div><div class=\"line\">    max = mod;</div><div class=\"line\">  &#125;</div><div class=\"line\">  String path = Constant.ROOT_PATH + <span class=\"string\">\"/\"</span> + ip;</div><div class=\"line\">  operationCient.apendTempNode(path, String.valueOf(max&lt;<span class=\"number\">0</span> ? <span class=\"number\">0</span> : ++max));</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 启动数据处理线程</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> Exception</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span> (ClientThread c : clients)</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"Start thread-\"</span> + c);</div><div class=\"line\">   c.start();</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 服务器初始化</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initialize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\" initializing...\"</span>);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 配置信息的上级目录不存在</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (!operationCient.exist(Constant.ROOT_PATH))</div><div class=\"line\">  &#123;</div><div class=\"line\">   System.err.println(<span class=\"string\">\"Root path \"</span> + Constant.ROOT_PATH + <span class=\"string\">\"does not exist!!! Create root path...\"</span>);</div><div class=\"line\">   operationCient.apendPresistentNode(Constant.ROOT_PATH, <span class=\"string\">\"1\"</span>);</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"Create root path \"</span> + Constant.ROOT_PATH + <span class=\"string\">\" successfully!\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  registerServer();</div><div class=\"line\"> </div><div class=\"line\">  refreshConfig();</div><div class=\"line\"> </div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\" finish initializing...\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * watch到节点变化后，刷新节点数和模数</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\":freshing...\"</span>);</div><div class=\"line\"> </div><div class=\"line\">  refreshConfig();</div><div class=\"line\"> </div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\":end freshing...\"</span>);</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"================\"</span>);</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">refreshConfig</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  String version = operationCient.getData(Constant.ROOT_PATH);</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"SYSTEM VERSION: \"</span> + version);</div><div class=\"line\">  List&lt;String&gt; children = operationCient.getChilds(Constant.ROOT_PATH);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 1. 服务器数量为子节点的个数</span></div><div class=\"line\">  <span class=\"keyword\">int</span> nodeCount = children.size();</div><div class=\"line\">  CommonUtil.log(<span class=\"string\">\"Server count:\"</span> + nodeCount);</div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (CommonUtil.BASE)</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.BASE = nodeCount * Constant.THREAD_COUNT;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">if</span> (CommonUtil.BASE.intValue() == <span class=\"number\">0</span>)</div><div class=\"line\">   <span class=\"keyword\">return</span>;</div><div class=\"line\"> </div><div class=\"line\">  Integer mod = <span class=\"keyword\">null</span>;</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">for</span> (String childName : children)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"comment\">// 2. 获取本服务器的模数</span></div><div class=\"line\">   <span class=\"keyword\">if</span> (childName.equals(ip))</div><div class=\"line\">   &#123;</div><div class=\"line\">    String childPath = Constant.ROOT_PATH + <span class=\"string\">\"/\"</span> + childName;</div><div class=\"line\">    mod = Integer.parseInt(operationCient.getData(childPath));</div><div class=\"line\">    <span class=\"keyword\">break</span>;</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 3. 刷新数据处理线程的取模数</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (mod == <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   System.err.println(<span class=\"string\">\"Did not get the mod number for \"</span> + <span class=\"keyword\">this</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span></div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\", mod=\"</span> + mod + <span class=\"string\">\",base=\"</span> + CommonUtil.BASE);</div><div class=\"line\">   <span class=\"keyword\">for</span> (ClientThread c : clients)</div><div class=\"line\">   &#123;</div><div class=\"line\">    c.refresh(mod);</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name + <span class=\"string\">\"@\"</span> + <span class=\"keyword\">this</span>.ip + <span class=\"string\">\"\"</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">public</span> ClientThread[] getClients()</div><div class=\"line\"> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> clients;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> ZkOperation <span class=\"title\">getOperationCient</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> operationCient;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Watcher <span class=\"title\">getNodeWatcher</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> nodeWatcher;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getIp</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> ip;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ClientThread.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClientThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"keyword\">private</span> Integer modNum = -<span class=\"number\">1</span>;</div><div class=\"line\"> <span class=\"keyword\">private</span> Integer threadId;</div><div class=\"line\"> <span class=\"keyword\">private</span> String ip;</div><div class=\"line\"> <span class=\"keyword\">private</span> String clientName;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ClientThread</span><span class=\"params\">(Integer threadId, String ip, String clientName)</span> <span class=\"keyword\">throws</span> IOException, KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.threadId = threadId;</div><div class=\"line\">  <span class=\"keyword\">this</span>.ip = ip;</div><div class=\"line\">  <span class=\"keyword\">this</span>.clientName = clientName;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * watch到节点变化后，调用刷新节点数和模数</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> InterruptedException</div><div class=\"line\">  * <span class=\"doctag\">@throws</span> KeeperException</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">refresh</span><span class=\"params\">(<span class=\"keyword\">int</span> mod)</span> <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(\"================\");</span></div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(this + \":freshing...\");</span></div><div class=\"line\"> </div><div class=\"line\">  <span class=\"keyword\">synchronized</span> (<span class=\"keyword\">this</span>.modNum)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"keyword\">this</span>.modNum = threadId + mod * Constant.THREAD_COUNT;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  CommonUtil.log(<span class=\"keyword\">this</span> + <span class=\"string\">\":\"</span> + modNum + <span class=\"string\">\"/\"</span> + CommonUtil.BASE);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(this + \":end freshing...\");</span></div><div class=\"line\"><span class=\"comment\">//  CommonUtil.log(\"================\");</span></div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">long</span> start = System.currentTimeMillis();</div><div class=\"line\">  <span class=\"keyword\">while</span> (System.currentTimeMillis() - start &lt; Constant.DURATION)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"comment\">// 处理数据</span></div><div class=\"line\">   processData();</div><div class=\"line\">   <span class=\"keyword\">try</span></div><div class=\"line\">   &#123;</div><div class=\"line\">    Thread.sleep(<span class=\"number\">5000</span>); <span class=\"comment\">//等待2秒</span></div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">   &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"comment\">/**</div><div class=\"line\">  * 模拟处理数据逻辑：打印属于本线程的数据</div><div class=\"line\">  */</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processData</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (CommonUtil.BASE.equals(<span class=\"number\">0</span>) || modNum.equals(-<span class=\"number\">1</span>))</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.err(<span class=\"keyword\">this</span> + <span class=\"string\">\": did not get server_count and modNum!!!\"</span>);</div><div class=\"line\">   <span class=\"keyword\">return</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  StringBuilder sb = <span class=\"keyword\">new</span> StringBuilder(<span class=\"keyword\">this</span> + <span class=\"string\">\"-\"</span> + modNum + <span class=\"string\">\"/\"</span> + CommonUtil.BASE + <span class=\"string\">\":\"</span>);</div><div class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;Constant.NUMBERS.length; ++i)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"keyword\">int</span> n = Constant.NUMBERS[i];</div><div class=\"line\">   <span class=\"keyword\">if</span> (n % CommonUtil.BASE == modNum)</div><div class=\"line\">   &#123;</div><div class=\"line\">    sb.append(n).append(<span class=\"string\">\" \"</span>);</div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  CommonUtil.log(sb.toString());</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">\"ClientThread_\"</span> + <span class=\"keyword\">this</span>.clientName + <span class=\"string\">\"@\"</span> + <span class=\"keyword\">this</span>.ip + <span class=\"string\">\"-thread_\"</span> + <span class=\"keyword\">this</span>.threadId;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getModNum</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> modNum;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">setModNum</span><span class=\"params\">(Integer modNum)</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.modNum = modNum;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getClientName</span><span class=\"params\">()</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> clientName;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>NodeStateWatcher.java<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NodeStateWatcher</span> <span class=\"keyword\">implements</span> <span class=\"title\">Watcher</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"> <span class=\"keyword\">private</span> Server server;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NodeStateWatcher</span><span class=\"params\">(Server server)</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.server = server;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(WatchedEvent event)</span></div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  StringBuilder outputStr = <span class=\"keyword\">new</span> StringBuilder();</div><div class=\"line\">  <span class=\"keyword\">if</span> (server.getName() != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   outputStr.append(server.getName() + <span class=\"string\">\" get an event.\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  outputStr.append(<span class=\"string\">\"Path:\"</span> + event.getPath());</div><div class=\"line\">  outputStr.append(<span class=\"string\">\",state:\"</span> + event.getState());</div><div class=\"line\">  outputStr.append(<span class=\"string\">\",type:\"</span> + event.getType());</div><div class=\"line\">  CommonUtil.log(outputStr.toString());</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 发现子节点有变化</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (event.getType() == EventType.NodeChildrenChanged</div><div class=\"line\">    || event.getType() == EventType.NodeDataChanged</div><div class=\"line\">    || event.getType() == EventType.NodeDeleted)</div><div class=\"line\">  &#123;</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"In event: \"</span> + event.getType());</div><div class=\"line\">   <span class=\"keyword\">try</span></div><div class=\"line\">   &#123;</div><div class=\"line\">    server.refresh();</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">catch</span> (KeeperException e)</div><div class=\"line\">   &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\">   <span class=\"keyword\">catch</span> (InterruptedException e)</div><div class=\"line\">   &#123;</div><div class=\"line\">    e.printStackTrace();</div><div class=\"line\">   &#125;</div><div class=\"line\">   CommonUtil.log(<span class=\"string\">\"End event: \"</span> + event.getType());</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>ZkOperationImpl.java 部分zk操作代码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apendPresistentNode</span><span class=\"params\">(String path, String data)</span></div><div class=\"line\">   <span class=\"keyword\">throws</span> KeeperException, InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (zk != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   zk.create(path, data.getBytes(), Ids.OPEN_ACL_UNSAFE,</div><div class=\"line\">     CreateMode.PERSISTENT);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">delNode</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> KeeperException,</div><div class=\"line\">   InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (zk != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   zk.delete(path, -<span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"> &#125;</div><div class=\"line\"> </div><div class=\"line\"> <span class=\"meta\">@Override</span></div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">exist</span><span class=\"params\">(String path)</span> <span class=\"keyword\">throws</span> KeeperException,</div><div class=\"line\">   InterruptedException</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (zk != <span class=\"keyword\">null</span>)</div><div class=\"line\">  &#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> zk.exists(path, <span class=\"keyword\">true</span>) != <span class=\"keyword\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Main.java：主类，启动demo</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception</div><div class=\"line\"> </span>&#123;</div><div class=\"line\">  Server c1 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"ServerA\"</span>, <span class=\"string\">\"1.1.1.1\"</span>);</div><div class=\"line\">  Server c2 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"ServerB\"</span>, <span class=\"string\">\"1.1.1.2\"</span>);</div><div class=\"line\">  Server c3 = <span class=\"keyword\">new</span> Server(<span class=\"string\">\"ServerC\"</span>, <span class=\"string\">\"1.1.1.3\"</span>);</div><div class=\"line\"> </div><div class=\"line\">  c1.start();</div><div class=\"line\">  c2.start();</div><div class=\"line\">  c3.start();</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>由于Server的3个实例在同一台机器上运行，连接到zookeeper时，用的是一个session，所以demo中没有通过程序断开server与zookeeper的连接，如果serverA断开，那么serverB和serverC与zookeeper的session连接也会失效，达不到演示效果，所以我们只能暂时在zookeeper客户端手工更改zookeeper上的配置信息，用于模拟server与zookeeper集群断开连接和增加server的情形。server启动后，会先向zookeeper注册节点，因此我们先手工删除节点，再手工添加节点。<br>手工执行的命令如下：  </p>\n<blockquote>\n<p>[zk: localhost:2181(CONNECTED) 141] delete /demo/1.1.1.3<br>[zk: localhost:2181(CONNECTED) 142] delete /demo/1.1.1.2<br>[zk: localhost:2181(CONNECTED) 143] delete /demo/1.1.1.1<br>[zk: localhost:2181(CONNECTED) 144] create -e /demo/1.1.1.1 0<br>[zk: localhost:2181(CONNECTED) 145] create -e /demo/1.1.1.2 1<br>[zk: localhost:2181(CONNECTED) 146] create -e /demo/1.1.1.3 2  </p>\n</blockquote>\n<p>可以通过程序打印信息发现，在节点配置信息每个服务器(Server)上的线程会动态的获取属于自己的数据并打印。当然，这里对数据的处理逻辑很简单，仅仅是打印出来，处理的数据也只是内存中的一个数组，对于类似这样的但是更复杂的应用场景，zookeeper同样适用，但是需要更多的考虑服务器与zookeeper集群连接的可靠性（比如session超时重连）、权限机制等等。<br>上面的demo程序打印信息如下：  </p>\n<blockquote>\n<p>[2012-11-14 15:18:42] New zk connection session: 0<br>[2012-11-14 15:18:42] ================<br>[2012-11-14 15:18:42] ServerA@1.1.1.1 initializing…<br>[2012-11-14 15:18:47] Thread-0 get an event.Path:null,state:SyncConnected,type:None<br>[2012-11-14 15:18:47] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:47] In event: NodeChildrenChanged<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:18:47] SYSTEM VERSION: 1<br>[2012-11-14 15:18:47] SYSTEM VERSION: 1<br>[2012-11-14 15:18:47] Server count:1<br>[2012-11-14 15:18:47] Server count:1<br>[2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5<br>[2012-11-14 15:18:47] ServerA@1.1.1.1 finish initializing…<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] ServerA@1.1.1.1, mod=0,base=5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_0:0/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_1:1/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_2:2/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_3:3/5<br>[2012-11-14 15:18:47] ClientThread_ServerA@1.1.1.1-thread_4:4/5<br>[2012-11-14 15:18:47] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] End event: NodeChildrenChanged<br>[2012-11-14 15:18:47] New zk connection session: 0<br>[2012-11-14 15:18:47] ================<br>[2012-11-14 15:18:47] ServerB@1.1.1.2 initializing…<br>[2012-11-14 15:18:51] Thread-6 get an event.Path:null,state:SyncConnected,type:None<br>[2012-11-14 15:18:51] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:51] In event: NodeChildrenChanged<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:18:51] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:51] In event: NodeChildrenChanged<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:18:51] SYSTEM VERSION: 1<br>[2012-11-14 15:18:51] SYSTEM VERSION: 1<br>[2012-11-14 15:18:51] Server count:2<br>[2012-11-14 15:18:51] SYSTEM VERSION: 1<br>[2012-11-14 15:18:51] ServerA@1.1.1.1, mod=0,base=10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_0:0/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_1:1/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_2:2/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_3:3/10<br>[2012-11-14 15:18:51] ClientThread_ServerA@1.1.1.1-thread_4:4/10<br>[2012-11-14 15:18:51] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:18:51] Server count:2<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] End event: NodeChildrenChanged<br>[2012-11-14 15:18:51] Server count:2<br>[2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:18:51] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] End event: NodeChildrenChanged<br>[2012-11-14 15:18:51] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:18:51] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:18:51] ServerB@1.1.1.2 finish initializing…<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] New zk connection session: 0<br>[2012-11-14 15:18:51] ================<br>[2012-11-14 15:18:51] ServerC@1.1.1.3 initializing…<br>[2012-11-14 15:18:56] Thread-12 get an event.Path:null,state:SyncConnected,type:None<br>[2012-11-14 15:18:56] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:56] In event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:18:56] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:56] In event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:18:56] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:18:56] In event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ServerA@1.1.1.1, mod=0,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0:0/15<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1:1/15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2:2/15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3:3/15<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4:4/15<br>[2012-11-14 15:18:56] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] End event: NodeChildrenChanged<br>[2012-11-14 15:18:56] SYSTEM VERSION: 1<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ServerB@1.1.1.2, mod=1,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0:5/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1:6/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2:7/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3:8/15<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4:9/15<br>[2012-11-14 15:18:56] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] End event: NodeChildrenChanged<br>[2012-11-14 15:18:56] Server count:3<br>[2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15<br>[2012-11-14 15:18:56] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] End event: NodeChildrenChanged<br>[2012-11-14 15:18:56] ServerC@1.1.1.3, mod=2,base=15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0:10/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1:11/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2:12/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3:13/15<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4:14/15<br>[2012-11-14 15:18:56] ServerC@1.1.1.3 finish initializing…<br>[2012-11-14 15:18:56] ================<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_0<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_0<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_0<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_1<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_1<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_2<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_3<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerA@1.1.1.1-thread_4<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_2<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_3<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_1<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerB@1.1.1.2-thread_4<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:18:56] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_2<br>[2012-11-14 15:18:56] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_3<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:18:56] Start thread-ClientThread_ServerC@1.1.1.3-thread_4<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28<br>[2012-11-14 15:18:56] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:19:01] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:19:01] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28<br>[2012-11-14 15:19:01] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:02] Thread-0 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:02] In event: NodeDeleted<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:02] Thread-12 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:02] In event: NodeDeleted<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:02] Thread-6 get an event.Path:/demo/1.1.1.1,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:02] In event: NodeDeleted<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] Server count:2<br>Did not get the mod number for ServerA@1.1.1.1<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeDeleted<br>[2012-11-14 15:19:02] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:02] In event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeDeleted<br>[2012-11-14 15:19:02] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:02] In event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeDeleted<br>[2012-11-14 15:19:02] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:02] In event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeChildrenChanged<br>Did not get the mod number for ServerA@1.1.1.1<br>[2012-11-14 15:19:02] SYSTEM VERSION: 1<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] Server count:2<br>[2012-11-14 15:19:02] ServerC@1.1.1.3, mod=2,base=10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_0:10/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_1:11/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_2:12/10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_3:13/10<br>[2012-11-14 15:19:02] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:19:02] ClientThread_ServerC@1.1.1.3-thread_4:14/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:19:02] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeChildrenChanged<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:19:02] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:19:02] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:02] ================<br>[2012-11-14 15:19:02] End event: NodeChildrenChanged<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_0-10/10:<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30<br>[2012-11-14 15:19:06] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_1-11/10:<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_2-12/10:<br>[2012-11-14 15:19:06] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_3-13/10:<br>[2012-11-14 15:19:06] ClientThread_ServerC@1.1.1.3-thread_4-14/10:<br>[2012-11-14 15:19:07] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:07] In event: NodeChildrenChanged<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:07] Thread-12 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:07] In event: NodeDeleted<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:07] Thread-6 get an event.Path:/demo/1.1.1.2,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:07] In event: NodeDeleted<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>Did not get the mod number for ServerA@1.1.1.1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeChildrenChanged<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeDeleted<br>[2012-11-14 15:19:07] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:07] In event: NodeChildrenChanged<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:freshing…<br>Did not get the mod number for ServerB@1.1.1.2<br>[2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeDeleted<br>[2012-11-14 15:19:07] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:07] In event: NodeChildrenChanged<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>Did not get the mod number for ServerB@1.1.1.2<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeChildrenChanged<br>[2012-11-14 15:19:07] SYSTEM VERSION: 1<br>[2012-11-14 15:19:07] Server count:1<br>[2012-11-14 15:19:07] ServerC@1.1.1.3, mod=2,base=5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_0:10/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_1:11/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_2:12/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_3:13/5<br>[2012-11-14 15:19:07] ClientThread_ServerC@1.1.1.3-thread_4:14/5<br>[2012-11-14 15:19:07] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:07] ================<br>[2012-11-14 15:19:07] End event: NodeChildrenChanged<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_1-6/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_0-10/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_0-5/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_1-11/5:<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_3-8/5:<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_2-7/5:<br>[2012-11-14 15:19:11] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29<br>[2012-11-14 15:19:11] ClientThread_ServerB@1.1.1.2-thread_4-9/5:<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_2-12/5:<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_4-14/5:<br>[2012-11-14 15:19:11] ClientThread_ServerC@1.1.1.3-thread_3-13/5:<br>[2012-11-14 15:19:12] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:12] In event: NodeChildrenChanged<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:12] Thread-12 get an event.Path:/demo/1.1.1.3,state:SyncConnected,type:NodeDeleted<br>[2012-11-14 15:19:12] In event: NodeDeleted<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:12] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:12] In event: NodeChildrenChanged<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeChildrenChanged<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeChildrenChanged<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeDeleted<br>[2012-11-14 15:19:12] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:12] In event: NodeChildrenChanged<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:12] SYSTEM VERSION: 1<br>[2012-11-14 15:19:12] Server count:0<br>[2012-11-14 15:19:12] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:12] ================<br>[2012-11-14 15:19:12] End event: NodeChildrenChanged<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_1: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_2: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_0: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_1: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_0: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_3: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_0: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerA@1.1.1.1-thread_4: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_3: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_1: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_2: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerB@1.1.1.2-thread_4: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_2: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_3: did not get server_count and modNum!!!<br>[2012-11-14 15:19:16] ClientThread_ServerC@1.1.1.3-thread_4: did not get server_count and modNum!!!<br>[2012-11-14 15:19:20] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:20] In event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:20] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:20] In event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:20] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:20] In event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:20] SYSTEM VERSION: 1<br>[2012-11-14 15:19:20] SYSTEM VERSION: 1<br>[2012-11-14 15:19:20] SYSTEM VERSION: 1<br>[2012-11-14 15:19:20] Server count:1<br>Did not get the mod number for ServerC@1.1.1.3<br>[2012-11-14 15:19:20] Server count:1<br>[2012-11-14 15:19:20] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] End event: NodeChildrenChanged<br>[2012-11-14 15:19:20] ServerA@1.1.1.1, mod=0,base=5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_0:0/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_1:1/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_2:2/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_3:3/5<br>[2012-11-14 15:19:20] ClientThread_ServerA@1.1.1.1-thread_4:4/5<br>[2012-11-14 15:19:20] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] End event: NodeChildrenChanged<br>Did not get the mod number for ServerB@1.1.1.2<br>[2012-11-14 15:19:20] Server count:1<br>[2012-11-14 15:19:20] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:20] ================<br>[2012-11-14 15:19:20] End event: NodeChildrenChanged<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_1-6/5:<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_0-0/5:5 10 15 20 25 30<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_2-2/5:2 7 12 17 22 27<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_1-1/5:1 6 11 16 21 26<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_3-3/5:3 8 13 18 23 28<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_0-10/5:<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_0-5/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_1-11/5:<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_3-8/5:<br>[2012-11-14 15:19:21] ClientThread_ServerA@1.1.1.1-thread_4-4/5:4 9 14 19 24 29<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_2-7/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_2-12/5:<br>[2012-11-14 15:19:21] ClientThread_ServerB@1.1.1.2-thread_4-9/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_4-14/5:<br>[2012-11-14 15:19:21] ClientThread_ServerC@1.1.1.3-thread_3-13/5:<br>[2012-11-14 15:19:25] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:25] In event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:25] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:25] In event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:25] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:25] In event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:25] SYSTEM VERSION: 1<br>[2012-11-14 15:19:25] SYSTEM VERSION: 1<br>[2012-11-14 15:19:25] SYSTEM VERSION: 1<br>[2012-11-14 15:19:25] Server count:2<br>[2012-11-14 15:19:25] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:25] ================<br>Did not get the mod number for ServerC@1.1.1.3<br>[2012-11-14 15:19:25] End event: NodeChildrenChanged<br>[2012-11-14 15:19:25] Server count:2<br>[2012-11-14 15:19:25] Server count:2<br>[2012-11-14 15:19:25] ServerB@1.1.1.2, mod=1,base=10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_0:5/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_1:6/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_2:7/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_3:8/10<br>[2012-11-14 15:19:25] ClientThread_ServerB@1.1.1.2-thread_4:9/10<br>[2012-11-14 15:19:25] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] End event: NodeChildrenChanged<br>[2012-11-14 15:19:25] ServerA@1.1.1.1, mod=0,base=10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_0:0/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_1:1/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_2:2/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_3:3/10<br>[2012-11-14 15:19:25] ClientThread_ServerA@1.1.1.1-thread_4:4/10<br>[2012-11-14 15:19:25] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:25] ================<br>[2012-11-14 15:19:25] End event: NodeChildrenChanged<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_0-10/10:<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26<br>[2012-11-14 15:19:26] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_1-11/10:<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27<br>[2012-11-14 15:19:26] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_2-12/10:<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_4-14/10:<br>[2012-11-14 15:19:26] ClientThread_ServerC@1.1.1.3-thread_3-13/10:<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1-1/10:1 11 21<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0-0/10:10 20 30<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0-5/10:5 15 25<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0-10/10:<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2-2/10:2 12 22<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3-3/10:3 13 23<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1-6/10:6 16 26<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1-11/10:<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4-4/10:4 14 24<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3-8/10:8 18 28<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2-7/10:7 17 27<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4-9/10:9 19 29<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2-12/10:<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3-13/10:<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4-14/10:<br>[2012-11-14 15:19:31] Thread-0 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:31] In event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] ServerA@1.1.1.1:freshing…<br>[2012-11-14 15:19:31] Thread-12 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:31] In event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] ServerC@1.1.1.3:freshing…<br>[2012-11-14 15:19:31] Thread-6 get an event.Path:/demo,state:SyncConnected,type:NodeChildrenChanged<br>[2012-11-14 15:19:31] In event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] ServerB@1.1.1.2:freshing…<br>[2012-11-14 15:19:31] SYSTEM VERSION: 1<br>[2012-11-14 15:19:31] SYSTEM VERSION: 1<br>[2012-11-14 15:19:31] SYSTEM VERSION: 1<br>[2012-11-14 15:19:31] Server count:3<br>[2012-11-14 15:19:31] Server count:3<br>[2012-11-14 15:19:31] ServerA@1.1.1.1, mod=0,base=15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_0:0/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_1:1/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_2:2/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_3:3/15<br>[2012-11-14 15:19:31] ClientThread_ServerA@1.1.1.1-thread_4:4/15<br>[2012-11-14 15:19:31] ServerA@1.1.1.1:end freshing…<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] End event: NodeChildrenChanged<br>[2012-11-14 15:19:31] Server count:3<br>[2012-11-14 15:19:31] ServerC@1.1.1.3, mod=2,base=15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_0:10/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_1:11/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_2:12/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_3:13/15<br>[2012-11-14 15:19:31] ClientThread_ServerC@1.1.1.3-thread_4:14/15<br>[2012-11-14 15:19:31] ServerC@1.1.1.3:end freshing…<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] End event: NodeChildrenChanged<br>[2012-11-14 15:19:31] ServerB@1.1.1.2, mod=1,base=15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_0:5/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_1:6/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_2:7/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_3:8/15<br>[2012-11-14 15:19:31] ClientThread_ServerB@1.1.1.2-thread_4:9/15<br>[2012-11-14 15:19:31] ServerB@1.1.1.2:end freshing…<br>[2012-11-14 15:19:31] ================<br>[2012-11-14 15:19:31] End event: NodeChildrenChanged<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:19:36] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:19:36] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:36] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_0-10/15:10 25<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_0-0/15:15 30<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_1-6/15:6 21<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_3-3/15:3 18<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_0-5/15:5 20<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_1-1/15:1 16<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_2-2/15:2 17<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_3-8/15:8 23<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_2-7/15:7 22<br>[2012-11-14 15:19:41] ClientThread_ServerA@1.1.1.1-thread_4-4/15:4 19<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_1-11/15:11 26<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_2-12/15:12 27<br>[2012-11-14 15:19:41] ClientThread_ServerB@1.1.1.2-thread_4-9/15:9 24<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_4-14/15:14 29<br>[2012-11-14 15:19:41] ClientThread_ServerC@1.1.1.3-thread_3-13/15:13 28</p>\n</blockquote>"},{"title":"将Hadoop RPC框架应用于多节点任务调度","date":"2013-01-21T12:53:38.000Z","_content":"背景\n--\n在hadoop中，主从节点之间保持着心跳通信，用于传输节点状态信息、任务调度信息以及节点动作信息等等。 hdfs的namenode与datanode，mapreduce的jobtracker与tasktracker，hbase的hmaster与 regionserver之间的通信，都是基于hadoop RPC。Hadoop RPC是hadoop里非常基础的通信框架。hadoop 2.0以前hadoop RPC的数据序列化是通过实现自己定义的Writable接口实现，而从hadoop 2.0开始，数据的序列化工作交给了ProtocolBuffer去做。关于Hadoop RPC的实现原理已经有很多文章进行了详细的介绍（[源码级强力分析hadoop的RPC机制](http://weixiaolu.iteye.com/blog/1504898)，[Hadoop基于Protocol Buffer的RPC实现代码分析-Server端](http://yanbohappy.sinaapp.com/?p=110)，[带有HA功能的Hadoop Client端RPC实现原理与代码分析](http://yanbohappy.sinaapp.com/?p=115)），这里就不在赘述了。下面就直接引入问题和方案吧。  \n\n问题\n--\n工作中经常需要在定时任务系统上写一些定时任务，随着业务规模的增长和扩大，需要定时处理的任务越来越多，任务之间的执行间隔越来越小，某一时间段内（比如0点、整点或半点）执行的任务会越来越密集，只在一台机器上执行这些任务的话，会出现较大的风险：  \n* 任务并发度较高时，单机的系统资源将成为瓶颈  \n* 如果一个任务的运行占用了整个机器的大部分资源，比如sql查询耗费巨大内存和CPU资源，将直接影响其他任务的运行  \n* 任务失败后，如果仍然在同一台节点自动重新执行，失败率较高  \n* 机器宕机后，必须第一时间重启机器或重新部署定时任务系统，所有任务都不能按时执行  \n* 等等  \n\n方案\n--\n可想而知的是，可以通过将定时任务系统进行分布式改造，使用多个节点执行任务，将任务分发到不同节点上进行处理，并且完善失败重试机制，从而提高系统稳定性，实现任务系统的高可靠。  \n既然是在多个节点之间分发任务，肯定得有个任务的管理者(主节点)，在我们现有的系统中，也就是一套可以部署定时任务的web系统，任务代码更新后，部署好这套web系统，即可通过web页面设置定时任务并且进行调度(在单个节点上执行)。执行任务的节点(子节点)有多个以后，如何分发任务到子节点呢，我们可以把任务的信息封装成一个bean，通过RPC发布给子节点，子节点通过这个任务bean获得任务信息，并在指定的时刻执行任务。同时，子节点可以通过与主节点的心跳通信将节点状态和执行任务的情况告诉主节点。  \n这样其实就与hadoop mapreduce分发任务有点相似了，呵呵，这里主节点与子节点之间的通信，我们就可以通过Hadoop RPC框架来实现了，不同的是，我们分发的任务是定时任务，发布任务时需要将任务的定时信息一并发给子节点。  \n\n实现\n--\n单点的定时任务系统是基于Quartz的，在分布式环境下，可以继续基于Quartz进行改造，任务的定时信息可以通过Quartz中的JobDetail和Trigger对象来描述并封装，加上任务执行的入口类信息，再通过RPC由主节点发给子节点。子节点收到封装好的任务信息对象后，再构造JobDetail和Trigger，设置好启动时间后，通过入口类启动任务。下面是一个简单的demo。  \n<!--more-->\n以下是一个简单的定时任务信息描述对象CronJobInfo，包括JobDetailInfo和TriggerInfo两个属性：  \n```java\n/**\n* 定时任务信息，包括任务信息和触发器信息\n*/\npublic class CronJobInfo implements Writable\n{\n    private JobDetailInfo jobDetailInfo = new JobDetailInfo();\n    private TriggerInfo triggerInfo = new TriggerInfo();\n \n    @Override\n    public void readFields(DataInput in) throws IOException\n    {\n        jobDetailInfo.readFields(in);\n        triggerInfo.readFields(in);\n    }\n \n    @Override\n    public void write(DataOutput out) throws IOException\n    {\n        jobDetailInfo.write(out);\n        triggerInfo.write(out);\n    }\n    // getters and setters...\n}\n```  \n  \n  \n任务信息JobDetailInfo，由主节点构造，子节点解析构造JobDetail对象：  \n```java\npublic class JobDetailInfo implements Writable\n{\n    private String name; // 任务名称\n    private String group = Scheduler.DEFAULT_GROUP; // 任务组\n    private String description; // 任务描述\n    private Class jobClass; // 任务的启动类\n    private JobDataMap jobDataMap; // 任务所需的参数，用来给作业提供数据支持的数据结构\n    private boolean volatility = false; // <span>重启应用之后是否删除任务的相关信息,</span>\n    private boolean durability = false; // 任务完成之后是否依然保留到数据库\n    private boolean shouldRecover = false; // 应用重启之后时候忽略过期任务\n \n    @Override\n    public void readFields(DataInput in) throws IOException\n    {\n        name = WritableUtils.readString(in);\n        group = WritableUtils.readString(in);\n        description = WritableUtils.readString(in);\n        String className = WritableUtils.readString(in);\n        if (className != null)\n        {\n          try\n          {\n             jobClass = Class.forName(new String(className));\n          }\n          catch (ClassNotFoundException e)\n          {\n             e.printStackTrace();\n          }\n        }\n        int dataMapSize = WritableUtils.readVInt(in);\n        while (dataMapSize-- > 0)\n        {\n           String key = WritableUtils.readString(in);\n           String value = WritableUtils.readString(in);\n           jobDataMap.put(key, value);\n        }\n        volatility = in.readBoolean();\n        durability = in.readBoolean();\n        shouldRecover = in.readBoolean();\n    }\n \n    @Override\n    public void write(DataOutput out) throws IOException\n    {\n        WritableUtils.writeString(out, name);\n        WritableUtils.writeString(out, group);\n        WritableUtils.writeString(out, description);\n        WritableUtils.writeString(out, jobClass.getName());\n        if (jobDataMap == null)\n            WritableUtils.writeVInt(out, 0);\n        else\n        {\n            WritableUtils.writeVInt(out, jobDataMap.size());\n            for (Object k : jobDataMap.keySet())\n            {\n                WritableUtils.writeString(out, k.toString());\n                WritableUtils.writeString(out, jobDataMap.get(k).toString());\n            }\n        }\n        out.writeBoolean(volatility);\n        out.writeBoolean(durability);\n        out.writeBoolean(shouldRecover);\n   }\n   //getters and setters\n   //.....\n}\n```  \n  \n  \n任务触发器信息TriggerInfo ，由主节点构造，子节点解析构造Trigger对象：  \n```java\npublic class TriggerInfo implements Writable\n{\n    private String name; // trigger名称\n    private String group = Scheduler.DEFAULT_GROUP; // triger组名称\n    private String description; // trigger描述\n    private Date startTime; // 启动时间\n    private Date endTime; // 结束时间\n    private long repeatInterval; // 重试时间间隔\n    private int repeatCount; //重试次数\n \n    @Override\n    public void readFields(DataInput in) throws IOException\n    {\n       name = WritableUtils.readString(in);\n       group = WritableUtils.readString(in);\n       description = WritableUtils.readString(in);\n       long start = in.readLong();\n       startTime = start==0 ? null : new Date(start);\n       long end = in.readLong();\n       endTime = end==0 ? null : new Date(end);\n       repeatInterval = in.readLong();\n       repeatCount = in.readInt();\n    }\n \n    @Override\n    public void write(DataOutput out) throws IOException\n    {\n       WritableUtils.writeString(out, name);\n       WritableUtils.writeString(out, group);\n       WritableUtils.writeString(out, description);\n       out.writeLong(startTime == null ? 0 : startTime.getTime());\n       out.writeLong(endTime == null ? 0 : endTime.getTime());\n       out.writeLong(repeatInterval);\n       out.writeInt(repeatCount);\n    }\n    //getters and setters\n    //.....\n}\n```  \n  \n  \n主从节点通信的协议：  \n```java\npublic interface TaskProtocol extends VersionedProtocol\n{\n    public CronJobInfo hearbeat();\n}\n```  \n  \n在这个demo中，主节点启动后，启动RPC server线程，等待客户端（子节点）的连接，当客户端调用heartbeat方法时，主节点将会生成一个任务信息返回给客户端：  \n```java\npublic class TaskScheduler implements TaskProtocol\n{\n    private Logger logger = Logger.getLogger(getClass());\n    private Server server;\n \n    public TaskScheduler()\n    {\n        try\n        {\n            server = RPC.getServer(this, \"192.168.1.101\", 8888, new Configuration());\n            server.start();\n            server.join();\n        }\n        catch (UnknownHostException e)\n        {\n            e.printStackTrace();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n        catch (InterruptedException e)\n        {\n            e.printStackTrace();\n        }\n    }\n \n    @Override\n    public long getProtocolVersion(String arg0, long arg1) throws IOException\n    {\n        return 1;\n    }\n \n    @Override\n    public CronJobInfo generateCronJob()\n    {\n        // 1、创建JobDetial对象\n        JobDetailInfo detail = new JobDetailInfo();\n        // 设置工作项\n        detail.setJobClass(DemoTask.class);\n        detail.setName(\"MyJob_1\");\n        detail.setGroup(\"JobGroup_1\");\n \n        // 2、创建Trigger对象\n        TriggerInfo trigger = new TriggerInfo();\n        trigger.setName(\"Trigger_1\");\n        trigger.setGroup(\"Trigger_Group_1\");\n        trigger.setStartTime(new Date());\n        // 设置重复停止时间，并销毁该Trigger对象\n        Calendar c = Calendar.getInstance();\n        c.setTimeInMillis(System.currentTimeMillis() + 1000 * 1L);\n        trigger.setEndTime(c.getTime());\n        // 设置重复间隔时间\n        trigger.setRepeatInterval(1000 * 1L);\n        // 设置重复执行次数\n        trigger.setRepeatCount(3);\n \n        CronJobInfo info = new CronJobInfo();\n        info.setJobDetailInfo(detail);\n        info.setTriggerInfo(trigger);\n \n        return info;\n    }\n \n    public static void main(String[] args)\n    {\n        TaskScheduler ts = new TaskScheduler();\n    }\n \n}\n```  \n  \ndemo任务类，打印信息：  \n```java\npublic class DemoTask implements Job\n{\n    public void execute(JobExecutionContext context)\n            throws JobExecutionException\n    {\n        System.out.println(this + \": executing task @\" + new Date());\n    }\n} \n```  \n  \n子节点demo，启动后连接主节点，远程调用generateCronJob方法，获得一个任务描述信息，并启动定时任务。  \n```java\npublic class TaskRunner\n{\n    private Logger logger = Logger.getLogger(getClass());\n    private TaskProtocol proxy;\n \n    public TaskRunner()\n    {\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", 8888);\n        try\n        {\n            proxy = (TaskProtocol) RPC.waitForProxy(TaskProtocol.class, 1, addr,\n                    new Configuration());\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n \n    public void close()\n    {\n        RPC.stopProxy(proxy);\n    }\n \n    /**\n     * 从server获取一个定时任务\n     */\n    public void getCronJob()\n    {\n        CronJobInfo info = proxy.generateCronJob();\n        JobDetail jobDetail = getJobDetail(info.getJobDetailInfo());\n        SimpleTrigger trigger = getTrigger(info.getTriggerInfo());\n \n        // 创建Scheduler对象，并配置JobDetail和Trigger对象\n        SchedulerFactory sf = new StdSchedulerFactory();\n        Scheduler scheduler = null;\n        try\n        {\n            scheduler = sf.getScheduler();\n            scheduler.scheduleJob(jobDetail, trigger);\n            // 执行启动操作\n            scheduler.start();\n \n        }\n        catch (SchedulerException e)\n        {\n            e.printStackTrace();\n        }\n    }\n \n    /**\n     * @param jobDetailInfo\n     * @return\n     */\n    private JobDetail getJobDetail(JobDetailInfo info)\n    {\n        JobDetail detail = new JobDetail();\n        detail.setName(info.getName());\n        detail.setGroup(info.getGroup());\n        detail.setDescription(info.getDescription());\n        detail.setJobClass(info.getJobClass());\n        detail.setJobDataMap(info.getJobDataMap());\n        detail.setRequestsRecovery(info.isShouldRecover());\n        detail.setDurability(info.isDurability());\n        detail.setVolatility(info.isVolatility());\n        logger.info(\"client get jobdetail:\" + detail);\n        return detail;\n    }\n \n    /**\n     * @param triggerInfo\n     * @return\n     */\n    private SimpleTrigger getTrigger(TriggerInfo info)\n    {\n        SimpleTrigger trigger = new SimpleTrigger();\n        trigger.setName(info.getName());\n        trigger.setGroup(info.getGroup());\n        trigger.setDescription(info.getDescription());\n        trigger.setStartTime(info.getStartTime());\n        trigger.setEndTime(info.getEndTime());\n        trigger.setRepeatInterval(info.getRepeatInterval());\n        trigger.setRepeatCount(info.getRepeatCount());\n        logger.info(\"client get trigger:\" + trigger);\n        return trigger;\n    }\n \n    public static void main(String[] args)\n    {\n        TaskRunner t = new TaskRunner();\n        t.getCronJob();\n        t.close();\n    }\n}\n```  \n  \n先启动TaskScheduler，再启动TaskRunner，结果如下：  \n\n> TaskScheduler日志:\n> 2013-01-20 15:42:21,661 [Socket Reader #1 for port 8888] INFO  [org.apache.hadoop.ipc.Server] – Starting Socket Reader #1 for port 8888\n> 2013-01-20 15:42:21,662 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888\n> 2013-01-20 15:42:21,706 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcDetailedMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888\n> 2013-01-20 15:42:21,710 [IPC Server listener on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server listener on 8888: starting\n> 2013-01-20 15:42:21,711 [IPC Server Responder] INFO  [org.apache.hadoop.ipc.Server] – IPC Server Responder: starting\n> 2013-01-20 15:42:21,711 [IPC Server handler 0 on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server handler 0 on 8888: starting\n> 2013-01-20 15:42:24,084 [IPC Server handler 0 on 8888] INFO  [org.mh.rpc.task.TaskScheduler] – generate a task: org.mh.rpc.task.JobDetailInfo@1f26605\n> \n> TaskRunner:\n> 2013-01-20 15:42:26,323 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get jobdetail:JobDetail ‘JobGroup_1.MyJob_1′:  jobClass: ‘org.mh.rpc.quartz.GetSumTask isStateful: false isVolatile: false isDurable: false requestsRecovers: false\n> 2013-01-20 15:42:26,329 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get trigger:Trigger ‘Trigger_Group_1.Trigger_1′:  triggerClass: ‘org.quartz.SimpleTrigger isVolatile: false calendar: ‘null’ misfireInstruction: 0 nextFireTime: null\n> 2013-01-20 15:42:26,382 [main] INFO  [org.quartz.simpl.SimpleThreadPool] – Job execution threads will use class loader of thread: main\n> 2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.SchedulerSignalerImpl] – Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl\n> 2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.QuartzScheduler] – Quartz Scheduler v.1.6.5 created.\n> 2013-01-20 15:42:26,413 [main] INFO  [org.quartz.simpl.RAMJobStore] – RAMJobStore initialized.\n> 2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler ‘DefaultQuartzScheduler’ initialized from default resource file in Quartz package: ‘quartz.properties’\n> 2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler version: 1.6.5\n> 2013-01-20 15:42:26,415 [main] INFO  [org.quartz.core.QuartzScheduler] – Scheduler DefaultQuartzScheduler_$_NON_CLUSTERED started.\n> org.mh.rpc.quartz.DemoTask@1b66b06: executing task @Sun Jan 20 15:42:26 CST 2013\n\n上面是一个简单的demo，演示了如何通过RPC将任务调度给节点去执行，对于Quartz来说，任务的形式可以千变万化，关键就看怎么去使用了，分发到多个节点上执行的话，就还需要对任务的信息做更多的封装了。\n\n","source":"_posts/将Hadoop-RPC框架应用于多节点任务调度.md","raw":"---\ntitle: 将Hadoop RPC框架应用于多节点任务调度\ndate: 2013-01-21 20:53:38\ntags: \n- hadoop\n- RPC\n- 任务调度\n- 分布式应用\ncategories: \n- Hadoop\n---\n背景\n--\n在hadoop中，主从节点之间保持着心跳通信，用于传输节点状态信息、任务调度信息以及节点动作信息等等。 hdfs的namenode与datanode，mapreduce的jobtracker与tasktracker，hbase的hmaster与 regionserver之间的通信，都是基于hadoop RPC。Hadoop RPC是hadoop里非常基础的通信框架。hadoop 2.0以前hadoop RPC的数据序列化是通过实现自己定义的Writable接口实现，而从hadoop 2.0开始，数据的序列化工作交给了ProtocolBuffer去做。关于Hadoop RPC的实现原理已经有很多文章进行了详细的介绍（[源码级强力分析hadoop的RPC机制](http://weixiaolu.iteye.com/blog/1504898)，[Hadoop基于Protocol Buffer的RPC实现代码分析-Server端](http://yanbohappy.sinaapp.com/?p=110)，[带有HA功能的Hadoop Client端RPC实现原理与代码分析](http://yanbohappy.sinaapp.com/?p=115)），这里就不在赘述了。下面就直接引入问题和方案吧。  \n\n问题\n--\n工作中经常需要在定时任务系统上写一些定时任务，随着业务规模的增长和扩大，需要定时处理的任务越来越多，任务之间的执行间隔越来越小，某一时间段内（比如0点、整点或半点）执行的任务会越来越密集，只在一台机器上执行这些任务的话，会出现较大的风险：  \n* 任务并发度较高时，单机的系统资源将成为瓶颈  \n* 如果一个任务的运行占用了整个机器的大部分资源，比如sql查询耗费巨大内存和CPU资源，将直接影响其他任务的运行  \n* 任务失败后，如果仍然在同一台节点自动重新执行，失败率较高  \n* 机器宕机后，必须第一时间重启机器或重新部署定时任务系统，所有任务都不能按时执行  \n* 等等  \n\n方案\n--\n可想而知的是，可以通过将定时任务系统进行分布式改造，使用多个节点执行任务，将任务分发到不同节点上进行处理，并且完善失败重试机制，从而提高系统稳定性，实现任务系统的高可靠。  \n既然是在多个节点之间分发任务，肯定得有个任务的管理者(主节点)，在我们现有的系统中，也就是一套可以部署定时任务的web系统，任务代码更新后，部署好这套web系统，即可通过web页面设置定时任务并且进行调度(在单个节点上执行)。执行任务的节点(子节点)有多个以后，如何分发任务到子节点呢，我们可以把任务的信息封装成一个bean，通过RPC发布给子节点，子节点通过这个任务bean获得任务信息，并在指定的时刻执行任务。同时，子节点可以通过与主节点的心跳通信将节点状态和执行任务的情况告诉主节点。  \n这样其实就与hadoop mapreduce分发任务有点相似了，呵呵，这里主节点与子节点之间的通信，我们就可以通过Hadoop RPC框架来实现了，不同的是，我们分发的任务是定时任务，发布任务时需要将任务的定时信息一并发给子节点。  \n\n实现\n--\n单点的定时任务系统是基于Quartz的，在分布式环境下，可以继续基于Quartz进行改造，任务的定时信息可以通过Quartz中的JobDetail和Trigger对象来描述并封装，加上任务执行的入口类信息，再通过RPC由主节点发给子节点。子节点收到封装好的任务信息对象后，再构造JobDetail和Trigger，设置好启动时间后，通过入口类启动任务。下面是一个简单的demo。  \n<!--more-->\n以下是一个简单的定时任务信息描述对象CronJobInfo，包括JobDetailInfo和TriggerInfo两个属性：  \n```java\n/**\n* 定时任务信息，包括任务信息和触发器信息\n*/\npublic class CronJobInfo implements Writable\n{\n    private JobDetailInfo jobDetailInfo = new JobDetailInfo();\n    private TriggerInfo triggerInfo = new TriggerInfo();\n \n    @Override\n    public void readFields(DataInput in) throws IOException\n    {\n        jobDetailInfo.readFields(in);\n        triggerInfo.readFields(in);\n    }\n \n    @Override\n    public void write(DataOutput out) throws IOException\n    {\n        jobDetailInfo.write(out);\n        triggerInfo.write(out);\n    }\n    // getters and setters...\n}\n```  \n  \n  \n任务信息JobDetailInfo，由主节点构造，子节点解析构造JobDetail对象：  \n```java\npublic class JobDetailInfo implements Writable\n{\n    private String name; // 任务名称\n    private String group = Scheduler.DEFAULT_GROUP; // 任务组\n    private String description; // 任务描述\n    private Class jobClass; // 任务的启动类\n    private JobDataMap jobDataMap; // 任务所需的参数，用来给作业提供数据支持的数据结构\n    private boolean volatility = false; // <span>重启应用之后是否删除任务的相关信息,</span>\n    private boolean durability = false; // 任务完成之后是否依然保留到数据库\n    private boolean shouldRecover = false; // 应用重启之后时候忽略过期任务\n \n    @Override\n    public void readFields(DataInput in) throws IOException\n    {\n        name = WritableUtils.readString(in);\n        group = WritableUtils.readString(in);\n        description = WritableUtils.readString(in);\n        String className = WritableUtils.readString(in);\n        if (className != null)\n        {\n          try\n          {\n             jobClass = Class.forName(new String(className));\n          }\n          catch (ClassNotFoundException e)\n          {\n             e.printStackTrace();\n          }\n        }\n        int dataMapSize = WritableUtils.readVInt(in);\n        while (dataMapSize-- > 0)\n        {\n           String key = WritableUtils.readString(in);\n           String value = WritableUtils.readString(in);\n           jobDataMap.put(key, value);\n        }\n        volatility = in.readBoolean();\n        durability = in.readBoolean();\n        shouldRecover = in.readBoolean();\n    }\n \n    @Override\n    public void write(DataOutput out) throws IOException\n    {\n        WritableUtils.writeString(out, name);\n        WritableUtils.writeString(out, group);\n        WritableUtils.writeString(out, description);\n        WritableUtils.writeString(out, jobClass.getName());\n        if (jobDataMap == null)\n            WritableUtils.writeVInt(out, 0);\n        else\n        {\n            WritableUtils.writeVInt(out, jobDataMap.size());\n            for (Object k : jobDataMap.keySet())\n            {\n                WritableUtils.writeString(out, k.toString());\n                WritableUtils.writeString(out, jobDataMap.get(k).toString());\n            }\n        }\n        out.writeBoolean(volatility);\n        out.writeBoolean(durability);\n        out.writeBoolean(shouldRecover);\n   }\n   //getters and setters\n   //.....\n}\n```  \n  \n  \n任务触发器信息TriggerInfo ，由主节点构造，子节点解析构造Trigger对象：  \n```java\npublic class TriggerInfo implements Writable\n{\n    private String name; // trigger名称\n    private String group = Scheduler.DEFAULT_GROUP; // triger组名称\n    private String description; // trigger描述\n    private Date startTime; // 启动时间\n    private Date endTime; // 结束时间\n    private long repeatInterval; // 重试时间间隔\n    private int repeatCount; //重试次数\n \n    @Override\n    public void readFields(DataInput in) throws IOException\n    {\n       name = WritableUtils.readString(in);\n       group = WritableUtils.readString(in);\n       description = WritableUtils.readString(in);\n       long start = in.readLong();\n       startTime = start==0 ? null : new Date(start);\n       long end = in.readLong();\n       endTime = end==0 ? null : new Date(end);\n       repeatInterval = in.readLong();\n       repeatCount = in.readInt();\n    }\n \n    @Override\n    public void write(DataOutput out) throws IOException\n    {\n       WritableUtils.writeString(out, name);\n       WritableUtils.writeString(out, group);\n       WritableUtils.writeString(out, description);\n       out.writeLong(startTime == null ? 0 : startTime.getTime());\n       out.writeLong(endTime == null ? 0 : endTime.getTime());\n       out.writeLong(repeatInterval);\n       out.writeInt(repeatCount);\n    }\n    //getters and setters\n    //.....\n}\n```  \n  \n  \n主从节点通信的协议：  \n```java\npublic interface TaskProtocol extends VersionedProtocol\n{\n    public CronJobInfo hearbeat();\n}\n```  \n  \n在这个demo中，主节点启动后，启动RPC server线程，等待客户端（子节点）的连接，当客户端调用heartbeat方法时，主节点将会生成一个任务信息返回给客户端：  \n```java\npublic class TaskScheduler implements TaskProtocol\n{\n    private Logger logger = Logger.getLogger(getClass());\n    private Server server;\n \n    public TaskScheduler()\n    {\n        try\n        {\n            server = RPC.getServer(this, \"192.168.1.101\", 8888, new Configuration());\n            server.start();\n            server.join();\n        }\n        catch (UnknownHostException e)\n        {\n            e.printStackTrace();\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n        catch (InterruptedException e)\n        {\n            e.printStackTrace();\n        }\n    }\n \n    @Override\n    public long getProtocolVersion(String arg0, long arg1) throws IOException\n    {\n        return 1;\n    }\n \n    @Override\n    public CronJobInfo generateCronJob()\n    {\n        // 1、创建JobDetial对象\n        JobDetailInfo detail = new JobDetailInfo();\n        // 设置工作项\n        detail.setJobClass(DemoTask.class);\n        detail.setName(\"MyJob_1\");\n        detail.setGroup(\"JobGroup_1\");\n \n        // 2、创建Trigger对象\n        TriggerInfo trigger = new TriggerInfo();\n        trigger.setName(\"Trigger_1\");\n        trigger.setGroup(\"Trigger_Group_1\");\n        trigger.setStartTime(new Date());\n        // 设置重复停止时间，并销毁该Trigger对象\n        Calendar c = Calendar.getInstance();\n        c.setTimeInMillis(System.currentTimeMillis() + 1000 * 1L);\n        trigger.setEndTime(c.getTime());\n        // 设置重复间隔时间\n        trigger.setRepeatInterval(1000 * 1L);\n        // 设置重复执行次数\n        trigger.setRepeatCount(3);\n \n        CronJobInfo info = new CronJobInfo();\n        info.setJobDetailInfo(detail);\n        info.setTriggerInfo(trigger);\n \n        return info;\n    }\n \n    public static void main(String[] args)\n    {\n        TaskScheduler ts = new TaskScheduler();\n    }\n \n}\n```  \n  \ndemo任务类，打印信息：  \n```java\npublic class DemoTask implements Job\n{\n    public void execute(JobExecutionContext context)\n            throws JobExecutionException\n    {\n        System.out.println(this + \": executing task @\" + new Date());\n    }\n} \n```  \n  \n子节点demo，启动后连接主节点，远程调用generateCronJob方法，获得一个任务描述信息，并启动定时任务。  \n```java\npublic class TaskRunner\n{\n    private Logger logger = Logger.getLogger(getClass());\n    private TaskProtocol proxy;\n \n    public TaskRunner()\n    {\n        InetSocketAddress addr = new InetSocketAddress(\"localhost\", 8888);\n        try\n        {\n            proxy = (TaskProtocol) RPC.waitForProxy(TaskProtocol.class, 1, addr,\n                    new Configuration());\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n \n    public void close()\n    {\n        RPC.stopProxy(proxy);\n    }\n \n    /**\n     * 从server获取一个定时任务\n     */\n    public void getCronJob()\n    {\n        CronJobInfo info = proxy.generateCronJob();\n        JobDetail jobDetail = getJobDetail(info.getJobDetailInfo());\n        SimpleTrigger trigger = getTrigger(info.getTriggerInfo());\n \n        // 创建Scheduler对象，并配置JobDetail和Trigger对象\n        SchedulerFactory sf = new StdSchedulerFactory();\n        Scheduler scheduler = null;\n        try\n        {\n            scheduler = sf.getScheduler();\n            scheduler.scheduleJob(jobDetail, trigger);\n            // 执行启动操作\n            scheduler.start();\n \n        }\n        catch (SchedulerException e)\n        {\n            e.printStackTrace();\n        }\n    }\n \n    /**\n     * @param jobDetailInfo\n     * @return\n     */\n    private JobDetail getJobDetail(JobDetailInfo info)\n    {\n        JobDetail detail = new JobDetail();\n        detail.setName(info.getName());\n        detail.setGroup(info.getGroup());\n        detail.setDescription(info.getDescription());\n        detail.setJobClass(info.getJobClass());\n        detail.setJobDataMap(info.getJobDataMap());\n        detail.setRequestsRecovery(info.isShouldRecover());\n        detail.setDurability(info.isDurability());\n        detail.setVolatility(info.isVolatility());\n        logger.info(\"client get jobdetail:\" + detail);\n        return detail;\n    }\n \n    /**\n     * @param triggerInfo\n     * @return\n     */\n    private SimpleTrigger getTrigger(TriggerInfo info)\n    {\n        SimpleTrigger trigger = new SimpleTrigger();\n        trigger.setName(info.getName());\n        trigger.setGroup(info.getGroup());\n        trigger.setDescription(info.getDescription());\n        trigger.setStartTime(info.getStartTime());\n        trigger.setEndTime(info.getEndTime());\n        trigger.setRepeatInterval(info.getRepeatInterval());\n        trigger.setRepeatCount(info.getRepeatCount());\n        logger.info(\"client get trigger:\" + trigger);\n        return trigger;\n    }\n \n    public static void main(String[] args)\n    {\n        TaskRunner t = new TaskRunner();\n        t.getCronJob();\n        t.close();\n    }\n}\n```  \n  \n先启动TaskScheduler，再启动TaskRunner，结果如下：  \n\n> TaskScheduler日志:\n> 2013-01-20 15:42:21,661 [Socket Reader #1 for port 8888] INFO  [org.apache.hadoop.ipc.Server] – Starting Socket Reader #1 for port 8888\n> 2013-01-20 15:42:21,662 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888\n> 2013-01-20 15:42:21,706 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcDetailedMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888\n> 2013-01-20 15:42:21,710 [IPC Server listener on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server listener on 8888: starting\n> 2013-01-20 15:42:21,711 [IPC Server Responder] INFO  [org.apache.hadoop.ipc.Server] – IPC Server Responder: starting\n> 2013-01-20 15:42:21,711 [IPC Server handler 0 on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server handler 0 on 8888: starting\n> 2013-01-20 15:42:24,084 [IPC Server handler 0 on 8888] INFO  [org.mh.rpc.task.TaskScheduler] – generate a task: org.mh.rpc.task.JobDetailInfo@1f26605\n> \n> TaskRunner:\n> 2013-01-20 15:42:26,323 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get jobdetail:JobDetail ‘JobGroup_1.MyJob_1′:  jobClass: ‘org.mh.rpc.quartz.GetSumTask isStateful: false isVolatile: false isDurable: false requestsRecovers: false\n> 2013-01-20 15:42:26,329 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get trigger:Trigger ‘Trigger_Group_1.Trigger_1′:  triggerClass: ‘org.quartz.SimpleTrigger isVolatile: false calendar: ‘null’ misfireInstruction: 0 nextFireTime: null\n> 2013-01-20 15:42:26,382 [main] INFO  [org.quartz.simpl.SimpleThreadPool] – Job execution threads will use class loader of thread: main\n> 2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.SchedulerSignalerImpl] – Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl\n> 2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.QuartzScheduler] – Quartz Scheduler v.1.6.5 created.\n> 2013-01-20 15:42:26,413 [main] INFO  [org.quartz.simpl.RAMJobStore] – RAMJobStore initialized.\n> 2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler ‘DefaultQuartzScheduler’ initialized from default resource file in Quartz package: ‘quartz.properties’\n> 2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler version: 1.6.5\n> 2013-01-20 15:42:26,415 [main] INFO  [org.quartz.core.QuartzScheduler] – Scheduler DefaultQuartzScheduler_$_NON_CLUSTERED started.\n> org.mh.rpc.quartz.DemoTask@1b66b06: executing task @Sun Jan 20 15:42:26 CST 2013\n\n上面是一个简单的demo，演示了如何通过RPC将任务调度给节点去执行，对于Quartz来说，任务的形式可以千变万化，关键就看怎么去使用了，分发到多个节点上执行的话，就还需要对任务的信息做更多的封装了。\n\n","slug":"将Hadoop-RPC框架应用于多节点任务调度","published":1,"updated":"2016-07-09T13:04:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxgg0019d968h6hkadba","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在hadoop中，主从节点之间保持着心跳通信，用于传输节点状态信息、任务调度信息以及节点动作信息等等。 hdfs的namenode与datanode，mapreduce的jobtracker与tasktracker，hbase的hmaster与 regionserver之间的通信，都是基于hadoop RPC。Hadoop RPC是hadoop里非常基础的通信框架。hadoop 2.0以前hadoop RPC的数据序列化是通过实现自己定义的Writable接口实现，而从hadoop 2.0开始，数据的序列化工作交给了ProtocolBuffer去做。关于Hadoop RPC的实现原理已经有很多文章进行了详细的介绍（<a href=\"http://weixiaolu.iteye.com/blog/1504898\" target=\"_blank\" rel=\"external\">源码级强力分析hadoop的RPC机制</a>，<a href=\"http://yanbohappy.sinaapp.com/?p=110\" target=\"_blank\" rel=\"external\">Hadoop基于Protocol Buffer的RPC实现代码分析-Server端</a>，<a href=\"http://yanbohappy.sinaapp.com/?p=115\" target=\"_blank\" rel=\"external\">带有HA功能的Hadoop Client端RPC实现原理与代码分析</a>），这里就不在赘述了。下面就直接引入问题和方案吧。  </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>工作中经常需要在定时任务系统上写一些定时任务，随着业务规模的增长和扩大，需要定时处理的任务越来越多，任务之间的执行间隔越来越小，某一时间段内（比如0点、整点或半点）执行的任务会越来越密集，只在一台机器上执行这些任务的话，会出现较大的风险：  </p>\n<ul>\n<li>任务并发度较高时，单机的系统资源将成为瓶颈  </li>\n<li>如果一个任务的运行占用了整个机器的大部分资源，比如sql查询耗费巨大内存和CPU资源，将直接影响其他任务的运行  </li>\n<li>任务失败后，如果仍然在同一台节点自动重新执行，失败率较高  </li>\n<li>机器宕机后，必须第一时间重启机器或重新部署定时任务系统，所有任务都不能按时执行  </li>\n<li>等等  </li>\n</ul>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><p>可想而知的是，可以通过将定时任务系统进行分布式改造，使用多个节点执行任务，将任务分发到不同节点上进行处理，并且完善失败重试机制，从而提高系统稳定性，实现任务系统的高可靠。<br>既然是在多个节点之间分发任务，肯定得有个任务的管理者(主节点)，在我们现有的系统中，也就是一套可以部署定时任务的web系统，任务代码更新后，部署好这套web系统，即可通过web页面设置定时任务并且进行调度(在单个节点上执行)。执行任务的节点(子节点)有多个以后，如何分发任务到子节点呢，我们可以把任务的信息封装成一个bean，通过RPC发布给子节点，子节点通过这个任务bean获得任务信息，并在指定的时刻执行任务。同时，子节点可以通过与主节点的心跳通信将节点状态和执行任务的情况告诉主节点。<br>这样其实就与hadoop mapreduce分发任务有点相似了，呵呵，这里主节点与子节点之间的通信，我们就可以通过Hadoop RPC框架来实现了，不同的是，我们分发的任务是定时任务，发布任务时需要将任务的定时信息一并发给子节点。  </p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>单点的定时任务系统是基于Quartz的，在分布式环境下，可以继续基于Quartz进行改造，任务的定时信息可以通过Quartz中的JobDetail和Trigger对象来描述并封装，加上任务执行的入口类信息，再通过RPC由主节点发给子节点。子节点收到封装好的任务信息对象后，再构造JobDetail和Trigger，设置好启动时间后，通过入口类启动任务。下面是一个简单的demo。<br><a id=\"more\"></a><br>以下是一个简单的定时任务信息描述对象CronJobInfo，包括JobDetailInfo和TriggerInfo两个属性：  </p>\n<pre><code class=\"java\"><span class=\"comment\">/**\n* 定时任务信息，包括任务信息和触发器信息\n*/</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CronJobInfo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span>\n</span>{\n    <span class=\"keyword\">private</span> JobDetailInfo jobDetailInfo = <span class=\"keyword\">new</span> JobDetailInfo();\n    <span class=\"keyword\">private</span> TriggerInfo triggerInfo = <span class=\"keyword\">new</span> TriggerInfo();\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        jobDetailInfo.readFields(in);\n        triggerInfo.readFields(in);\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        jobDetailInfo.write(out);\n        triggerInfo.write(out);\n    }\n    <span class=\"comment\">// getters and setters...</span>\n}\n</code></pre>\n<p>任务信息JobDetailInfo，由主节点构造，子节点解析构造JobDetail对象：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JobDetailInfo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span>\n</span>{\n    <span class=\"keyword\">private</span> String name; <span class=\"comment\">// 任务名称</span>\n    <span class=\"keyword\">private</span> String group = Scheduler.DEFAULT_GROUP; <span class=\"comment\">// 任务组</span>\n    <span class=\"keyword\">private</span> String description; <span class=\"comment\">// 任务描述</span>\n    <span class=\"keyword\">private</span> Class jobClass; <span class=\"comment\">// 任务的启动类</span>\n    <span class=\"keyword\">private</span> JobDataMap jobDataMap; <span class=\"comment\">// 任务所需的参数，用来给作业提供数据支持的数据结构</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> volatility = <span class=\"keyword\">false</span>; <span class=\"comment\">// &lt;span&gt;重启应用之后是否删除任务的相关信息,&lt;/span&gt;</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> durability = <span class=\"keyword\">false</span>; <span class=\"comment\">// 任务完成之后是否依然保留到数据库</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> shouldRecover = <span class=\"keyword\">false</span>; <span class=\"comment\">// 应用重启之后时候忽略过期任务</span>\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        name = WritableUtils.readString(in);\n        group = WritableUtils.readString(in);\n        description = WritableUtils.readString(in);\n        String className = WritableUtils.readString(in);\n        <span class=\"keyword\">if</span> (className != <span class=\"keyword\">null</span>)\n        {\n          <span class=\"keyword\">try</span>\n          {\n             jobClass = Class.forName(<span class=\"keyword\">new</span> String(className));\n          }\n          <span class=\"keyword\">catch</span> (ClassNotFoundException e)\n          {\n             e.printStackTrace();\n          }\n        }\n        <span class=\"keyword\">int</span> dataMapSize = WritableUtils.readVInt(in);\n        <span class=\"keyword\">while</span> (dataMapSize-- &gt; <span class=\"number\">0</span>)\n        {\n           String key = WritableUtils.readString(in);\n           String value = WritableUtils.readString(in);\n           jobDataMap.put(key, value);\n        }\n        volatility = in.readBoolean();\n        durability = in.readBoolean();\n        shouldRecover = in.readBoolean();\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        WritableUtils.writeString(out, name);\n        WritableUtils.writeString(out, group);\n        WritableUtils.writeString(out, description);\n        WritableUtils.writeString(out, jobClass.getName());\n        <span class=\"keyword\">if</span> (jobDataMap == <span class=\"keyword\">null</span>)\n            WritableUtils.writeVInt(out, <span class=\"number\">0</span>);\n        <span class=\"keyword\">else</span>\n        {\n            WritableUtils.writeVInt(out, jobDataMap.size());\n            <span class=\"keyword\">for</span> (Object k : jobDataMap.keySet())\n            {\n                WritableUtils.writeString(out, k.toString());\n                WritableUtils.writeString(out, jobDataMap.get(k).toString());\n            }\n        }\n        out.writeBoolean(volatility);\n        out.writeBoolean(durability);\n        out.writeBoolean(shouldRecover);\n   }\n   <span class=\"comment\">//getters and setters</span>\n   <span class=\"comment\">//.....</span>\n}\n</code></pre>\n<p>任务触发器信息TriggerInfo ，由主节点构造，子节点解析构造Trigger对象：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TriggerInfo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span>\n</span>{\n    <span class=\"keyword\">private</span> String name; <span class=\"comment\">// trigger名称</span>\n    <span class=\"keyword\">private</span> String group = Scheduler.DEFAULT_GROUP; <span class=\"comment\">// triger组名称</span>\n    <span class=\"keyword\">private</span> String description; <span class=\"comment\">// trigger描述</span>\n    <span class=\"keyword\">private</span> Date startTime; <span class=\"comment\">// 启动时间</span>\n    <span class=\"keyword\">private</span> Date endTime; <span class=\"comment\">// 结束时间</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> repeatInterval; <span class=\"comment\">// 重试时间间隔</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> repeatCount; <span class=\"comment\">//重试次数</span>\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n       name = WritableUtils.readString(in);\n       group = WritableUtils.readString(in);\n       description = WritableUtils.readString(in);\n       <span class=\"keyword\">long</span> start = in.readLong();\n       startTime = start==<span class=\"number\">0</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> Date(start);\n       <span class=\"keyword\">long</span> end = in.readLong();\n       endTime = end==<span class=\"number\">0</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> Date(end);\n       repeatInterval = in.readLong();\n       repeatCount = in.readInt();\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n       WritableUtils.writeString(out, name);\n       WritableUtils.writeString(out, group);\n       WritableUtils.writeString(out, description);\n       out.writeLong(startTime == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : startTime.getTime());\n       out.writeLong(endTime == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : endTime.getTime());\n       out.writeLong(repeatInterval);\n       out.writeInt(repeatCount);\n    }\n    <span class=\"comment\">//getters and setters</span>\n    <span class=\"comment\">//.....</span>\n}\n</code></pre>\n<p>主从节点通信的协议：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TaskProtocol</span> <span class=\"keyword\">extends</span> <span class=\"title\">VersionedProtocol</span>\n</span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> CronJobInfo <span class=\"title\">hearbeat</span><span class=\"params\">()</span></span>;\n}\n</code></pre>\n<p>在这个demo中，主节点启动后，启动RPC server线程，等待客户端（子节点）的连接，当客户端调用heartbeat方法时，主节点将会生成一个任务信息返回给客户端：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskScheduler</span> <span class=\"keyword\">implements</span> <span class=\"title\">TaskProtocol</span>\n</span>{\n    <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(getClass());\n    <span class=\"keyword\">private</span> Server server;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskScheduler</span><span class=\"params\">()</span>\n    </span>{\n        <span class=\"keyword\">try</span>\n        {\n            server = RPC.getServer(<span class=\"keyword\">this</span>, <span class=\"string\">\"192.168.1.101\"</span>, <span class=\"number\">8888</span>, <span class=\"keyword\">new</span> Configuration());\n            server.start();\n            server.join();\n        }\n        <span class=\"keyword\">catch</span> (UnknownHostException e)\n        {\n            e.printStackTrace();\n        }\n        <span class=\"keyword\">catch</span> (IOException e)\n        {\n            e.printStackTrace();\n        }\n        <span class=\"keyword\">catch</span> (InterruptedException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getProtocolVersion</span><span class=\"params\">(String arg0, <span class=\"keyword\">long</span> arg1)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> CronJobInfo <span class=\"title\">generateCronJob</span><span class=\"params\">()</span>\n    </span>{\n        <span class=\"comment\">// 1、创建JobDetial对象</span>\n        JobDetailInfo detail = <span class=\"keyword\">new</span> JobDetailInfo();\n        <span class=\"comment\">// 设置工作项</span>\n        detail.setJobClass(DemoTask.class);\n        detail.setName(<span class=\"string\">\"MyJob_1\"</span>);\n        detail.setGroup(<span class=\"string\">\"JobGroup_1\"</span>);\n\n        <span class=\"comment\">// 2、创建Trigger对象</span>\n        TriggerInfo trigger = <span class=\"keyword\">new</span> TriggerInfo();\n        trigger.setName(<span class=\"string\">\"Trigger_1\"</span>);\n        trigger.setGroup(<span class=\"string\">\"Trigger_Group_1\"</span>);\n        trigger.setStartTime(<span class=\"keyword\">new</span> Date());\n        <span class=\"comment\">// 设置重复停止时间，并销毁该Trigger对象</span>\n        Calendar c = Calendar.getInstance();\n        c.setTimeInMillis(System.currentTimeMillis() + <span class=\"number\">1000</span> * <span class=\"number\">1L</span>);\n        trigger.setEndTime(c.getTime());\n        <span class=\"comment\">// 设置重复间隔时间</span>\n        trigger.setRepeatInterval(<span class=\"number\">1000</span> * <span class=\"number\">1L</span>);\n        <span class=\"comment\">// 设置重复执行次数</span>\n        trigger.setRepeatCount(<span class=\"number\">3</span>);\n\n        CronJobInfo info = <span class=\"keyword\">new</span> CronJobInfo();\n        info.setJobDetailInfo(detail);\n        info.setTriggerInfo(trigger);\n\n        <span class=\"keyword\">return</span> info;\n    }\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>\n    </span>{\n        TaskScheduler ts = <span class=\"keyword\">new</span> TaskScheduler();\n    }\n\n}\n</code></pre>\n<p>demo任务类，打印信息：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Job</span>\n</span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext context)</span>\n            <span class=\"keyword\">throws</span> JobExecutionException\n    </span>{\n        System.out.println(<span class=\"keyword\">this</span> + <span class=\"string\">\": executing task @\"</span> + <span class=\"keyword\">new</span> Date());\n    }\n}\n</code></pre>\n<p>子节点demo，启动后连接主节点，远程调用generateCronJob方法，获得一个任务描述信息，并启动定时任务。  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskRunner</span>\n</span>{\n    <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(getClass());\n    <span class=\"keyword\">private</span> TaskProtocol proxy;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskRunner</span><span class=\"params\">()</span>\n    </span>{\n        InetSocketAddress addr = <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8888</span>);\n        <span class=\"keyword\">try</span>\n        {\n            proxy = (TaskProtocol) RPC.waitForProxy(TaskProtocol.class, <span class=\"number\">1</span>, addr,\n                    <span class=\"keyword\">new</span> Configuration());\n        }\n        <span class=\"keyword\">catch</span> (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span>\n    </span>{\n        RPC.stopProxy(proxy);\n    }\n\n    <span class=\"comment\">/**\n     * 从server获取一个定时任务\n     */</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getCronJob</span><span class=\"params\">()</span>\n    </span>{\n        CronJobInfo info = proxy.generateCronJob();\n        JobDetail jobDetail = getJobDetail(info.getJobDetailInfo());\n        SimpleTrigger trigger = getTrigger(info.getTriggerInfo());\n\n        <span class=\"comment\">// 创建Scheduler对象，并配置JobDetail和Trigger对象</span>\n        SchedulerFactory sf = <span class=\"keyword\">new</span> StdSchedulerFactory();\n        Scheduler scheduler = <span class=\"keyword\">null</span>;\n        <span class=\"keyword\">try</span>\n        {\n            scheduler = sf.getScheduler();\n            scheduler.scheduleJob(jobDetail, trigger);\n            <span class=\"comment\">// 执行启动操作</span>\n            scheduler.start();\n\n        }\n        <span class=\"keyword\">catch</span> (SchedulerException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"comment\">/**\n     * <span class=\"doctag\">@param</span> jobDetailInfo\n     * <span class=\"doctag\">@return</span>\n     */</span>\n    <span class=\"function\"><span class=\"keyword\">private</span> JobDetail <span class=\"title\">getJobDetail</span><span class=\"params\">(JobDetailInfo info)</span>\n    </span>{\n        JobDetail detail = <span class=\"keyword\">new</span> JobDetail();\n        detail.setName(info.getName());\n        detail.setGroup(info.getGroup());\n        detail.setDescription(info.getDescription());\n        detail.setJobClass(info.getJobClass());\n        detail.setJobDataMap(info.getJobDataMap());\n        detail.setRequestsRecovery(info.isShouldRecover());\n        detail.setDurability(info.isDurability());\n        detail.setVolatility(info.isVolatility());\n        logger.info(<span class=\"string\">\"client get jobdetail:\"</span> + detail);\n        <span class=\"keyword\">return</span> detail;\n    }\n\n    <span class=\"comment\">/**\n     * <span class=\"doctag\">@param</span> triggerInfo\n     * <span class=\"doctag\">@return</span>\n     */</span>\n    <span class=\"function\"><span class=\"keyword\">private</span> SimpleTrigger <span class=\"title\">getTrigger</span><span class=\"params\">(TriggerInfo info)</span>\n    </span>{\n        SimpleTrigger trigger = <span class=\"keyword\">new</span> SimpleTrigger();\n        trigger.setName(info.getName());\n        trigger.setGroup(info.getGroup());\n        trigger.setDescription(info.getDescription());\n        trigger.setStartTime(info.getStartTime());\n        trigger.setEndTime(info.getEndTime());\n        trigger.setRepeatInterval(info.getRepeatInterval());\n        trigger.setRepeatCount(info.getRepeatCount());\n        logger.info(<span class=\"string\">\"client get trigger:\"</span> + trigger);\n        <span class=\"keyword\">return</span> trigger;\n    }\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>\n    </span>{\n        TaskRunner t = <span class=\"keyword\">new</span> TaskRunner();\n        t.getCronJob();\n        t.close();\n    }\n}\n</code></pre>\n<p>先启动TaskScheduler，再启动TaskRunner，结果如下：  </p>\n<blockquote>\n<p>TaskScheduler日志:<br>2013-01-20 15:42:21,661 [Socket Reader #1 for port 8888] INFO  [org.apache.hadoop.ipc.Server] – Starting Socket Reader #1 for port 8888<br>2013-01-20 15:42:21,662 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888<br>2013-01-20 15:42:21,706 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcDetailedMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888<br>2013-01-20 15:42:21,710 [IPC Server listener on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server listener on 8888: starting<br>2013-01-20 15:42:21,711 [IPC Server Responder] INFO  [org.apache.hadoop.ipc.Server] – IPC Server Responder: starting<br>2013-01-20 15:42:21,711 [IPC Server handler 0 on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server handler 0 on 8888: starting<br>2013-01-20 15:42:24,084 [IPC Server handler 0 on 8888] INFO  [org.mh.rpc.task.TaskScheduler] – generate a task: org.mh.rpc.task.JobDetailInfo@1f26605</p>\n<p>TaskRunner:<br>2013-01-20 15:42:26,323 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get jobdetail:JobDetail ‘JobGroup_1.MyJob_1′:  jobClass: ‘org.mh.rpc.quartz.GetSumTask isStateful: false isVolatile: false isDurable: false requestsRecovers: false<br>2013-01-20 15:42:26,329 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get trigger:Trigger ‘Trigger_Group_1.Trigger<em>1′:  triggerClass: ‘org.quartz.SimpleTrigger isVolatile: false calendar: ‘null’ misfireInstruction: 0 nextFireTime: null<br>2013-01-20 15:42:26,382 [main] INFO  [org.quartz.simpl.SimpleThreadPool] – Job execution threads will use class loader of thread: main<br>2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.SchedulerSignalerImpl] – Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl<br>2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.QuartzScheduler] – Quartz Scheduler v.1.6.5 created.<br>2013-01-20 15:42:26,413 [main] INFO  [org.quartz.simpl.RAMJobStore] – RAMJobStore initialized.<br>2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler ‘DefaultQuartzScheduler’ initialized from default resource file in Quartz package: ‘quartz.properties’<br>2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler version: 1.6.5<br>2013-01-20 15:42:26,415 [main] INFO  [org.quartz.core.QuartzScheduler] – Scheduler DefaultQuartzScheduler</em>$_NON_CLUSTERED started.<br>org.mh.rpc.quartz.DemoTask@1b66b06: executing task @Sun Jan 20 15:42:26 CST 2013</p>\n</blockquote>\n<p>上面是一个简单的demo，演示了如何通过RPC将任务调度给节点去执行，对于Quartz来说，任务的形式可以千变万化，关键就看怎么去使用了，分发到多个节点上执行的话，就还需要对任务的信息做更多的封装了。</p>\n","excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>在hadoop中，主从节点之间保持着心跳通信，用于传输节点状态信息、任务调度信息以及节点动作信息等等。 hdfs的namenode与datanode，mapreduce的jobtracker与tasktracker，hbase的hmaster与 regionserver之间的通信，都是基于hadoop RPC。Hadoop RPC是hadoop里非常基础的通信框架。hadoop 2.0以前hadoop RPC的数据序列化是通过实现自己定义的Writable接口实现，而从hadoop 2.0开始，数据的序列化工作交给了ProtocolBuffer去做。关于Hadoop RPC的实现原理已经有很多文章进行了详细的介绍（<a href=\"http://weixiaolu.iteye.com/blog/1504898\">源码级强力分析hadoop的RPC机制</a>，<a href=\"http://yanbohappy.sinaapp.com/?p=110\">Hadoop基于Protocol Buffer的RPC实现代码分析-Server端</a>，<a href=\"http://yanbohappy.sinaapp.com/?p=115\">带有HA功能的Hadoop Client端RPC实现原理与代码分析</a>），这里就不在赘述了。下面就直接引入问题和方案吧。  </p>\n<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>工作中经常需要在定时任务系统上写一些定时任务，随着业务规模的增长和扩大，需要定时处理的任务越来越多，任务之间的执行间隔越来越小，某一时间段内（比如0点、整点或半点）执行的任务会越来越密集，只在一台机器上执行这些任务的话，会出现较大的风险：  </p>\n<ul>\n<li>任务并发度较高时，单机的系统资源将成为瓶颈  </li>\n<li>如果一个任务的运行占用了整个机器的大部分资源，比如sql查询耗费巨大内存和CPU资源，将直接影响其他任务的运行  </li>\n<li>任务失败后，如果仍然在同一台节点自动重新执行，失败率较高  </li>\n<li>机器宕机后，必须第一时间重启机器或重新部署定时任务系统，所有任务都不能按时执行  </li>\n<li>等等  </li>\n</ul>\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><p>可想而知的是，可以通过将定时任务系统进行分布式改造，使用多个节点执行任务，将任务分发到不同节点上进行处理，并且完善失败重试机制，从而提高系统稳定性，实现任务系统的高可靠。<br>既然是在多个节点之间分发任务，肯定得有个任务的管理者(主节点)，在我们现有的系统中，也就是一套可以部署定时任务的web系统，任务代码更新后，部署好这套web系统，即可通过web页面设置定时任务并且进行调度(在单个节点上执行)。执行任务的节点(子节点)有多个以后，如何分发任务到子节点呢，我们可以把任务的信息封装成一个bean，通过RPC发布给子节点，子节点通过这个任务bean获得任务信息，并在指定的时刻执行任务。同时，子节点可以通过与主节点的心跳通信将节点状态和执行任务的情况告诉主节点。<br>这样其实就与hadoop mapreduce分发任务有点相似了，呵呵，这里主节点与子节点之间的通信，我们就可以通过Hadoop RPC框架来实现了，不同的是，我们分发的任务是定时任务，发布任务时需要将任务的定时信息一并发给子节点。  </p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>单点的定时任务系统是基于Quartz的，在分布式环境下，可以继续基于Quartz进行改造，任务的定时信息可以通过Quartz中的JobDetail和Trigger对象来描述并封装，加上任务执行的入口类信息，再通过RPC由主节点发给子节点。子节点收到封装好的任务信息对象后，再构造JobDetail和Trigger，设置好启动时间后，通过入口类启动任务。下面是一个简单的demo。<br>","more":"<br>以下是一个简单的定时任务信息描述对象CronJobInfo，包括JobDetailInfo和TriggerInfo两个属性：  </p>\n<pre><code class=\"java\"><span class=\"comment\">/**\n* 定时任务信息，包括任务信息和触发器信息\n*/</span>\n<span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CronJobInfo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span>\n</span>{\n    <span class=\"keyword\">private</span> JobDetailInfo jobDetailInfo = <span class=\"keyword\">new</span> JobDetailInfo();\n    <span class=\"keyword\">private</span> TriggerInfo triggerInfo = <span class=\"keyword\">new</span> TriggerInfo();\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        jobDetailInfo.readFields(in);\n        triggerInfo.readFields(in);\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        jobDetailInfo.write(out);\n        triggerInfo.write(out);\n    }\n    <span class=\"comment\">// getters and setters...</span>\n}\n</code></pre>\n<p>任务信息JobDetailInfo，由主节点构造，子节点解析构造JobDetail对象：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JobDetailInfo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span>\n</span>{\n    <span class=\"keyword\">private</span> String name; <span class=\"comment\">// 任务名称</span>\n    <span class=\"keyword\">private</span> String group = Scheduler.DEFAULT_GROUP; <span class=\"comment\">// 任务组</span>\n    <span class=\"keyword\">private</span> String description; <span class=\"comment\">// 任务描述</span>\n    <span class=\"keyword\">private</span> Class jobClass; <span class=\"comment\">// 任务的启动类</span>\n    <span class=\"keyword\">private</span> JobDataMap jobDataMap; <span class=\"comment\">// 任务所需的参数，用来给作业提供数据支持的数据结构</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> volatility = <span class=\"keyword\">false</span>; <span class=\"comment\">// &lt;span&gt;重启应用之后是否删除任务的相关信息,&lt;/span&gt;</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> durability = <span class=\"keyword\">false</span>; <span class=\"comment\">// 任务完成之后是否依然保留到数据库</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> shouldRecover = <span class=\"keyword\">false</span>; <span class=\"comment\">// 应用重启之后时候忽略过期任务</span>\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        name = WritableUtils.readString(in);\n        group = WritableUtils.readString(in);\n        description = WritableUtils.readString(in);\n        String className = WritableUtils.readString(in);\n        <span class=\"keyword\">if</span> (className != <span class=\"keyword\">null</span>)\n        {\n          <span class=\"keyword\">try</span>\n          {\n             jobClass = Class.forName(<span class=\"keyword\">new</span> String(className));\n          }\n          <span class=\"keyword\">catch</span> (ClassNotFoundException e)\n          {\n             e.printStackTrace();\n          }\n        }\n        <span class=\"keyword\">int</span> dataMapSize = WritableUtils.readVInt(in);\n        <span class=\"keyword\">while</span> (dataMapSize-- &gt; <span class=\"number\">0</span>)\n        {\n           String key = WritableUtils.readString(in);\n           String value = WritableUtils.readString(in);\n           jobDataMap.put(key, value);\n        }\n        volatility = in.readBoolean();\n        durability = in.readBoolean();\n        shouldRecover = in.readBoolean();\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        WritableUtils.writeString(out, name);\n        WritableUtils.writeString(out, group);\n        WritableUtils.writeString(out, description);\n        WritableUtils.writeString(out, jobClass.getName());\n        <span class=\"keyword\">if</span> (jobDataMap == <span class=\"keyword\">null</span>)\n            WritableUtils.writeVInt(out, <span class=\"number\">0</span>);\n        <span class=\"keyword\">else</span>\n        {\n            WritableUtils.writeVInt(out, jobDataMap.size());\n            <span class=\"keyword\">for</span> (Object k : jobDataMap.keySet())\n            {\n                WritableUtils.writeString(out, k.toString());\n                WritableUtils.writeString(out, jobDataMap.get(k).toString());\n            }\n        }\n        out.writeBoolean(volatility);\n        out.writeBoolean(durability);\n        out.writeBoolean(shouldRecover);\n   }\n   <span class=\"comment\">//getters and setters</span>\n   <span class=\"comment\">//.....</span>\n}\n</code></pre>\n<p>任务触发器信息TriggerInfo ，由主节点构造，子节点解析构造Trigger对象：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TriggerInfo</span> <span class=\"keyword\">implements</span> <span class=\"title\">Writable</span>\n</span>{\n    <span class=\"keyword\">private</span> String name; <span class=\"comment\">// trigger名称</span>\n    <span class=\"keyword\">private</span> String group = Scheduler.DEFAULT_GROUP; <span class=\"comment\">// triger组名称</span>\n    <span class=\"keyword\">private</span> String description; <span class=\"comment\">// trigger描述</span>\n    <span class=\"keyword\">private</span> Date startTime; <span class=\"comment\">// 启动时间</span>\n    <span class=\"keyword\">private</span> Date endTime; <span class=\"comment\">// 结束时间</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">long</span> repeatInterval; <span class=\"comment\">// 重试时间间隔</span>\n    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> repeatCount; <span class=\"comment\">//重试次数</span>\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">readFields</span><span class=\"params\">(DataInput in)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n       name = WritableUtils.readString(in);\n       group = WritableUtils.readString(in);\n       description = WritableUtils.readString(in);\n       <span class=\"keyword\">long</span> start = in.readLong();\n       startTime = start==<span class=\"number\">0</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> Date(start);\n       <span class=\"keyword\">long</span> end = in.readLong();\n       endTime = end==<span class=\"number\">0</span> ? <span class=\"keyword\">null</span> : <span class=\"keyword\">new</span> Date(end);\n       repeatInterval = in.readLong();\n       repeatCount = in.readInt();\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">write</span><span class=\"params\">(DataOutput out)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n       WritableUtils.writeString(out, name);\n       WritableUtils.writeString(out, group);\n       WritableUtils.writeString(out, description);\n       out.writeLong(startTime == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : startTime.getTime());\n       out.writeLong(endTime == <span class=\"keyword\">null</span> ? <span class=\"number\">0</span> : endTime.getTime());\n       out.writeLong(repeatInterval);\n       out.writeInt(repeatCount);\n    }\n    <span class=\"comment\">//getters and setters</span>\n    <span class=\"comment\">//.....</span>\n}\n</code></pre>\n<p>主从节点通信的协议：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TaskProtocol</span> <span class=\"keyword\">extends</span> <span class=\"title\">VersionedProtocol</span>\n</span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> CronJobInfo <span class=\"title\">hearbeat</span><span class=\"params\">()</span></span>;\n}\n</code></pre>\n<p>在这个demo中，主节点启动后，启动RPC server线程，等待客户端（子节点）的连接，当客户端调用heartbeat方法时，主节点将会生成一个任务信息返回给客户端：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskScheduler</span> <span class=\"keyword\">implements</span> <span class=\"title\">TaskProtocol</span>\n</span>{\n    <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(getClass());\n    <span class=\"keyword\">private</span> Server server;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskScheduler</span><span class=\"params\">()</span>\n    </span>{\n        <span class=\"keyword\">try</span>\n        {\n            server = RPC.getServer(<span class=\"keyword\">this</span>, <span class=\"string\">\"192.168.1.101\"</span>, <span class=\"number\">8888</span>, <span class=\"keyword\">new</span> Configuration());\n            server.start();\n            server.join();\n        }\n        <span class=\"keyword\">catch</span> (UnknownHostException e)\n        {\n            e.printStackTrace();\n        }\n        <span class=\"keyword\">catch</span> (IOException e)\n        {\n            e.printStackTrace();\n        }\n        <span class=\"keyword\">catch</span> (InterruptedException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">long</span> <span class=\"title\">getProtocolVersion</span><span class=\"params\">(String arg0, <span class=\"keyword\">long</span> arg1)</span> <span class=\"keyword\">throws</span> IOException\n    </span>{\n        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;\n    }\n\n    <span class=\"meta\">@Override</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> CronJobInfo <span class=\"title\">generateCronJob</span><span class=\"params\">()</span>\n    </span>{\n        <span class=\"comment\">// 1、创建JobDetial对象</span>\n        JobDetailInfo detail = <span class=\"keyword\">new</span> JobDetailInfo();\n        <span class=\"comment\">// 设置工作项</span>\n        detail.setJobClass(DemoTask.class);\n        detail.setName(<span class=\"string\">\"MyJob_1\"</span>);\n        detail.setGroup(<span class=\"string\">\"JobGroup_1\"</span>);\n\n        <span class=\"comment\">// 2、创建Trigger对象</span>\n        TriggerInfo trigger = <span class=\"keyword\">new</span> TriggerInfo();\n        trigger.setName(<span class=\"string\">\"Trigger_1\"</span>);\n        trigger.setGroup(<span class=\"string\">\"Trigger_Group_1\"</span>);\n        trigger.setStartTime(<span class=\"keyword\">new</span> Date());\n        <span class=\"comment\">// 设置重复停止时间，并销毁该Trigger对象</span>\n        Calendar c = Calendar.getInstance();\n        c.setTimeInMillis(System.currentTimeMillis() + <span class=\"number\">1000</span> * <span class=\"number\">1L</span>);\n        trigger.setEndTime(c.getTime());\n        <span class=\"comment\">// 设置重复间隔时间</span>\n        trigger.setRepeatInterval(<span class=\"number\">1000</span> * <span class=\"number\">1L</span>);\n        <span class=\"comment\">// 设置重复执行次数</span>\n        trigger.setRepeatCount(<span class=\"number\">3</span>);\n\n        CronJobInfo info = <span class=\"keyword\">new</span> CronJobInfo();\n        info.setJobDetailInfo(detail);\n        info.setTriggerInfo(trigger);\n\n        <span class=\"keyword\">return</span> info;\n    }\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>\n    </span>{\n        TaskScheduler ts = <span class=\"keyword\">new</span> TaskScheduler();\n    }\n\n}\n</code></pre>\n<p>demo任务类，打印信息：  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoTask</span> <span class=\"keyword\">implements</span> <span class=\"title\">Job</span>\n</span>{\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(JobExecutionContext context)</span>\n            <span class=\"keyword\">throws</span> JobExecutionException\n    </span>{\n        System.out.println(<span class=\"keyword\">this</span> + <span class=\"string\">\": executing task @\"</span> + <span class=\"keyword\">new</span> Date());\n    }\n}\n</code></pre>\n<p>子节点demo，启动后连接主节点，远程调用generateCronJob方法，获得一个任务描述信息，并启动定时任务。  </p>\n<pre><code class=\"java\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TaskRunner</span>\n</span>{\n    <span class=\"keyword\">private</span> Logger logger = Logger.getLogger(getClass());\n    <span class=\"keyword\">private</span> TaskProtocol proxy;\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TaskRunner</span><span class=\"params\">()</span>\n    </span>{\n        InetSocketAddress addr = <span class=\"keyword\">new</span> InetSocketAddress(<span class=\"string\">\"localhost\"</span>, <span class=\"number\">8888</span>);\n        <span class=\"keyword\">try</span>\n        {\n            proxy = (TaskProtocol) RPC.waitForProxy(TaskProtocol.class, <span class=\"number\">1</span>, addr,\n                    <span class=\"keyword\">new</span> Configuration());\n        }\n        <span class=\"keyword\">catch</span> (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">close</span><span class=\"params\">()</span>\n    </span>{\n        RPC.stopProxy(proxy);\n    }\n\n    <span class=\"comment\">/**\n     * 从server获取一个定时任务\n     */</span>\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getCronJob</span><span class=\"params\">()</span>\n    </span>{\n        CronJobInfo info = proxy.generateCronJob();\n        JobDetail jobDetail = getJobDetail(info.getJobDetailInfo());\n        SimpleTrigger trigger = getTrigger(info.getTriggerInfo());\n\n        <span class=\"comment\">// 创建Scheduler对象，并配置JobDetail和Trigger对象</span>\n        SchedulerFactory sf = <span class=\"keyword\">new</span> StdSchedulerFactory();\n        Scheduler scheduler = <span class=\"keyword\">null</span>;\n        <span class=\"keyword\">try</span>\n        {\n            scheduler = sf.getScheduler();\n            scheduler.scheduleJob(jobDetail, trigger);\n            <span class=\"comment\">// 执行启动操作</span>\n            scheduler.start();\n\n        }\n        <span class=\"keyword\">catch</span> (SchedulerException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n    <span class=\"comment\">/**\n     * <span class=\"doctag\">@param</span> jobDetailInfo\n     * <span class=\"doctag\">@return</span>\n     */</span>\n    <span class=\"function\"><span class=\"keyword\">private</span> JobDetail <span class=\"title\">getJobDetail</span><span class=\"params\">(JobDetailInfo info)</span>\n    </span>{\n        JobDetail detail = <span class=\"keyword\">new</span> JobDetail();\n        detail.setName(info.getName());\n        detail.setGroup(info.getGroup());\n        detail.setDescription(info.getDescription());\n        detail.setJobClass(info.getJobClass());\n        detail.setJobDataMap(info.getJobDataMap());\n        detail.setRequestsRecovery(info.isShouldRecover());\n        detail.setDurability(info.isDurability());\n        detail.setVolatility(info.isVolatility());\n        logger.info(<span class=\"string\">\"client get jobdetail:\"</span> + detail);\n        <span class=\"keyword\">return</span> detail;\n    }\n\n    <span class=\"comment\">/**\n     * <span class=\"doctag\">@param</span> triggerInfo\n     * <span class=\"doctag\">@return</span>\n     */</span>\n    <span class=\"function\"><span class=\"keyword\">private</span> SimpleTrigger <span class=\"title\">getTrigger</span><span class=\"params\">(TriggerInfo info)</span>\n    </span>{\n        SimpleTrigger trigger = <span class=\"keyword\">new</span> SimpleTrigger();\n        trigger.setName(info.getName());\n        trigger.setGroup(info.getGroup());\n        trigger.setDescription(info.getDescription());\n        trigger.setStartTime(info.getStartTime());\n        trigger.setEndTime(info.getEndTime());\n        trigger.setRepeatInterval(info.getRepeatInterval());\n        trigger.setRepeatCount(info.getRepeatCount());\n        logger.info(<span class=\"string\">\"client get trigger:\"</span> + trigger);\n        <span class=\"keyword\">return</span> trigger;\n    }\n\n    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span>\n    </span>{\n        TaskRunner t = <span class=\"keyword\">new</span> TaskRunner();\n        t.getCronJob();\n        t.close();\n    }\n}\n</code></pre>\n<p>先启动TaskScheduler，再启动TaskRunner，结果如下：  </p>\n<blockquote>\n<p>TaskScheduler日志:<br>2013-01-20 15:42:21,661 [Socket Reader #1 for port 8888] INFO  [org.apache.hadoop.ipc.Server] – Starting Socket Reader #1 for port 8888<br>2013-01-20 15:42:21,662 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888<br>2013-01-20 15:42:21,706 [main] INFO  [org.apache.hadoop.ipc.metrics.RpcDetailedMetrics] – Initializing RPC Metrics with hostName=TaskScheduler, port=8888<br>2013-01-20 15:42:21,710 [IPC Server listener on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server listener on 8888: starting<br>2013-01-20 15:42:21,711 [IPC Server Responder] INFO  [org.apache.hadoop.ipc.Server] – IPC Server Responder: starting<br>2013-01-20 15:42:21,711 [IPC Server handler 0 on 8888] INFO  [org.apache.hadoop.ipc.Server] – IPC Server handler 0 on 8888: starting<br>2013-01-20 15:42:24,084 [IPC Server handler 0 on 8888] INFO  [org.mh.rpc.task.TaskScheduler] – generate a task: org.mh.rpc.task.JobDetailInfo@1f26605</p>\n<p>TaskRunner:<br>2013-01-20 15:42:26,323 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get jobdetail:JobDetail ‘JobGroup_1.MyJob_1′:  jobClass: ‘org.mh.rpc.quartz.GetSumTask isStateful: false isVolatile: false isDurable: false requestsRecovers: false<br>2013-01-20 15:42:26,329 [main] INFO  [org.mh.rpc.task.TaskRunner] – client get trigger:Trigger ‘Trigger_Group_1.Trigger<em>1′:  triggerClass: ‘org.quartz.SimpleTrigger isVolatile: false calendar: ‘null’ misfireInstruction: 0 nextFireTime: null<br>2013-01-20 15:42:26,382 [main] INFO  [org.quartz.simpl.SimpleThreadPool] – Job execution threads will use class loader of thread: main<br>2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.SchedulerSignalerImpl] – Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl<br>2013-01-20 15:42:26,411 [main] INFO  [org.quartz.core.QuartzScheduler] – Quartz Scheduler v.1.6.5 created.<br>2013-01-20 15:42:26,413 [main] INFO  [org.quartz.simpl.RAMJobStore] – RAMJobStore initialized.<br>2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler ‘DefaultQuartzScheduler’ initialized from default resource file in Quartz package: ‘quartz.properties’<br>2013-01-20 15:42:26,413 [main] INFO  [org.quartz.impl.StdSchedulerFactory] – Quartz scheduler version: 1.6.5<br>2013-01-20 15:42:26,415 [main] INFO  [org.quartz.core.QuartzScheduler] – Scheduler DefaultQuartzScheduler</em>$_NON_CLUSTERED started.<br>org.mh.rpc.quartz.DemoTask@1b66b06: executing task @Sun Jan 20 15:42:26 CST 2013</p>\n</blockquote>\n<p>上面是一个简单的demo，演示了如何通过RPC将任务调度给节点去执行，对于Quartz来说，任务的形式可以千变万化，关键就看怎么去使用了，分发到多个节点上执行的话，就还需要对任务的信息做更多的封装了。</p>"},{"title":"前后端的CharacterEncoding不一致导致提交的表单数据丢失问题","date":"2014-03-20T03:09:03.000Z","_content":"\n最近在开发分布式任务调度系统的web端时，遇到一个坑，记录如下：\n\n在页面上新增和修改任务，提交后，任务的属性在后端怎么都接收不到，但是在另一个协同开发的同学那边本地调试就OK，在我的本地和公共开发环境都不行，这不合理啊。。。。。\n\n排查了很多地方，js、setter等等，一直没发现问题在哪。跟负责前端的同学交流了下，发现前端post的数据确实是修改过的，也就是后端接收有问题。\n\n于是把最新版本和历史版本对比，发现最新版本新增了一个LogFilter，用于记录pagedelay的，仔细一看，logFilter里面是\n\n```java\nrequest.setCharacterEncoding(“UTF-8″);\nresponse.setContentType(“text/html;charset=UTF-8″);\n```\n\n但页面上是GBK编码，所以导致数据在这个filter中编码出错，造成数据丢失，后端接收到的数据为null。\n\n<font color='red'>解决方法：</font>\n\n把logFilter里的UTF-8改为GBK，就一切正常了。\n\n<font color='red'>疑问：</font>\n\n1. 为何历史本没问题呢，因为历史版本中的logFilter配在struts2Filter之后，请求根本走不到logFilter里去。。。。\n\n2. 为何协同开发的同学本地调试没问题呢，那是因为他把web.xml里的LogFilter的filtermapping注掉了。。。。\n\n好一个歪萝卜大烂坑。。。","source":"_posts/前后端的CharacterEncoding不一致导致提交的表单数据丢失问题.md","raw":"---\ntitle: 前后端的CharacterEncoding不一致导致提交的表单数据丢失问题\ndate: 2014-03-20 11:09:03\ntags:\n- web开发\n- java\ncategories: \n- 问题分析\n---\n\n最近在开发分布式任务调度系统的web端时，遇到一个坑，记录如下：\n\n在页面上新增和修改任务，提交后，任务的属性在后端怎么都接收不到，但是在另一个协同开发的同学那边本地调试就OK，在我的本地和公共开发环境都不行，这不合理啊。。。。。\n\n排查了很多地方，js、setter等等，一直没发现问题在哪。跟负责前端的同学交流了下，发现前端post的数据确实是修改过的，也就是后端接收有问题。\n\n于是把最新版本和历史版本对比，发现最新版本新增了一个LogFilter，用于记录pagedelay的，仔细一看，logFilter里面是\n\n```java\nrequest.setCharacterEncoding(“UTF-8″);\nresponse.setContentType(“text/html;charset=UTF-8″);\n```\n\n但页面上是GBK编码，所以导致数据在这个filter中编码出错，造成数据丢失，后端接收到的数据为null。\n\n<font color='red'>解决方法：</font>\n\n把logFilter里的UTF-8改为GBK，就一切正常了。\n\n<font color='red'>疑问：</font>\n\n1. 为何历史本没问题呢，因为历史版本中的logFilter配在struts2Filter之后，请求根本走不到logFilter里去。。。。\n\n2. 为何协同开发的同学本地调试没问题呢，那是因为他把web.xml里的LogFilter的filtermapping注掉了。。。。\n\n好一个歪萝卜大烂坑。。。","slug":"前后端的CharacterEncoding不一致导致提交的表单数据丢失问题","published":1,"updated":"2016-07-04T16:11:10.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cji64hxgj001cd968q8smz8s7","content":"<p>最近在开发分布式任务调度系统的web端时，遇到一个坑，记录如下：</p>\n<p>在页面上新增和修改任务，提交后，任务的属性在后端怎么都接收不到，但是在另一个协同开发的同学那边本地调试就OK，在我的本地和公共开发环境都不行，这不合理啊。。。。。</p>\n<p>排查了很多地方，js、setter等等，一直没发现问题在哪。跟负责前端的同学交流了下，发现前端post的数据确实是修改过的，也就是后端接收有问题。</p>\n<p>于是把最新版本和历史版本对比，发现最新版本新增了一个LogFilter，用于记录pagedelay的，仔细一看，logFilter里面是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.setCharacterEncoding(“UTF-<span class=\"number\">8</span>″);</div><div class=\"line\">response.setContentType(“text/html;charset=UTF-<span class=\"number\">8</span>″);</div></pre></td></tr></table></figure>\n<p>但页面上是GBK编码，所以导致数据在这个filter中编码出错，造成数据丢失，后端接收到的数据为null。</p>\n<font color=\"red\">解决方法：</font>\n\n<p>把logFilter里的UTF-8改为GBK，就一切正常了。</p>\n<font color=\"red\">疑问：</font>\n\n<ol>\n<li><p>为何历史本没问题呢，因为历史版本中的logFilter配在struts2Filter之后，请求根本走不到logFilter里去。。。。</p>\n</li>\n<li><p>为何协同开发的同学本地调试没问题呢，那是因为他把web.xml里的LogFilter的filtermapping注掉了。。。。</p>\n</li>\n</ol>\n<p>好一个歪萝卜大烂坑。。。</p>\n","excerpt":"","more":"<p>最近在开发分布式任务调度系统的web端时，遇到一个坑，记录如下：</p>\n<p>在页面上新增和修改任务，提交后，任务的属性在后端怎么都接收不到，但是在另一个协同开发的同学那边本地调试就OK，在我的本地和公共开发环境都不行，这不合理啊。。。。。</p>\n<p>排查了很多地方，js、setter等等，一直没发现问题在哪。跟负责前端的同学交流了下，发现前端post的数据确实是修改过的，也就是后端接收有问题。</p>\n<p>于是把最新版本和历史版本对比，发现最新版本新增了一个LogFilter，用于记录pagedelay的，仔细一看，logFilter里面是</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">request.setCharacterEncoding(“UTF-<span class=\"number\">8</span>″);</div><div class=\"line\">response.setContentType(“text/html;charset=UTF-<span class=\"number\">8</span>″);</div></pre></td></tr></table></figure>\n<p>但页面上是GBK编码，所以导致数据在这个filter中编码出错，造成数据丢失，后端接收到的数据为null。</p>\n<font color='red'>解决方法：</font>\n\n<p>把logFilter里的UTF-8改为GBK，就一切正常了。</p>\n<font color='red'>疑问：</font>\n\n<ol>\n<li><p>为何历史本没问题呢，因为历史版本中的logFilter配在struts2Filter之后，请求根本走不到logFilter里去。。。。</p>\n</li>\n<li><p>为何协同开发的同学本地调试没问题呢，那是因为他把web.xml里的LogFilter的filtermapping注掉了。。。。</p>\n</li>\n</ol>\n<p>好一个歪萝卜大烂坑。。。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cji64hxef0002d9681ed9xxpv","category_id":"cji64hxf00006d968klywb3b7","_id":"cji64hxfl000gd9686imk3sgh"},{"post_id":"cji64hxfg000dd968rt4qs251","category_id":"cji64hxf00006d968klywb3b7","_id":"cji64hxfo000kd9686p0jw7ak"},{"post_id":"cji64hxep0004d968ueorcz8k","category_id":"cji64hxfh000ed9684we3z1z3","_id":"cji64hxfx000pd9685cb2flij"},{"post_id":"cji64hxf40008d968b2q84yqk","category_id":"cji64hxfn000jd9680zqj7cw5","_id":"cji64hxg4000ud968cpsanwed"},{"post_id":"cji64hxg0000sd968uxne1xs6","category_id":"cji64hxfy000rd9689g1emobu","_id":"cji64hxg7000yd968nzmmo1hg"},{"post_id":"cji64hxfd000ad968p4t5xfq9","category_id":"cji64hxfy000rd9689g1emobu","_id":"cji64hxg90011d9684k5ntp4o"},{"post_id":"cji64hxfi000fd968k9gvgxu8","category_id":"cji64hxg4000wd968xclim7fa","_id":"cji64hxgf0017d968s7fkwten"},{"post_id":"cji64hxfl000hd968clkp372m","category_id":"cji64hxgb0013d968mgukmgt6","_id":"cji64hxgp001dd968d65yq3g2"},{"post_id":"cji64hxgg0019d968h6hkadba","category_id":"cji64hxf00006d968klywb3b7","_id":"cji64hxgq001hd968xyq6n5sq"},{"post_id":"cji64hxfp000md968r7av9rsy","category_id":"cji64hxfy000rd9689g1emobu","_id":"cji64hxgq001jd968u8d4ex0d"},{"post_id":"cji64hxft000od9689036qwjd","category_id":"cji64hxgp001fd968p3nxtghn","_id":"cji64hxgr001md9683piwpwab"},{"post_id":"cji64hxg2000td968uftq0kkx","category_id":"cji64hxgp001fd968p3nxtghn","_id":"cji64hxgu001qd968gric73k4"},{"post_id":"cji64hxg7000zd968mt653kgp","category_id":"cji64hxgr001nd968tj6y99va","_id":"cji64hxgy001vd968cko6f9wl"},{"post_id":"cji64hxga0012d968mnnhduyj","category_id":"cji64hxgu001sd968alyvwhyf","_id":"cji64hxh1001zd968l5whiqhl"},{"post_id":"cji64hxgd0015d968ph1s32v4","category_id":"cji64hxgu001sd968alyvwhyf","_id":"cji64hxh50023d968uh5jmgfm"},{"post_id":"cji64hxgj001cd968q8smz8s7","category_id":"cji64hxgp001fd968p3nxtghn","_id":"cji64hxh60027d968rek94mil"}],"PostTag":[{"post_id":"cji64hxef0002d9681ed9xxpv","tag_id":"cji64hxex0005d968eay1udmq","_id":"cji64hxfp000ld9686a4fx704"},{"post_id":"cji64hxef0002d9681ed9xxpv","tag_id":"cji64hxfe000bd968i18wl5u0","_id":"cji64hxfs000nd968ir52j7sa"},{"post_id":"cji64hxep0004d968ueorcz8k","tag_id":"cji64hxfm000id968pyee94zx","_id":"cji64hxgc0014d96850y2hdoz"},{"post_id":"cji64hxep0004d968ueorcz8k","tag_id":"cji64hxfe000bd968i18wl5u0","_id":"cji64hxgf0016d968ht90xmaq"},{"post_id":"cji64hxep0004d968ueorcz8k","tag_id":"cji64hxg4000vd968uc366q2o","_id":"cji64hxgj001bd968v82a51oy"},{"post_id":"cji64hxf40008d968b2q84yqk","tag_id":"cji64hxg80010d968bsmqbf8q","_id":"cji64hxgp001gd968k6m6t76c"},{"post_id":"cji64hxf40008d968b2q84yqk","tag_id":"cji64hxgf0018d968x2ee4qgo","_id":"cji64hxgq001id968z2ech9vl"},{"post_id":"cji64hxfd000ad968p4t5xfq9","tag_id":"cji64hxgp001ed968hg40fkv7","_id":"cji64hxgt001pd9685ezqr8et"},{"post_id":"cji64hxfd000ad968p4t5xfq9","tag_id":"cji64hxgq001kd96806mja03x","_id":"cji64hxgu001rd968g9gy4ya8"},{"post_id":"cji64hxfg000dd968rt4qs251","tag_id":"cji64hxex0005d968eay1udmq","_id":"cji64hxgw001ud968wxle2ldy"},{"post_id":"cji64hxfg000dd968rt4qs251","tag_id":"cji64hxgs001od9680b3teskr","_id":"cji64hxgy001wd9688uj3eqv9"},{"post_id":"cji64hxfi000fd968k9gvgxu8","tag_id":"cji64hxgu001td968hpih5tnp","_id":"cji64hxh50022d968g903outo"},{"post_id":"cji64hxfi000fd968k9gvgxu8","tag_id":"cji64hxgz001yd968ygw5gp0q","_id":"cji64hxh50024d968z1tmhuy2"},{"post_id":"cji64hxfl000hd968clkp372m","tag_id":"cji64hxh30021d9680b49rgwg","_id":"cji64hxh60026d968hadkiqad"},{"post_id":"cji64hxfp000md968r7av9rsy","tag_id":"cji64hxgp001ed968hg40fkv7","_id":"cji64hxh9002bd968adlxiiu4"},{"post_id":"cji64hxfp000md968r7av9rsy","tag_id":"cji64hxh60028d968oowb80x5","_id":"cji64hxh9002cd968zmnhfrzt"},{"post_id":"cji64hxfp000md968r7av9rsy","tag_id":"cji64hxh80029d968msc4f6qz","_id":"cji64hxh9002ed968qaasvek2"},{"post_id":"cji64hxft000od9689036qwjd","tag_id":"cji64hxh8002ad968azn233l1","_id":"cji64hxha002gd968liu1ij0j"},{"post_id":"cji64hxft000od9689036qwjd","tag_id":"cji64hxh9002dd9685ie730th","_id":"cji64hxha002hd968ju077bu5"},{"post_id":"cji64hxg0000sd968uxne1xs6","tag_id":"cji64hxgp001ed968hg40fkv7","_id":"cji64hxhc002ld96835bvfsu7"},{"post_id":"cji64hxg0000sd968uxne1xs6","tag_id":"cji64hxha002id968h1wmhbbx","_id":"cji64hxhc002md968qgcy5li5"},{"post_id":"cji64hxg0000sd968uxne1xs6","tag_id":"cji64hxhb002jd968sa467arr","_id":"cji64hxhc002od968pkbpfegh"},{"post_id":"cji64hxg2000td968uftq0kkx","tag_id":"cji64hxhb002kd968ojuh3731","_id":"cji64hxhg002rd968nz1lstx5"},{"post_id":"cji64hxg2000td968uftq0kkx","tag_id":"cji64hxhc002nd968cwxvaldu","_id":"cji64hxhg002sd968n7jxf4iz"},{"post_id":"cji64hxg2000td968uftq0kkx","tag_id":"cji64hxhe002pd968mdr2pu7z","_id":"cji64hxhg002ud968x56qgl0e"},{"post_id":"cji64hxg5000xd968tfvwa9fs","tag_id":"cji64hxh30021d9680b49rgwg","_id":"cji64hxhh002wd968f101ivv6"},{"post_id":"cji64hxg5000xd968tfvwa9fs","tag_id":"cji64hxhg002td968hu708c0x","_id":"cji64hxhh002xd968brd2trpx"},{"post_id":"cji64hxg7000zd968mt653kgp","tag_id":"cji64hxhg002vd968q91un67c","_id":"cji64hxhh0030d968tt457jhz"},{"post_id":"cji64hxg7000zd968mt653kgp","tag_id":"cji64hxhh002yd968q31o3xhs","_id":"cji64hxhh0031d968am7r827h"},{"post_id":"cji64hxga0012d968mnnhduyj","tag_id":"cji64hxhh002zd968njpg5fs7","_id":"cji64hxhj0035d968bjbbrzai"},{"post_id":"cji64hxga0012d968mnnhduyj","tag_id":"cji64hxhh0032d968eoplabx0","_id":"cji64hxhj0036d968e7z2ovns"},{"post_id":"cji64hxga0012d968mnnhduyj","tag_id":"cji64hxhh0033d9687ut5ig2a","_id":"cji64hxhj0038d968meblp0il"},{"post_id":"cji64hxgd0015d968ph1s32v4","tag_id":"cji64hxhh002zd968njpg5fs7","_id":"cji64hxhk003bd968gwuuhjcd"},{"post_id":"cji64hxgd0015d968ph1s32v4","tag_id":"cji64hxhj0037d968dw5vf8et","_id":"cji64hxhl003cd9687flv049o"},{"post_id":"cji64hxgd0015d968ph1s32v4","tag_id":"cji64hxhh0033d9687ut5ig2a","_id":"cji64hxhl003ed968w1kchnb1"},{"post_id":"cji64hxgg0019d968h6hkadba","tag_id":"cji64hxex0005d968eay1udmq","_id":"cji64hxhm003hd968eaoi6hef"},{"post_id":"cji64hxgg0019d968h6hkadba","tag_id":"cji64hxhj003ad968h9ocsd3j","_id":"cji64hxhm003id968105oym5a"},{"post_id":"cji64hxgg0019d968h6hkadba","tag_id":"cji64hxhl003dd9687fy5jp3l","_id":"cji64hxhn003kd96804t9utln"},{"post_id":"cji64hxgg0019d968h6hkadba","tag_id":"cji64hxhh0032d968eoplabx0","_id":"cji64hxhn003ld968ra9g8ubh"},{"post_id":"cji64hxgj001cd968q8smz8s7","tag_id":"cji64hxhm003gd968vq1m1k8b","_id":"cji64hxhn003md968h3qwcq1o"},{"post_id":"cji64hxgj001cd968q8smz8s7","tag_id":"cji64hxhm003jd968fun30e31","_id":"cji64hxho003nd968d7a88frl"}],"Tag":[{"name":"hadoop","_id":"cji64hxex0005d968eay1udmq"},{"name":"yarn","_id":"cji64hxfe000bd968i18wl5u0"},{"name":"spark","_id":"cji64hxfm000id968pyee94zx"},{"name":"内存分配","_id":"cji64hxg4000vd968uc366q2o"},{"name":"kafka","_id":"cji64hxg80010d968bsmqbf8q"},{"name":"源码分析","_id":"cji64hxgf0018d968x2ee4qgo"},{"name":"storm","_id":"cji64hxgp001ed968hg40fkv7"},{"name":"实时计算","_id":"cji64hxgq001kd96806mja03x"},{"name":"eclipse","_id":"cji64hxgs001od9680b3teskr"},{"name":"redis","_id":"cji64hxgu001td968hpih5tnp"},{"name":"连接断开","_id":"cji64hxgz001yd968ygw5gp0q"},{"name":"shell","_id":"cji64hxh30021d9680b49rgwg"},{"name":"源码编译","_id":"cji64hxh60028d968oowb80x5"},{"name":"本地调试","_id":"cji64hxh80029d968msc4f6qz"},{"name":"httpclient","_id":"cji64hxh8002ad968azn233l1"},{"name":"tcp连接数","_id":"cji64hxh9002dd9685ie730th"},{"name":"supervisor","_id":"cji64hxha002id968h1wmhbbx"},{"name":"异常排查","_id":"cji64hxhb002jd968sa467arr"},{"name":"swap分区","_id":"cji64hxhb002kd968ojuh3731"},{"name":"问题分析","_id":"cji64hxhc002nd968cwxvaldu"},{"name":"jvm调优","_id":"cji64hxhe002pd968mdr2pu7z"},{"name":"linux","_id":"cji64hxhg002td968hu708c0x"},{"name":"hexo","_id":"cji64hxhg002vd968q91un67c"},{"name":"gitpage","_id":"cji64hxhh002yd968q31o3xhs"},{"name":"zookeeper","_id":"cji64hxhh002zd968njpg5fs7"},{"name":"分布式应用","_id":"cji64hxhh0032d968eoplabx0"},{"name":"分布式协调","_id":"cji64hxhh0033d9687ut5ig2a"},{"name":"横向扩展","_id":"cji64hxhj0037d968dw5vf8et"},{"name":"RPC","_id":"cji64hxhj003ad968h9ocsd3j"},{"name":"任务调度","_id":"cji64hxhl003dd9687fy5jp3l"},{"name":"web开发","_id":"cji64hxhm003gd968vq1m1k8b"},{"name":"java","_id":"cji64hxhm003jd968fun30e31"}]}}